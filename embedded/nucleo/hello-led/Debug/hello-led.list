
hello-led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000648  08000648  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000648  08000648  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000648  08000648  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000648  08000648  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000648  08000648  00001648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800064c  0800064c  0000164c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000650  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800065c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800065c  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f49  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b40  00000000  00000000  00004f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000330  00000000  00000000  00005ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000246  00000000  00000000  00005df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014353  00000000  00000000  00006036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003243  00000000  00000000  0001a389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081442  00000000  00000000  0001d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ea0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000adc  00000000  00000000  0009ea54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0009f530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000630 	.word	0x08000630

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000630 	.word	0x08000630

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 f8bb 	bl	8000358 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable RCC clock
  uint32_t *rccAHB1ENR = (uint32_t*) (RCC_Start + RCC_AHB1ENR_Offset);
 80001e2:	4b17      	ldr	r3, [pc, #92]	@ (8000240 <main+0x68>)
 80001e4:	60bb      	str	r3, [r7, #8]
  *rccAHB1ENR |= GPIO_A_Enable;
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0201 	orr.w	r2, r3, #1
 80001ee:	68bb      	ldr	r3, [r7, #8]
 80001f0:	601a      	str	r2, [r3, #0]

  // Set output mode of the pin
  uint32_t *gpio_a_mode = (uint32_t*) (GPIO_A + GPIO_Port_Mode_Offset);
 80001f2:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <main+0x6c>)
 80001f4:	607b      	str	r3, [r7, #4]
  *gpio_a_mode |= (1U<<10);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
  *gpio_a_mode &= ~(1U<<11);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	601a      	str	r2, [r3, #0]

  // Toggle pin
  uint32_t *gpio_a_data = (uint32_t*) (GPIO_A + GPIO_Port_Data_Offset);
 800020e:	4b0e      	ldr	r3, [pc, #56]	@ (8000248 <main+0x70>)
 8000210:	603b      	str	r3, [r7, #0]
  *gpio_a_data ^= LED_PIN;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f083 0220 	eor.w	r2, r3, #32
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  for(int i = 0; i < 1000000; i++){} // delay
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e002      	b.n	800022a <main+0x52>
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	4a07      	ldr	r2, [pc, #28]	@ (800024c <main+0x74>)
 800022e:	4293      	cmp	r3, r2
 8000230:	ddf8      	ble.n	8000224 <main+0x4c>
	  *gpio_a_data ^= LED_PIN;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f083 0220 	eor.w	r2, r3, #32
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 1000000; i++){} // delay
 800023e:	e7ee      	b.n	800021e <main+0x46>
 8000240:	40023830 	.word	0x40023830
 8000244:	40020000 	.word	0x40020000
 8000248:	40020014 	.word	0x40020014
 800024c:	000f423f 	.word	0x000f423f

08000250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <HAL_MspInit+0x4c>)
 800025c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800025e:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <HAL_MspInit+0x4c>)
 8000260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000264:	6453      	str	r3, [r2, #68]	@ 0x44
 8000266:	4b0d      	ldr	r3, [pc, #52]	@ (800029c <HAL_MspInit+0x4c>)
 8000268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800026a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000272:	2300      	movs	r3, #0
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	4b09      	ldr	r3, [pc, #36]	@ (800029c <HAL_MspInit+0x4c>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027a:	4a08      	ldr	r2, [pc, #32]	@ (800029c <HAL_MspInit+0x4c>)
 800027c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000280:	6413      	str	r3, [r2, #64]	@ 0x40
 8000282:	4b06      	ldr	r3, [pc, #24]	@ (800029c <HAL_MspInit+0x4c>)
 8000284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800028e:	2007      	movs	r0, #7
 8000290:	f000 f976 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000294:	bf00      	nop
 8000296:	3708      	adds	r7, #8
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40023800 	.word	0x40023800

080002a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <NMI_Handler+0x4>

080002a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ac:	bf00      	nop
 80002ae:	e7fd      	b.n	80002ac <HardFault_Handler+0x4>

080002b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <MemManage_Handler+0x4>

080002b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <BusFault_Handler+0x4>

080002c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <UsageFault_Handler+0x4>

080002c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f0:	f000 f884 	bl	80003fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000304:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800033c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000308:	f7ff fff6 	bl	80002f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000332:	f000 f959 	bl	80005e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000336:	f7ff ff4f 	bl	80001d8 <main>
  bx  lr    
 800033a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000348:	08000650 	.word	0x08000650
  ldr r2, =_sbss
 800034c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000350:	2000002c 	.word	0x2000002c

08000354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <HAL_Init+0x40>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <HAL_Init+0x40>)
 8000362:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <HAL_Init+0x40>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <HAL_Init+0x40>)
 800036e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <HAL_Init+0x40>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <HAL_Init+0x40>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800037e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000380:	2003      	movs	r0, #3
 8000382:	f000 f8fd 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000386:	2000      	movs	r0, #0
 8000388:	f000 f808 	bl	800039c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800038c:	f7ff ff60 	bl	8000250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40023c00 	.word	0x40023c00

0800039c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <HAL_InitTick+0x54>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <HAL_InitTick+0x58>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80003b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f907 	bl	80005ce <HAL_SYSTICK_Config>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00e      	b.n	80003e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b0f      	cmp	r3, #15
 80003ce:	d80a      	bhi.n	80003e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003d0:	2200      	movs	r2, #0
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80003d8:	f000 f8dd 	bl	8000596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003dc:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <HAL_InitTick+0x5c>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003e2:	2300      	movs	r3, #0
 80003e4:	e000      	b.n	80003e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003e6:	2301      	movs	r3, #1
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000008 	.word	0x20000008
 80003f8:	20000004 	.word	0x20000004

080003fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <HAL_IncTick+0x1c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <HAL_IncTick+0x20>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4413      	add	r3, r2
 800040c:	4a03      	ldr	r2, [pc, #12]	@ (800041c <HAL_IncTick+0x20>)
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	20000008 	.word	0x20000008
 800041c:	20000028 	.word	0x20000028

08000420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <__NVIC_SetPriorityGrouping+0x44>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800043c:	4013      	ands	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800044c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000452:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <__NVIC_SetPriorityGrouping+0x44>)
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	60d3      	str	r3, [r2, #12]
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046c:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <__NVIC_GetPriorityGrouping+0x18>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	f003 0307 	and.w	r3, r3, #7
}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db0a      	blt.n	80004ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	b2da      	uxtb	r2, r3
 800049c:	490c      	ldr	r1, [pc, #48]	@ (80004d0 <__NVIC_SetPriority+0x4c>)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	0112      	lsls	r2, r2, #4
 80004a4:	b2d2      	uxtb	r2, r2
 80004a6:	440b      	add	r3, r1
 80004a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ac:	e00a      	b.n	80004c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4908      	ldr	r1, [pc, #32]	@ (80004d4 <__NVIC_SetPriority+0x50>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	3b04      	subs	r3, #4
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	440b      	add	r3, r1
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e100 	.word	0xe000e100
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004d8:	b480      	push	{r7}
 80004da:	b089      	sub	sp, #36	@ 0x24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	f1c3 0307 	rsb	r3, r3, #7
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	bf28      	it	cs
 80004f6:	2304      	movcs	r3, #4
 80004f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3304      	adds	r3, #4
 80004fe:	2b06      	cmp	r3, #6
 8000500:	d902      	bls.n	8000508 <NVIC_EncodePriority+0x30>
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3b03      	subs	r3, #3
 8000506:	e000      	b.n	800050a <NVIC_EncodePriority+0x32>
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	43da      	mvns	r2, r3
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	401a      	ands	r2, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	43d9      	mvns	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000530:	4313      	orrs	r3, r2
         );
}
 8000532:	4618      	mov	r0, r3
 8000534:	3724      	adds	r7, #36	@ 0x24
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800054c:	d301      	bcc.n	8000552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800054e:	2301      	movs	r3, #1
 8000550:	e00f      	b.n	8000572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <SysTick_Config+0x40>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800055a:	210f      	movs	r1, #15
 800055c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000560:	f7ff ff90 	bl	8000484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000564:	4b05      	ldr	r3, [pc, #20]	@ (800057c <SysTick_Config+0x40>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056a:	4b04      	ldr	r3, [pc, #16]	@ (800057c <SysTick_Config+0x40>)
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	e000e010 	.word	0xe000e010

08000580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ff49 	bl	8000420 <__NVIC_SetPriorityGrouping>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000596:	b580      	push	{r7, lr}
 8000598:	b086      	sub	sp, #24
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
 80005a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005a8:	f7ff ff5e 	bl	8000468 <__NVIC_GetPriorityGrouping>
 80005ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	6978      	ldr	r0, [r7, #20]
 80005b4:	f7ff ff90 	bl	80004d8 <NVIC_EncodePriority>
 80005b8:	4602      	mov	r2, r0
 80005ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff5f 	bl	8000484 <__NVIC_SetPriority>
}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ffb0 	bl	800053c <SysTick_Config>
 80005dc:	4603      	mov	r3, r0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__libc_init_array>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000620 <__libc_init_array+0x38>)
 80005ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000624 <__libc_init_array+0x3c>)
 80005ee:	1b64      	subs	r4, r4, r5
 80005f0:	10a4      	asrs	r4, r4, #2
 80005f2:	2600      	movs	r6, #0
 80005f4:	42a6      	cmp	r6, r4
 80005f6:	d109      	bne.n	800060c <__libc_init_array+0x24>
 80005f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000628 <__libc_init_array+0x40>)
 80005fa:	4c0c      	ldr	r4, [pc, #48]	@ (800062c <__libc_init_array+0x44>)
 80005fc:	f000 f818 	bl	8000630 <_init>
 8000600:	1b64      	subs	r4, r4, r5
 8000602:	10a4      	asrs	r4, r4, #2
 8000604:	2600      	movs	r6, #0
 8000606:	42a6      	cmp	r6, r4
 8000608:	d105      	bne.n	8000616 <__libc_init_array+0x2e>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000610:	4798      	blx	r3
 8000612:	3601      	adds	r6, #1
 8000614:	e7ee      	b.n	80005f4 <__libc_init_array+0xc>
 8000616:	f855 3b04 	ldr.w	r3, [r5], #4
 800061a:	4798      	blx	r3
 800061c:	3601      	adds	r6, #1
 800061e:	e7f2      	b.n	8000606 <__libc_init_array+0x1e>
 8000620:	08000648 	.word	0x08000648
 8000624:	08000648 	.word	0x08000648
 8000628:	08000648 	.word	0x08000648
 800062c:	0800064c 	.word	0x0800064c

08000630 <_init>:
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000632:	bf00      	nop
 8000634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000636:	bc08      	pop	{r3}
 8000638:	469e      	mov	lr, r3
 800063a:	4770      	bx	lr

0800063c <_fini>:
 800063c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063e:	bf00      	nop
 8000640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000642:	bc08      	pop	{r3}
 8000644:	469e      	mov	lr, r3
 8000646:	4770      	bx	lr
