
ADC_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080061d8  080061d8  000071d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a0  080065a0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080065a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001d4  0800677c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800677c  000083dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a32  00000000  00000000  000081fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c3  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  000123f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000603  00000000  00000000  00012be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017461  00000000  00000000  000131e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009334  00000000  00000000  0002a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093230  00000000  00000000  00033978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003050  00000000  00000000  000c6bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c9c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061bc 	.word	0x080061bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080061bc 	.word	0x080061bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_fmul>:
 8000290:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000298:	bf1e      	ittt	ne
 800029a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800029e:	ea92 0f0c 	teqne	r2, ip
 80002a2:	ea93 0f0c 	teqne	r3, ip
 80002a6:	d06f      	beq.n	8000388 <__aeabi_fmul+0xf8>
 80002a8:	441a      	add	r2, r3
 80002aa:	ea80 0c01 	eor.w	ip, r0, r1
 80002ae:	0240      	lsls	r0, r0, #9
 80002b0:	bf18      	it	ne
 80002b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002b6:	d01e      	beq.n	80002f6 <__aeabi_fmul+0x66>
 80002b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80002bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002c4:	fba0 3101 	umull	r3, r1, r0, r1
 80002c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80002cc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80002d0:	bf3e      	ittt	cc
 80002d2:	0049      	lslcc	r1, r1, #1
 80002d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002d8:	005b      	lslcc	r3, r3, #1
 80002da:	ea40 0001 	orr.w	r0, r0, r1
 80002de:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80002e2:	2afd      	cmp	r2, #253	@ 0xfd
 80002e4:	d81d      	bhi.n	8000322 <__aeabi_fmul+0x92>
 80002e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80002ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ee:	bf08      	it	eq
 80002f0:	f020 0001 	biceq.w	r0, r0, #1
 80002f4:	4770      	bx	lr
 80002f6:	f090 0f00 	teq	r0, #0
 80002fa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80002fe:	bf08      	it	eq
 8000300:	0249      	lsleq	r1, r1, #9
 8000302:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000306:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800030a:	3a7f      	subs	r2, #127	@ 0x7f
 800030c:	bfc2      	ittt	gt
 800030e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000312:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000316:	4770      	bxgt	lr
 8000318:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031c:	f04f 0300 	mov.w	r3, #0
 8000320:	3a01      	subs	r2, #1
 8000322:	dc5d      	bgt.n	80003e0 <__aeabi_fmul+0x150>
 8000324:	f112 0f19 	cmn.w	r2, #25
 8000328:	bfdc      	itt	le
 800032a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800032e:	4770      	bxle	lr
 8000330:	f1c2 0200 	rsb	r2, r2, #0
 8000334:	0041      	lsls	r1, r0, #1
 8000336:	fa21 f102 	lsr.w	r1, r1, r2
 800033a:	f1c2 0220 	rsb	r2, r2, #32
 800033e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000342:	ea5f 0031 	movs.w	r0, r1, rrx
 8000346:	f140 0000 	adc.w	r0, r0, #0
 800034a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800034e:	bf08      	it	eq
 8000350:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000354:	4770      	bx	lr
 8000356:	f092 0f00 	teq	r2, #0
 800035a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800035e:	bf02      	ittt	eq
 8000360:	0040      	lsleq	r0, r0, #1
 8000362:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000366:	3a01      	subeq	r2, #1
 8000368:	d0f9      	beq.n	800035e <__aeabi_fmul+0xce>
 800036a:	ea40 000c 	orr.w	r0, r0, ip
 800036e:	f093 0f00 	teq	r3, #0
 8000372:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0049      	lsleq	r1, r1, #1
 800037a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800037e:	3b01      	subeq	r3, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fmul+0xe6>
 8000382:	ea41 010c 	orr.w	r1, r1, ip
 8000386:	e78f      	b.n	80002a8 <__aeabi_fmul+0x18>
 8000388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800038c:	ea92 0f0c 	teq	r2, ip
 8000390:	bf18      	it	ne
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d00a      	beq.n	80003ae <__aeabi_fmul+0x11e>
 8000398:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800039c:	bf18      	it	ne
 800039e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80003a2:	d1d8      	bne.n	8000356 <__aeabi_fmul+0xc6>
 80003a4:	ea80 0001 	eor.w	r0, r0, r1
 80003a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f090 0f00 	teq	r0, #0
 80003b2:	bf17      	itett	ne
 80003b4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80003b8:	4608      	moveq	r0, r1
 80003ba:	f091 0f00 	teqne	r1, #0
 80003be:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80003c2:	d014      	beq.n	80003ee <__aeabi_fmul+0x15e>
 80003c4:	ea92 0f0c 	teq	r2, ip
 80003c8:	d101      	bne.n	80003ce <__aeabi_fmul+0x13e>
 80003ca:	0242      	lsls	r2, r0, #9
 80003cc:	d10f      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003ce:	ea93 0f0c 	teq	r3, ip
 80003d2:	d103      	bne.n	80003dc <__aeabi_fmul+0x14c>
 80003d4:	024b      	lsls	r3, r1, #9
 80003d6:	bf18      	it	ne
 80003d8:	4608      	movne	r0, r1
 80003da:	d108      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003dc:	ea80 0001 	eor.w	r0, r0, r1
 80003e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003ec:	4770      	bx	lr
 80003ee:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003f2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	@ 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__aeabi_dmul>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8de 	bleq	800094c <__aeabi_dmul+0x1dc>
 8000790:	442c      	add	r4, r5
 8000792:	ea81 0603 	eor.w	r6, r1, r3
 8000796:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800079a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800079e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80007a2:	bf18      	it	ne
 80007a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80007a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007b0:	d038      	beq.n	8000824 <__aeabi_dmul+0xb4>
 80007b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80007c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007c6:	f04f 0600 	mov.w	r6, #0
 80007ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007ce:	f09c 0f00 	teq	ip, #0
 80007d2:	bf18      	it	ne
 80007d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80007d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80007dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80007e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80007e4:	d204      	bcs.n	80007f0 <__aeabi_dmul+0x80>
 80007e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ea:	416d      	adcs	r5, r5
 80007ec:	eb46 0606 	adc.w	r6, r6, r6
 80007f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000800:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000804:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000808:	bf88      	it	hi
 800080a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800080e:	d81e      	bhi.n	800084e <__aeabi_dmul+0xde>
 8000810:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000814:	bf08      	it	eq
 8000816:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800081a:	f150 0000 	adcs.w	r0, r0, #0
 800081e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000828:	ea46 0101 	orr.w	r1, r6, r1
 800082c:	ea40 0002 	orr.w	r0, r0, r2
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000838:	bfc2      	ittt	gt
 800083a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800083e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000842:	bd70      	popgt	{r4, r5, r6, pc}
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000848:	f04f 0e00 	mov.w	lr, #0
 800084c:	3c01      	subs	r4, #1
 800084e:	f300 80ab 	bgt.w	80009a8 <__aeabi_dmul+0x238>
 8000852:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000856:	bfde      	ittt	le
 8000858:	2000      	movle	r0, #0
 800085a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800085e:	bd70      	pople	{r4, r5, r6, pc}
 8000860:	f1c4 0400 	rsb	r4, r4, #0
 8000864:	3c20      	subs	r4, #32
 8000866:	da35      	bge.n	80008d4 <__aeabi_dmul+0x164>
 8000868:	340c      	adds	r4, #12
 800086a:	dc1b      	bgt.n	80008a4 <__aeabi_dmul+0x134>
 800086c:	f104 0414 	add.w	r4, r4, #20
 8000870:	f1c4 0520 	rsb	r5, r4, #32
 8000874:	fa00 f305 	lsl.w	r3, r0, r5
 8000878:	fa20 f004 	lsr.w	r0, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea40 0002 	orr.w	r0, r0, r2
 8000884:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000888:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000890:	fa21 f604 	lsr.w	r6, r1, r4
 8000894:	eb42 0106 	adc.w	r1, r2, r6
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f1c4 040c 	rsb	r4, r4, #12
 80008a8:	f1c4 0520 	rsb	r5, r4, #32
 80008ac:	fa00 f304 	lsl.w	r3, r0, r4
 80008b0:	fa20 f005 	lsr.w	r0, r0, r5
 80008b4:	fa01 f204 	lsl.w	r2, r1, r4
 80008b8:	ea40 0002 	orr.w	r0, r0, r2
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008c4:	f141 0100 	adc.w	r1, r1, #0
 80008c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008cc:	bf08      	it	eq
 80008ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f1c4 0520 	rsb	r5, r4, #32
 80008d8:	fa00 f205 	lsl.w	r2, r0, r5
 80008dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80008e0:	fa20 f304 	lsr.w	r3, r0, r4
 80008e4:	fa01 f205 	lsl.w	r2, r1, r5
 80008e8:	ea43 0302 	orr.w	r3, r3, r2
 80008ec:	fa21 f004 	lsr.w	r0, r1, r4
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	fa21 f204 	lsr.w	r2, r1, r4
 80008f8:	ea20 0002 	bic.w	r0, r0, r2
 80008fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000904:	bf08      	it	eq
 8000906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f094 0f00 	teq	r4, #0
 8000910:	d10f      	bne.n	8000932 <__aeabi_dmul+0x1c2>
 8000912:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000916:	0040      	lsls	r0, r0, #1
 8000918:	eb41 0101 	adc.w	r1, r1, r1
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	bf08      	it	eq
 8000922:	3c01      	subeq	r4, #1
 8000924:	d0f7      	beq.n	8000916 <__aeabi_dmul+0x1a6>
 8000926:	ea41 0106 	orr.w	r1, r1, r6
 800092a:	f095 0f00 	teq	r5, #0
 800092e:	bf18      	it	ne
 8000930:	4770      	bxne	lr
 8000932:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	eb43 0303 	adc.w	r3, r3, r3
 800093c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000940:	bf08      	it	eq
 8000942:	3d01      	subeq	r5, #1
 8000944:	d0f7      	beq.n	8000936 <__aeabi_dmul+0x1c6>
 8000946:	ea43 0306 	orr.w	r3, r3, r6
 800094a:	4770      	bx	lr
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000954:	bf18      	it	ne
 8000956:	ea95 0f0c 	teqne	r5, ip
 800095a:	d00c      	beq.n	8000976 <__aeabi_dmul+0x206>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	d1d1      	bne.n	800090c <__aeabi_dmul+0x19c>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097a:	bf06      	itte	eq
 800097c:	4610      	moveq	r0, r2
 800097e:	4619      	moveq	r1, r3
 8000980:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000984:	d019      	beq.n	80009ba <__aeabi_dmul+0x24a>
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	d102      	bne.n	8000992 <__aeabi_dmul+0x222>
 800098c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000990:	d113      	bne.n	80009ba <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	d105      	bne.n	80009a4 <__aeabi_dmul+0x234>
 8000998:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800099c:	bf1c      	itt	ne
 800099e:	4610      	movne	r0, r2
 80009a0:	4619      	movne	r1, r3
 80009a2:	d10a      	bne.n	80009ba <__aeabi_dmul+0x24a>
 80009a4:	ea81 0103 	eor.w	r1, r1, r3
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <__aeabi_ddiv>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80009ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009d2:	bf1d      	ittte	ne
 80009d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009d8:	ea94 0f0c 	teqne	r4, ip
 80009dc:	ea95 0f0c 	teqne	r5, ip
 80009e0:	f000 f8a7 	bleq	8000b32 <__aeabi_ddiv+0x16e>
 80009e4:	eba4 0405 	sub.w	r4, r4, r5
 80009e8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009f4:	f000 8088 	beq.w	8000b08 <__aeabi_ddiv+0x144>
 80009f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009fc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000a00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a18:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000a1c:	429d      	cmp	r5, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4296      	cmpeq	r6, r2
 8000a22:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000a26:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000a2a:	d202      	bcs.n	8000a32 <__aeabi_ddiv+0x6e>
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	1ab6      	subs	r6, r6, r2
 8000a34:	eb65 0503 	sbc.w	r5, r5, r3
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a42:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a96:	bf22      	ittt	cs
 8000a98:	1ab6      	subcs	r6, r6, r2
 8000a9a:	4675      	movcs	r5, lr
 8000a9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000aa4:	d018      	beq.n	8000ad8 <__aeabi_ddiv+0x114>
 8000aa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000aaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000aae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ab2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ab6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000abe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ac2:	d1c0      	bne.n	8000a46 <__aeabi_ddiv+0x82>
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ac8:	d10b      	bne.n	8000ae2 <__aeabi_ddiv+0x11e>
 8000aca:	ea41 0100 	orr.w	r1, r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000ad6:	e7b6      	b.n	8000a46 <__aeabi_ddiv+0x82>
 8000ad8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000adc:	bf04      	itt	eq
 8000ade:	4301      	orreq	r1, r0
 8000ae0:	2000      	moveq	r0, #0
 8000ae2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000ae6:	bf88      	it	hi
 8000ae8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000aec:	f63f aeaf 	bhi.w	800084e <__aeabi_dmul+0xde>
 8000af0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000af4:	bf04      	itt	eq
 8000af6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000afe:	f150 0000 	adcs.w	r0, r0, #0
 8000b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000b0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b14:	bfc2      	ittt	gt
 8000b16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b20:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b24:	f04f 0e00 	mov.w	lr, #0
 8000b28:	3c01      	subs	r4, #1
 8000b2a:	e690      	b.n	800084e <__aeabi_dmul+0xde>
 8000b2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b30:	e68d      	b.n	800084e <__aeabi_dmul+0xde>
 8000b32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b36:	ea94 0f0c 	teq	r4, ip
 8000b3a:	bf08      	it	eq
 8000b3c:	ea95 0f0c 	teqeq	r5, ip
 8000b40:	f43f af3b 	beq.w	80009ba <__aeabi_dmul+0x24a>
 8000b44:	ea94 0f0c 	teq	r4, ip
 8000b48:	d10a      	bne.n	8000b60 <__aeabi_ddiv+0x19c>
 8000b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b4e:	f47f af34 	bne.w	80009ba <__aeabi_dmul+0x24a>
 8000b52:	ea95 0f0c 	teq	r5, ip
 8000b56:	f47f af25 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	e72c      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b60:	ea95 0f0c 	teq	r5, ip
 8000b64:	d106      	bne.n	8000b74 <__aeabi_ddiv+0x1b0>
 8000b66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b6a:	f43f aefd 	beq.w	8000968 <__aeabi_dmul+0x1f8>
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	e722      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b7e:	f47f aec5 	bne.w	800090c <__aeabi_dmul+0x19c>
 8000b82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b86:	f47f af0d 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b8e:	f47f aeeb 	bne.w	8000968 <__aeabi_dmul+0x1f8>
 8000b92:	e712      	b.n	80009ba <__aeabi_dmul+0x24a>

08000b94 <__gedf2>:
 8000b94:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b98:	e006      	b.n	8000ba8 <__cmpdf2+0x4>
 8000b9a:	bf00      	nop

08000b9c <__ledf2>:
 8000b9c:	f04f 0c01 	mov.w	ip, #1
 8000ba0:	e002      	b.n	8000ba8 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__cmpdf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bbe:	d01b      	beq.n	8000bf8 <__cmpdf2+0x54>
 8000bc0:	b001      	add	sp, #4
 8000bc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bc6:	bf0c      	ite	eq
 8000bc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bcc:	ea91 0f03 	teqne	r1, r3
 8000bd0:	bf02      	ittt	eq
 8000bd2:	ea90 0f02 	teqeq	r0, r2
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	4770      	bxeq	lr
 8000bda:	f110 0f00 	cmn.w	r0, #0
 8000bde:	ea91 0f03 	teq	r1, r3
 8000be2:	bf58      	it	pl
 8000be4:	4299      	cmppl	r1, r3
 8000be6:	bf08      	it	eq
 8000be8:	4290      	cmpeq	r0, r2
 8000bea:	bf2c      	ite	cs
 8000bec:	17d8      	asrcs	r0, r3, #31
 8000bee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bf2:	f040 0001 	orr.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c00:	d102      	bne.n	8000c08 <__cmpdf2+0x64>
 8000c02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c06:	d107      	bne.n	8000c18 <__cmpdf2+0x74>
 8000c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c10:	d1d6      	bne.n	8000bc0 <__cmpdf2+0x1c>
 8000c12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c16:	d0d3      	beq.n	8000bc0 <__cmpdf2+0x1c>
 8000c18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_cdrcmple>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	4610      	mov	r0, r2
 8000c24:	4662      	mov	r2, ip
 8000c26:	468c      	mov	ip, r1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	e000      	b.n	8000c30 <__aeabi_cdcmpeq>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_cdcmpeq>:
 8000c30:	b501      	push	{r0, lr}
 8000c32:	f7ff ffb7 	bl	8000ba4 <__cmpdf2>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	bf48      	it	mi
 8000c3a:	f110 0f00 	cmnmi.w	r0, #0
 8000c3e:	bd01      	pop	{r0, pc}

08000c40 <__aeabi_dcmpeq>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff fff4 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c48:	bf0c      	ite	eq
 8000c4a:	2001      	moveq	r0, #1
 8000c4c:	2000      	movne	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmplt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffea 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmple>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffe0 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c70:	bf94      	ite	ls
 8000c72:	2001      	movls	r0, #1
 8000c74:	2000      	movhi	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_dcmpge>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff ffce 	bl	8000c20 <__aeabi_cdrcmple>
 8000c84:	bf94      	ite	ls
 8000c86:	2001      	movls	r0, #1
 8000c88:	2000      	movhi	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_dcmpgt>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffc4 	bl	8000c20 <__aeabi_cdrcmple>
 8000c98:	bf34      	ite	cc
 8000c9a:	2001      	movcc	r0, #1
 8000c9c:	2000      	movcs	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_dcmpun>:
 8000ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cac:	d102      	bne.n	8000cb4 <__aeabi_dcmpun+0x10>
 8000cae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cb2:	d10a      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	d102      	bne.n	8000cc4 <__aeabi_dcmpun+0x20>
 8000cbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cc2:	d102      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	f04f 0001 	mov.w	r0, #1
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_d2iz>:
 8000cd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cd8:	d215      	bcs.n	8000d06 <__aeabi_d2iz+0x36>
 8000cda:	d511      	bpl.n	8000d00 <__aeabi_d2iz+0x30>
 8000cdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce4:	d912      	bls.n	8000d0c <__aeabi_d2iz+0x3c>
 8000ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0a:	d105      	bne.n	8000d18 <__aeabi_d2iz+0x48>
 8000d0c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000d10:	bf08      	it	eq
 8000d12:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d16:	4770      	bx	lr
 8000d18:	f04f 0000 	mov.w	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_frsub>:
 8000d20:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	e002      	b.n	8000d2c <__addsf3>
 8000d26:	bf00      	nop

08000d28 <__aeabi_fsub>:
 8000d28:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d2c <__addsf3>:
 8000d2c:	0042      	lsls	r2, r0, #1
 8000d2e:	bf1f      	itttt	ne
 8000d30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d34:	ea92 0f03 	teqne	r2, r3
 8000d38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d40:	d06a      	beq.n	8000e18 <__addsf3+0xec>
 8000d42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d4a:	bfc1      	itttt	gt
 8000d4c:	18d2      	addgt	r2, r2, r3
 8000d4e:	4041      	eorgt	r1, r0
 8000d50:	4048      	eorgt	r0, r1
 8000d52:	4041      	eorgt	r1, r0
 8000d54:	bfb8      	it	lt
 8000d56:	425b      	neglt	r3, r3
 8000d58:	2b19      	cmp	r3, #25
 8000d5a:	bf88      	it	hi
 8000d5c:	4770      	bxhi	lr
 8000d5e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d66:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d6a:	bf18      	it	ne
 8000d6c:	4240      	negne	r0, r0
 8000d6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d72:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d76:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d7a:	bf18      	it	ne
 8000d7c:	4249      	negne	r1, r1
 8000d7e:	ea92 0f03 	teq	r2, r3
 8000d82:	d03f      	beq.n	8000e04 <__addsf3+0xd8>
 8000d84:	f1a2 0201 	sub.w	r2, r2, #1
 8000d88:	fa41 fc03 	asr.w	ip, r1, r3
 8000d8c:	eb10 000c 	adds.w	r0, r0, ip
 8000d90:	f1c3 0320 	rsb	r3, r3, #32
 8000d94:	fa01 f103 	lsl.w	r1, r1, r3
 8000d98:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__addsf3+0x78>
 8000d9e:	4249      	negs	r1, r1
 8000da0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000da4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000da8:	d313      	bcc.n	8000dd2 <__addsf3+0xa6>
 8000daa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000dae:	d306      	bcc.n	8000dbe <__addsf3+0x92>
 8000db0:	0840      	lsrs	r0, r0, #1
 8000db2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000db6:	f102 0201 	add.w	r2, r2, #1
 8000dba:	2afe      	cmp	r2, #254	@ 0xfe
 8000dbc:	d251      	bcs.n	8000e62 <__addsf3+0x136>
 8000dbe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000dc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc6:	bf08      	it	eq
 8000dc8:	f020 0001 	biceq.w	r0, r0, #1
 8000dcc:	ea40 0003 	orr.w	r0, r0, r3
 8000dd0:	4770      	bx	lr
 8000dd2:	0049      	lsls	r1, r1, #1
 8000dd4:	eb40 0000 	adc.w	r0, r0, r0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	bf28      	it	cs
 8000ddc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000de0:	d2ed      	bcs.n	8000dbe <__addsf3+0x92>
 8000de2:	fab0 fc80 	clz	ip, r0
 8000de6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dea:	ebb2 020c 	subs.w	r2, r2, ip
 8000dee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000df2:	bfaa      	itet	ge
 8000df4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000df8:	4252      	neglt	r2, r2
 8000dfa:	4318      	orrge	r0, r3
 8000dfc:	bfbc      	itt	lt
 8000dfe:	40d0      	lsrlt	r0, r2
 8000e00:	4318      	orrlt	r0, r3
 8000e02:	4770      	bx	lr
 8000e04:	f092 0f00 	teq	r2, #0
 8000e08:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e0c:	bf06      	itte	eq
 8000e0e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e12:	3201      	addeq	r2, #1
 8000e14:	3b01      	subne	r3, #1
 8000e16:	e7b5      	b.n	8000d84 <__addsf3+0x58>
 8000e18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e20:	bf18      	it	ne
 8000e22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e26:	d021      	beq.n	8000e6c <__addsf3+0x140>
 8000e28:	ea92 0f03 	teq	r2, r3
 8000e2c:	d004      	beq.n	8000e38 <__addsf3+0x10c>
 8000e2e:	f092 0f00 	teq	r2, #0
 8000e32:	bf08      	it	eq
 8000e34:	4608      	moveq	r0, r1
 8000e36:	4770      	bx	lr
 8000e38:	ea90 0f01 	teq	r0, r1
 8000e3c:	bf1c      	itt	ne
 8000e3e:	2000      	movne	r0, #0
 8000e40:	4770      	bxne	lr
 8000e42:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e46:	d104      	bne.n	8000e52 <__addsf3+0x126>
 8000e48:	0040      	lsls	r0, r0, #1
 8000e4a:	bf28      	it	cs
 8000e4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e56:	bf3c      	itt	cc
 8000e58:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	4770      	bxcc	lr
 8000e5e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e62:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e6a:	4770      	bx	lr
 8000e6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e70:	bf16      	itet	ne
 8000e72:	4608      	movne	r0, r1
 8000e74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e78:	4601      	movne	r1, r0
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	bf06      	itte	eq
 8000e7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e82:	ea90 0f01 	teqeq	r0, r1
 8000e86:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_ui2f>:
 8000e8c:	f04f 0300 	mov.w	r3, #0
 8000e90:	e004      	b.n	8000e9c <__aeabi_i2f+0x8>
 8000e92:	bf00      	nop

08000e94 <__aeabi_i2f>:
 8000e94:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e98:	bf48      	it	mi
 8000e9a:	4240      	negmi	r0, r0
 8000e9c:	ea5f 0c00 	movs.w	ip, r0
 8000ea0:	bf08      	it	eq
 8000ea2:	4770      	bxeq	lr
 8000ea4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	f04f 0000 	mov.w	r0, #0
 8000eae:	e01c      	b.n	8000eea <__aeabi_l2f+0x2a>

08000eb0 <__aeabi_ul2f>:
 8000eb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000eb4:	bf08      	it	eq
 8000eb6:	4770      	bxeq	lr
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e00a      	b.n	8000ed4 <__aeabi_l2f+0x14>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_l2f>:
 8000ec0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ec4:	bf08      	it	eq
 8000ec6:	4770      	bxeq	lr
 8000ec8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ecc:	d502      	bpl.n	8000ed4 <__aeabi_l2f+0x14>
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	ea5f 0c01 	movs.w	ip, r1
 8000ed8:	bf02      	ittt	eq
 8000eda:	4684      	moveq	ip, r0
 8000edc:	4601      	moveq	r1, r0
 8000ede:	2000      	moveq	r0, #0
 8000ee0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ee4:	bf08      	it	eq
 8000ee6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eee:	fabc f28c 	clz	r2, ip
 8000ef2:	3a08      	subs	r2, #8
 8000ef4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ef8:	db10      	blt.n	8000f1c <__aeabi_l2f+0x5c>
 8000efa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000efe:	4463      	add	r3, ip
 8000f00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f04:	f1c2 0220 	rsb	r2, r2, #32
 8000f08:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f10:	eb43 0002 	adc.w	r0, r3, r2
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f102 0220 	add.w	r2, r2, #32
 8000f20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f24:	f1c2 0220 	rsb	r2, r2, #32
 8000f28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000f30:	eb43 0002 	adc.w	r0, r3, r2
 8000f34:	bf08      	it	eq
 8000f36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3a:	4770      	bx	lr

08000f3c <__aeabi_uldivmod>:
 8000f3c:	b953      	cbnz	r3, 8000f54 <__aeabi_uldivmod+0x18>
 8000f3e:	b94a      	cbnz	r2, 8000f54 <__aeabi_uldivmod+0x18>
 8000f40:	2900      	cmp	r1, #0
 8000f42:	bf08      	it	eq
 8000f44:	2800      	cmpeq	r0, #0
 8000f46:	bf1c      	itt	ne
 8000f48:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f4c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f50:	f000 b96a 	b.w	8001228 <__aeabi_idiv0>
 8000f54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f5c:	f000 f806 	bl	8000f6c <__udivmoddi4>
 8000f60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f68:	b004      	add	sp, #16
 8000f6a:	4770      	bx	lr

08000f6c <__udivmoddi4>:
 8000f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f70:	9d08      	ldr	r5, [sp, #32]
 8000f72:	460c      	mov	r4, r1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d14e      	bne.n	8001016 <__udivmoddi4+0xaa>
 8000f78:	4694      	mov	ip, r2
 8000f7a:	458c      	cmp	ip, r1
 8000f7c:	4686      	mov	lr, r0
 8000f7e:	fab2 f282 	clz	r2, r2
 8000f82:	d962      	bls.n	800104a <__udivmoddi4+0xde>
 8000f84:	b14a      	cbz	r2, 8000f9a <__udivmoddi4+0x2e>
 8000f86:	f1c2 0320 	rsb	r3, r2, #32
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	4319      	orrs	r1, r3
 8000f96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9e:	fa1f f68c 	uxth.w	r6, ip
 8000fa2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fa6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000faa:	fb07 1114 	mls	r1, r7, r4, r1
 8000fae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb2:	fb04 f106 	mul.w	r1, r4, r6
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	d90a      	bls.n	8000fd0 <__udivmoddi4+0x64>
 8000fba:	eb1c 0303 	adds.w	r3, ip, r3
 8000fbe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000fc2:	f080 8112 	bcs.w	80011ea <__udivmoddi4+0x27e>
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	f240 810f 	bls.w	80011ea <__udivmoddi4+0x27e>
 8000fcc:	3c02      	subs	r4, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a59      	subs	r1, r3, r1
 8000fd2:	fa1f f38e 	uxth.w	r3, lr
 8000fd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fda:	fb07 1110 	mls	r1, r7, r0, r1
 8000fde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fe2:	fb00 f606 	mul.w	r6, r0, r6
 8000fe6:	429e      	cmp	r6, r3
 8000fe8:	d90a      	bls.n	8001000 <__udivmoddi4+0x94>
 8000fea:	eb1c 0303 	adds.w	r3, ip, r3
 8000fee:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ff2:	f080 80fc 	bcs.w	80011ee <__udivmoddi4+0x282>
 8000ff6:	429e      	cmp	r6, r3
 8000ff8:	f240 80f9 	bls.w	80011ee <__udivmoddi4+0x282>
 8000ffc:	4463      	add	r3, ip
 8000ffe:	3802      	subs	r0, #2
 8001000:	1b9b      	subs	r3, r3, r6
 8001002:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001006:	2100      	movs	r1, #0
 8001008:	b11d      	cbz	r5, 8001012 <__udivmoddi4+0xa6>
 800100a:	40d3      	lsrs	r3, r2
 800100c:	2200      	movs	r2, #0
 800100e:	e9c5 3200 	strd	r3, r2, [r5]
 8001012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001016:	428b      	cmp	r3, r1
 8001018:	d905      	bls.n	8001026 <__udivmoddi4+0xba>
 800101a:	b10d      	cbz	r5, 8001020 <__udivmoddi4+0xb4>
 800101c:	e9c5 0100 	strd	r0, r1, [r5]
 8001020:	2100      	movs	r1, #0
 8001022:	4608      	mov	r0, r1
 8001024:	e7f5      	b.n	8001012 <__udivmoddi4+0xa6>
 8001026:	fab3 f183 	clz	r1, r3
 800102a:	2900      	cmp	r1, #0
 800102c:	d146      	bne.n	80010bc <__udivmoddi4+0x150>
 800102e:	42a3      	cmp	r3, r4
 8001030:	d302      	bcc.n	8001038 <__udivmoddi4+0xcc>
 8001032:	4290      	cmp	r0, r2
 8001034:	f0c0 80f0 	bcc.w	8001218 <__udivmoddi4+0x2ac>
 8001038:	1a86      	subs	r6, r0, r2
 800103a:	eb64 0303 	sbc.w	r3, r4, r3
 800103e:	2001      	movs	r0, #1
 8001040:	2d00      	cmp	r5, #0
 8001042:	d0e6      	beq.n	8001012 <__udivmoddi4+0xa6>
 8001044:	e9c5 6300 	strd	r6, r3, [r5]
 8001048:	e7e3      	b.n	8001012 <__udivmoddi4+0xa6>
 800104a:	2a00      	cmp	r2, #0
 800104c:	f040 8090 	bne.w	8001170 <__udivmoddi4+0x204>
 8001050:	eba1 040c 	sub.w	r4, r1, ip
 8001054:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001058:	fa1f f78c 	uxth.w	r7, ip
 800105c:	2101      	movs	r1, #1
 800105e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001062:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001066:	fb08 4416 	mls	r4, r8, r6, r4
 800106a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800106e:	fb07 f006 	mul.w	r0, r7, r6
 8001072:	4298      	cmp	r0, r3
 8001074:	d908      	bls.n	8001088 <__udivmoddi4+0x11c>
 8001076:	eb1c 0303 	adds.w	r3, ip, r3
 800107a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x11a>
 8001080:	4298      	cmp	r0, r3
 8001082:	f200 80cd 	bhi.w	8001220 <__udivmoddi4+0x2b4>
 8001086:	4626      	mov	r6, r4
 8001088:	1a1c      	subs	r4, r3, r0
 800108a:	fa1f f38e 	uxth.w	r3, lr
 800108e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001092:	fb08 4410 	mls	r4, r8, r0, r4
 8001096:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800109a:	fb00 f707 	mul.w	r7, r0, r7
 800109e:	429f      	cmp	r7, r3
 80010a0:	d908      	bls.n	80010b4 <__udivmoddi4+0x148>
 80010a2:	eb1c 0303 	adds.w	r3, ip, r3
 80010a6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80010aa:	d202      	bcs.n	80010b2 <__udivmoddi4+0x146>
 80010ac:	429f      	cmp	r7, r3
 80010ae:	f200 80b0 	bhi.w	8001212 <__udivmoddi4+0x2a6>
 80010b2:	4620      	mov	r0, r4
 80010b4:	1bdb      	subs	r3, r3, r7
 80010b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010ba:	e7a5      	b.n	8001008 <__udivmoddi4+0x9c>
 80010bc:	f1c1 0620 	rsb	r6, r1, #32
 80010c0:	408b      	lsls	r3, r1
 80010c2:	fa22 f706 	lsr.w	r7, r2, r6
 80010c6:	431f      	orrs	r7, r3
 80010c8:	fa20 fc06 	lsr.w	ip, r0, r6
 80010cc:	fa04 f301 	lsl.w	r3, r4, r1
 80010d0:	ea43 030c 	orr.w	r3, r3, ip
 80010d4:	40f4      	lsrs	r4, r6
 80010d6:	fa00 f801 	lsl.w	r8, r0, r1
 80010da:	0c38      	lsrs	r0, r7, #16
 80010dc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010e0:	fbb4 fef0 	udiv	lr, r4, r0
 80010e4:	fa1f fc87 	uxth.w	ip, r7
 80010e8:	fb00 441e 	mls	r4, r0, lr, r4
 80010ec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010f0:	fb0e f90c 	mul.w	r9, lr, ip
 80010f4:	45a1      	cmp	r9, r4
 80010f6:	fa02 f201 	lsl.w	r2, r2, r1
 80010fa:	d90a      	bls.n	8001112 <__udivmoddi4+0x1a6>
 80010fc:	193c      	adds	r4, r7, r4
 80010fe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001102:	f080 8084 	bcs.w	800120e <__udivmoddi4+0x2a2>
 8001106:	45a1      	cmp	r9, r4
 8001108:	f240 8081 	bls.w	800120e <__udivmoddi4+0x2a2>
 800110c:	f1ae 0e02 	sub.w	lr, lr, #2
 8001110:	443c      	add	r4, r7
 8001112:	eba4 0409 	sub.w	r4, r4, r9
 8001116:	fa1f f983 	uxth.w	r9, r3
 800111a:	fbb4 f3f0 	udiv	r3, r4, r0
 800111e:	fb00 4413 	mls	r4, r0, r3, r4
 8001122:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001126:	fb03 fc0c 	mul.w	ip, r3, ip
 800112a:	45a4      	cmp	ip, r4
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x1d2>
 800112e:	193c      	adds	r4, r7, r4
 8001130:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001134:	d267      	bcs.n	8001206 <__udivmoddi4+0x29a>
 8001136:	45a4      	cmp	ip, r4
 8001138:	d965      	bls.n	8001206 <__udivmoddi4+0x29a>
 800113a:	3b02      	subs	r3, #2
 800113c:	443c      	add	r4, r7
 800113e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001142:	fba0 9302 	umull	r9, r3, r0, r2
 8001146:	eba4 040c 	sub.w	r4, r4, ip
 800114a:	429c      	cmp	r4, r3
 800114c:	46ce      	mov	lr, r9
 800114e:	469c      	mov	ip, r3
 8001150:	d351      	bcc.n	80011f6 <__udivmoddi4+0x28a>
 8001152:	d04e      	beq.n	80011f2 <__udivmoddi4+0x286>
 8001154:	b155      	cbz	r5, 800116c <__udivmoddi4+0x200>
 8001156:	ebb8 030e 	subs.w	r3, r8, lr
 800115a:	eb64 040c 	sbc.w	r4, r4, ip
 800115e:	fa04 f606 	lsl.w	r6, r4, r6
 8001162:	40cb      	lsrs	r3, r1
 8001164:	431e      	orrs	r6, r3
 8001166:	40cc      	lsrs	r4, r1
 8001168:	e9c5 6400 	strd	r6, r4, [r5]
 800116c:	2100      	movs	r1, #0
 800116e:	e750      	b.n	8001012 <__udivmoddi4+0xa6>
 8001170:	f1c2 0320 	rsb	r3, r2, #32
 8001174:	fa20 f103 	lsr.w	r1, r0, r3
 8001178:	fa0c fc02 	lsl.w	ip, ip, r2
 800117c:	fa24 f303 	lsr.w	r3, r4, r3
 8001180:	4094      	lsls	r4, r2
 8001182:	430c      	orrs	r4, r1
 8001184:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001188:	fa00 fe02 	lsl.w	lr, r0, r2
 800118c:	fa1f f78c 	uxth.w	r7, ip
 8001190:	fbb3 f0f8 	udiv	r0, r3, r8
 8001194:	fb08 3110 	mls	r1, r8, r0, r3
 8001198:	0c23      	lsrs	r3, r4, #16
 800119a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800119e:	fb00 f107 	mul.w	r1, r0, r7
 80011a2:	4299      	cmp	r1, r3
 80011a4:	d908      	bls.n	80011b8 <__udivmoddi4+0x24c>
 80011a6:	eb1c 0303 	adds.w	r3, ip, r3
 80011aa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80011ae:	d22c      	bcs.n	800120a <__udivmoddi4+0x29e>
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d92a      	bls.n	800120a <__udivmoddi4+0x29e>
 80011b4:	3802      	subs	r0, #2
 80011b6:	4463      	add	r3, ip
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	b2a4      	uxth	r4, r4
 80011bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80011c0:	fb08 3311 	mls	r3, r8, r1, r3
 80011c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011c8:	fb01 f307 	mul.w	r3, r1, r7
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d908      	bls.n	80011e2 <__udivmoddi4+0x276>
 80011d0:	eb1c 0404 	adds.w	r4, ip, r4
 80011d4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80011d8:	d213      	bcs.n	8001202 <__udivmoddi4+0x296>
 80011da:	42a3      	cmp	r3, r4
 80011dc:	d911      	bls.n	8001202 <__udivmoddi4+0x296>
 80011de:	3902      	subs	r1, #2
 80011e0:	4464      	add	r4, ip
 80011e2:	1ae4      	subs	r4, r4, r3
 80011e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011e8:	e739      	b.n	800105e <__udivmoddi4+0xf2>
 80011ea:	4604      	mov	r4, r0
 80011ec:	e6f0      	b.n	8000fd0 <__udivmoddi4+0x64>
 80011ee:	4608      	mov	r0, r1
 80011f0:	e706      	b.n	8001000 <__udivmoddi4+0x94>
 80011f2:	45c8      	cmp	r8, r9
 80011f4:	d2ae      	bcs.n	8001154 <__udivmoddi4+0x1e8>
 80011f6:	ebb9 0e02 	subs.w	lr, r9, r2
 80011fa:	eb63 0c07 	sbc.w	ip, r3, r7
 80011fe:	3801      	subs	r0, #1
 8001200:	e7a8      	b.n	8001154 <__udivmoddi4+0x1e8>
 8001202:	4631      	mov	r1, r6
 8001204:	e7ed      	b.n	80011e2 <__udivmoddi4+0x276>
 8001206:	4603      	mov	r3, r0
 8001208:	e799      	b.n	800113e <__udivmoddi4+0x1d2>
 800120a:	4630      	mov	r0, r6
 800120c:	e7d4      	b.n	80011b8 <__udivmoddi4+0x24c>
 800120e:	46d6      	mov	lr, sl
 8001210:	e77f      	b.n	8001112 <__udivmoddi4+0x1a6>
 8001212:	4463      	add	r3, ip
 8001214:	3802      	subs	r0, #2
 8001216:	e74d      	b.n	80010b4 <__udivmoddi4+0x148>
 8001218:	4606      	mov	r6, r0
 800121a:	4623      	mov	r3, r4
 800121c:	4608      	mov	r0, r1
 800121e:	e70f      	b.n	8001040 <__udivmoddi4+0xd4>
 8001220:	3e02      	subs	r6, #2
 8001222:	4463      	add	r3, ip
 8001224:	e730      	b.n	8001088 <__udivmoddi4+0x11c>
 8001226:	bf00      	nop

08001228 <__aeabi_idiv0>:
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f000 fb82 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 f844 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f000 f926 	bl	8001488 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123c:	f000 f8fa 	bl	8001434 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001240:	f000 f8a6 	bl	8001390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8001244:	4817      	ldr	r0, [pc, #92]	@ (80012a4 <main+0x78>)
 8001246:	f000 fc29 	bl	8001a9c <HAL_ADC_Start>
  printf("!!!ADC Started!!!\n");
 800124a:	4817      	ldr	r0, [pc, #92]	@ (80012a8 <main+0x7c>)
 800124c:	f003 f84c 	bl	80042e8 <puts>
  printf("Current voltage on ADC:\n");
 8001250:	4816      	ldr	r0, [pc, #88]	@ (80012ac <main+0x80>)
 8001252:	f003 f849 	bl	80042e8 <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      /* USER CODE END WHILE */

  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001256:	2164      	movs	r1, #100	@ 0x64
 8001258:	4812      	ldr	r0, [pc, #72]	@ (80012a4 <main+0x78>)
 800125a:	f000 fcd1 	bl	8001c00 <HAL_ADC_PollForConversion>
  	  number_of_steps = HAL_ADC_GetValue(&hadc1);
 800125e:	4811      	ldr	r0, [pc, #68]	@ (80012a4 <main+0x78>)
 8001260:	f000 fd59 	bl	8001d16 <HAL_ADC_GetValue>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <main+0x84>)
 800126a:	801a      	strh	r2, [r3, #0]
  	  input_voltage = number_of_steps * kStepSize;
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <main+0x84>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe0f 	bl	8000e94 <__aeabi_i2f>
 8001276:	4603      	mov	r3, r0
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <main+0x88>)
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f807 	bl	8000290 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <main+0x8c>)
 8001288:	601a      	str	r2, [r3, #0]

  	  printf("\r\033[%f", input_voltage);
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <main+0x8c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fa16 	bl	80006c0 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4808      	ldr	r0, [pc, #32]	@ (80012bc <main+0x90>)
 800129a:	f002 ffbd 	bl	8004218 <iprintf>
  	  HAL_ADC_PollForConversion(&hadc1, 100);
 800129e:	bf00      	nop
 80012a0:	e7d9      	b.n	8001256 <main+0x2a>
 80012a2:	bf00      	nop
 80012a4:	200001f0 	.word	0x200001f0
 80012a8:	080061d8 	.word	0x080061d8
 80012ac:	080061ec 	.word	0x080061ec
 80012b0:	20000280 	.word	0x20000280
 80012b4:	3a533333 	.word	0x3a533333
 80012b8:	20000284 	.word	0x20000284
 80012bc:	08006204 	.word	0x08006204

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	@ 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	@ 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f8ea 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <SystemClock_Config+0xc8>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <SystemClock_Config+0xc8>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f4:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <SystemClock_Config+0xc8>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b21      	ldr	r3, [pc, #132]	@ (800138c <SystemClock_Config+0xcc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a20      	ldr	r2, [pc, #128]	@ (800138c <SystemClock_Config+0xcc>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <SystemClock_Config+0xcc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001320:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001334:	2364      	movs	r3, #100	@ 0x64
 8001336:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f99f 	bl	8002688 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001350:	f000 f91a 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2103      	movs	r1, #3
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fc01 	bl	8002b78 <HAL_RCC_ClockConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800137c:	f000 f904 	bl	8001588 <Error_Handler>
  }
}
 8001380:	bf00      	nop
 8001382:	3750      	adds	r7, #80	@ 0x50
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	@ (800142c <MX_ADC1_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013be:	2201      	movs	r2, #1
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <MX_ADC1_Init+0xa0>)
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013de:	2201      	movs	r2, #1
 80013e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_ADC1_Init+0x98>)
 80013f2:	f000 fb0f 	bl	8001a14 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f8c4 	bl	8001588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001400:	2311      	movs	r3, #17
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001408:	2307      	movs	r3, #7
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_ADC1_Init+0x98>)
 8001412:	f000 fc8d 	bl	8001d30 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800141c:	f000 f8b4 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f0 	.word	0x200001f0
 800142c:	40012000 	.word	0x40012000
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <MX_USART2_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_USART2_UART_Init+0x4c>)
 800146c:	f001 fda8 	bl	8002fc0 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 f887 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000238 	.word	0x20000238
 8001484:	40004400 	.word	0x40004400

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a1e      	ldr	r2, [pc, #120]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <MX_GPIO_Init+0xd0>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	@ 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <MX_GPIO_Init+0xd0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2120      	movs	r1, #32
 8001512:	4812      	ldr	r0, [pc, #72]	@ (800155c <MX_GPIO_Init+0xd4>)
 8001514:	f001 f8a0 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800151e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	480c      	ldr	r0, [pc, #48]	@ (8001560 <MX_GPIO_Init+0xd8>)
 8001530:	f000 ff10 	bl	8002354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001534:	2320      	movs	r3, #32
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_GPIO_Init+0xd4>)
 800154c:	f000 ff02 	bl	8002354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020800 	.word	0x40020800

08001564 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800156c:	1d39      	adds	r1, r7, #4
 800156e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001572:	2201      	movs	r2, #1
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <__io_putchar+0x20>)
 8001576:	f001 fd73 	bl	8003060 <HAL_UART_Transmit>

  return ch;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000238 	.word	0x20000238

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <Error_Handler+0x8>

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x4c>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f000 fe8a 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_ADC_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d127      	bne.n	8001656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a15      	ldr	r2, [pc, #84]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_ADC_MspInit+0x80>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001642:	2303      	movs	r3, #3
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	@ (8001668 <HAL_ADC_MspInit+0x84>)
 8001652:	f000 fe7f 	bl	8002354 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40012000 	.word	0x40012000
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <HAL_UART_MspInit+0x84>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d12b      	bne.n	80016e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <HAL_UART_MspInit+0x8c>)
 80016e2:	f000 fe37 	bl	8002354 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <NMI_Handler+0x4>

08001704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <MemManage_Handler+0x4>

08001714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <UsageFault_Handler+0x4>

08001724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f946 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <_kill>:

int _kill(int pid, int sig)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176c:	f002 feee 	bl	800454c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	2216      	movs	r2, #22
 8001774:	601a      	str	r2, [r3, #0]
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_exit>:

void _exit (int status)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800178a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffe7 	bl	8001762 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <_exit+0x12>

08001798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
  }

  return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff feb9 	bl	8001564 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
  }
  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001830:	605a      	str	r2, [r3, #4]
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <_isatty>:

int _isatty(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f002 fe56 	bl	800454c <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000288 	.word	0x20000288
 80018d4:	200003e0 	.word	0x200003e0

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800191c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e8:	f7ff fff6 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f002 fe21 	bl	8004558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff fc89 	bl	800122c <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800191c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001928:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 800192c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001930:	200003dc 	.word	0x200003dc

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_Init+0x40>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_Init+0x40>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x40>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 fcc3 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fe12 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fccd 	bl	800233a <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b8:	f000 fca3 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000008 	.word	0x20000008
 80019fc:	2000028c 	.word	0x2000028c

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	2000028c 	.word	0x2000028c

08001a14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e033      	b.n	8001a92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fdd6 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a5a:	f023 0302 	bic.w	r3, r3, #2
 8001a5e:	f043 0202 	orr.w	r2, r3, #2
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fa94 	bl	8001f94 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a82:	e001      	b.n	8001a88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Start+0x1a>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e097      	b.n	8001be6 <HAL_ADC_Start+0x14a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d018      	beq.n	8001afe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001adc:	4b44      	ldr	r3, [pc, #272]	@ (8001bf0 <HAL_ADC_Start+0x154>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a44      	ldr	r2, [pc, #272]	@ (8001bf4 <HAL_ADC_Start+0x158>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9a      	lsrs	r2, r3, #18
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d15f      	bne.n	8001bcc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b4a:	d106      	bne.n	8001b5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b50:	f023 0206 	bic.w	r2, r3, #6
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <HAL_ADC_Start+0x15c>)
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10f      	bne.n	8001ba2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d129      	bne.n	8001be4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	e020      	b.n	8001be4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a15      	ldr	r2, [pc, #84]	@ (8001bfc <HAL_ADC_Start+0x160>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d11b      	bne.n	8001be4 <HAL_ADC_Start+0x148>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d114      	bne.n	8001be4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	e00b      	b.n	8001be4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	431bde83 	.word	0x431bde83
 8001bf8:	40012300 	.word	0x40012300
 8001bfc:	40012000 	.word	0x40012000

08001c00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1c:	d113      	bne.n	8001c46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d10b      	bne.n	8001c46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e063      	b.n	8001d0e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c46:	f7ff fedb 	bl	8001a00 <HAL_GetTick>
 8001c4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c4c:	e021      	b.n	8001c92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c54:	d01d      	beq.n	8001c92 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x6c>
 8001c5c:	f7ff fed0 	bl	8001a00 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d212      	bcs.n	8001c92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d00b      	beq.n	8001c92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f043 0204 	orr.w	r2, r3, #4
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e03d      	b.n	8001d0e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d1d6      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0212 	mvn.w	r2, #18
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d123      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11f      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d111      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
	...

08001d30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1c>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e113      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x244>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b09      	cmp	r3, #9
 8001d5a:	d925      	bls.n	8001da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68d9      	ldr	r1, [r3, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	400a      	ands	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4403      	add	r3, r0
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e022      	b.n	8001dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6919      	ldr	r1, [r3, #16]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4403      	add	r3, r0
 8001de4:	409a      	lsls	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d824      	bhi.n	8001e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	221f      	movs	r2, #31
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b05      	subs	r3, #5
 8001e32:	fa00 f203 	lsl.w	r2, r0, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e3e:	e04c      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b23      	subs	r3, #35	@ 0x23
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	3b23      	subs	r3, #35	@ 0x23
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e90:	e023      	b.n	8001eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	@ 0x41
 8001ea4:	221f      	movs	r2, #31
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b41      	subs	r3, #65	@ 0x41
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eda:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_ADC_ConfigChannel+0x250>)
 8001edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a28      	ldr	r2, [pc, #160]	@ (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10f      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b12      	cmp	r3, #18
 8001eee:	d10b      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f84 <HAL_ADC_ConfigChannel+0x254>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12b      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d003      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x1f4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d122      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_ADC_ConfigChannel+0x258>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d111      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_ADC_ConfigChannel+0x25c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <HAL_ADC_ConfigChannel+0x260>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	0c9a      	lsrs	r2, r3, #18
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40012300 	.word	0x40012300
 8001f84:	40012000 	.word	0x40012000
 8001f88:	10000012 	.word	0x10000012
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9c:	4b79      	ldr	r3, [pc, #484]	@ (8002184 <ADC_Init+0x1f0>)
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	4a58      	ldr	r2, [pc, #352]	@ (8002188 <ADC_Init+0x1f4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d022      	beq.n	8002072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800203a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6899      	ldr	r1, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e00f      	b.n	8002092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0202 	bic.w	r2, r2, #2
 80020a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6899      	ldr	r1, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
 80020ac:	005a      	lsls	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	3b01      	subs	r3, #1
 80020ec:	035a      	lsls	r2, r3, #13
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e007      	b.n	8002108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002106:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	3b01      	subs	r3, #1
 8002124:	051a      	lsls	r2, r3, #20
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800213c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800214a:	025a      	lsls	r2, r3, #9
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	029a      	lsls	r2, r3, #10
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40012300 	.word	0x40012300
 8002188:	0f000001 	.word	0x0f000001

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022cc:	f7ff ff90 	bl	80021f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff49 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff5e 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff90 	bl	8002244 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5f 	bl	80021f0 <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffb0 	bl	80022a8 <SysTick_Config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e159      	b.n	8002624 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8148 	bne.w	800261e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a2 	beq.w	800261e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b56      	ldr	r3, [pc, #344]	@ (8002638 <HAL_GPIO_Init+0x2e4>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	4a55      	ldr	r2, [pc, #340]	@ (8002638 <HAL_GPIO_Init+0x2e4>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ea:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_GPIO_Init+0x2e4>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f6:	4a51      	ldr	r2, [pc, #324]	@ (800263c <HAL_GPIO_Init+0x2e8>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	220f      	movs	r2, #15
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a48      	ldr	r2, [pc, #288]	@ (8002640 <HAL_GPIO_Init+0x2ec>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x202>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <HAL_GPIO_Init+0x2f0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x1fe>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	@ (8002648 <HAL_GPIO_Init+0x2f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x1fa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a45      	ldr	r2, [pc, #276]	@ (800264c <HAL_GPIO_Init+0x2f8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x1f6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a44      	ldr	r2, [pc, #272]	@ (8002650 <HAL_GPIO_Init+0x2fc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x1f2>
 8002542:	2304      	movs	r3, #4
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x204>
 8002546:	2307      	movs	r3, #7
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x204>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x204>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x204>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x204>
 8002556:	2300      	movs	r3, #0
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002568:	4934      	ldr	r1, [pc, #208]	@ (800263c <HAL_GPIO_Init+0x2e8>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_GPIO_Init+0x300>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259a:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_GPIO_Init+0x300>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c4:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ee:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_GPIO_Init+0x300>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002618:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <HAL_GPIO_Init+0x300>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	f67f aea2 	bls.w	8002370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3724      	adds	r7, #36	@ 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e267      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d075      	beq.n	8002792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a6:	4b88      	ldr	r3, [pc, #544]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d00c      	beq.n	80026cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b85      	ldr	r3, [pc, #532]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d112      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026be:	4b82      	ldr	r3, [pc, #520]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ca:	d10b      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	4b7e      	ldr	r3, [pc, #504]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x108>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d157      	bne.n	8002790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e242      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x74>
 80026ee:	4b76      	ldr	r3, [pc, #472]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a75      	ldr	r2, [pc, #468]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x98>
 8002706:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6f      	ldr	r2, [pc, #444]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b6d      	ldr	r3, [pc, #436]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6c      	ldr	r2, [pc, #432]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xb0>
 8002720:	4b69      	ldr	r3, [pc, #420]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a68      	ldr	r2, [pc, #416]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b66      	ldr	r3, [pc, #408]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a65      	ldr	r2, [pc, #404]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7ff f95e 	bl	8001a00 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff f95a 	bl	8001a00 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e207      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b5b      	ldr	r3, [pc, #364]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xc0>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff f94a 	bl	8001a00 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff f946 	bl	8001a00 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1f3      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0xe8>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279e:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b47      	ldr	r3, [pc, #284]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b6:	4b44      	ldr	r3, [pc, #272]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	4b41      	ldr	r3, [pc, #260]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1c7      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027da:	4b3b      	ldr	r3, [pc, #236]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4937      	ldr	r1, [pc, #220]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	e03a      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCC_OscConfig+0x244>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7ff f8ff 	bl	8001a00 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002806:	f7ff f8fb 	bl	8001a00 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e1a8      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4925      	ldr	r1, [pc, #148]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e015      	b.n	8002866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_RCC_OscConfig+0x244>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff f8de 	bl	8001a00 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002848:	f7ff f8da 	bl	8001a00 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e187      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_RCC_OscConfig+0x248>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7ff f8be 	bl	8001a00 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002888:	f7ff f8ba 	bl	8001a00 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e167      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_OscConfig+0x240>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x200>
 80028a6:	e01b      	b.n	80028e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_RCC_OscConfig+0x248>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7ff f8a7 	bl	8001a00 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	e00e      	b.n	80028d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b6:	f7ff f8a3 	bl	8001a00 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d907      	bls.n	80028d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e150      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470000 	.word	0x42470000
 80028d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d4:	4b88      	ldr	r3, [pc, #544]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ea      	bne.n	80028b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8097 	beq.w	8002a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f2:	4b81      	ldr	r3, [pc, #516]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10f      	bne.n	800291e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b7d      	ldr	r3, [pc, #500]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a7c      	ldr	r2, [pc, #496]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b7a      	ldr	r3, [pc, #488]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b77      	ldr	r3, [pc, #476]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b74      	ldr	r3, [pc, #464]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a73      	ldr	r2, [pc, #460]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7ff f863 	bl	8001a00 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7ff f85f 	bl	8001a00 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e10c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b6a      	ldr	r3, [pc, #424]	@ (8002afc <HAL_RCC_OscConfig+0x474>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x2ea>
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a63      	ldr	r2, [pc, #396]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	e01c      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x30c>
 800297a:	4b5f      	ldr	r3, [pc, #380]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a5e      	ldr	r2, [pc, #376]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298a:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	@ 0x70
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x324>
 8002994:	4b58      	ldr	r3, [pc, #352]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	4a57      	ldr	r2, [pc, #348]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a0:	4b55      	ldr	r3, [pc, #340]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4a54      	ldr	r2, [pc, #336]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7ff f824 	bl	8001a00 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7ff f820 	bl	8001a00 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0cb      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ee      	beq.n	80029bc <HAL_RCC_OscConfig+0x334>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e0:	f7ff f80e 	bl	8001a00 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7ff f80a 	bl	8001a00 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0b5      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fe:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1ee      	bne.n	80029e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	4a38      	ldr	r2, [pc, #224]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a1 	beq.w	8002b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a26:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d05c      	beq.n	8002aec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d141      	bne.n	8002abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe ffde 	bl	8001a00 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe ffda 	bl	8001a00 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e087      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	019b      	lsls	r3, r3, #6
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	491b      	ldr	r1, [pc, #108]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe ffb3 	bl	8001a00 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe ffaf 	bl	8001a00 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e05c      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x416>
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b10      	ldr	r3, [pc, #64]	@ (8002b00 <HAL_RCC_OscConfig+0x478>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe ff9c 	bl	8001a00 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe ff98 	bl	8001a00 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e045      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x444>
 8002aea:	e03d      	b.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e038      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x4ec>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d028      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d121      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b34:	4013      	ands	r3, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0cc      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b68      	ldr	r3, [pc, #416]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d90c      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b65      	ldr	r3, [pc, #404]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b63      	ldr	r3, [pc, #396]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0b8      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b59      	ldr	r3, [pc, #356]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a58      	ldr	r2, [pc, #352]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be4:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a52      	ldr	r2, [pc, #328]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	494d      	ldr	r1, [pc, #308]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d044      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	4b47      	ldr	r3, [pc, #284]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d119      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e07f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b3f      	ldr	r3, [pc, #252]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e06f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	4b3b      	ldr	r3, [pc, #236]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e067      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4934      	ldr	r1, [pc, #208]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fe feca 	bl	8001a00 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe fec6 	bl	8001a00 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e04f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c98:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d20c      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e032      	b.n	8002d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4916      	ldr	r1, [pc, #88]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cfe:	f000 f821 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002d02:	4602      	mov	r2, r0
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	490a      	ldr	r1, [pc, #40]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	5ccb      	ldrb	r3, [r1, r3]
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fe2c 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023c00 	.word	0x40023c00
 8002d34:	40023800 	.word	0x40023800
 8002d38:	0800620c 	.word	0x0800620c
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b094      	sub	sp, #80	@ 0x50
 8002d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d50:	2300      	movs	r3, #0
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d00d      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x40>
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	f200 80e7 	bhi.w	8002f3c <HAL_RCC_GetSysClockFreq+0x1f8>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x34>
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d76:	e0e1      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b76      	ldr	r3, [pc, #472]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x210>)
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002d7c:	e0e1      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7e:	4b76      	ldr	r3, [pc, #472]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x214>)
 8002d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d82:	e0de      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d84:	4b72      	ldr	r3, [pc, #456]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8e:	4b70      	ldr	r3, [pc, #448]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d065      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	2200      	movs	r2, #0
 8002da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	f04f 0000 	mov.w	r0, #0
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	0159      	lsls	r1, r3, #5
 8002dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc8:	0150      	lsls	r0, r2, #5
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4621      	mov	r1, r4
 8002dd0:	1a51      	subs	r1, r2, r1
 8002dd2:	6139      	str	r1, [r7, #16]
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de8:	4659      	mov	r1, fp
 8002dea:	018b      	lsls	r3, r1, #6
 8002dec:	4651      	mov	r1, sl
 8002dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df2:	4651      	mov	r1, sl
 8002df4:	018a      	lsls	r2, r1, #6
 8002df6:	46d4      	mov	ip, sl
 8002df8:	ebb2 080c 	subs.w	r8, r2, ip
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e16:	4690      	mov	r8, r2
 8002e18:	4699      	mov	r9, r3
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	eb18 0303 	adds.w	r3, r8, r3
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	462b      	mov	r3, r5
 8002e24:	eb49 0303 	adc.w	r3, r9, r3
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e36:	4629      	mov	r1, r5
 8002e38:	024b      	lsls	r3, r1, #9
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	4604      	mov	r4, r0
 8002e40:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e44:	4601      	mov	r1, r0
 8002e46:	024a      	lsls	r2, r1, #9
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e58:	f7fe f870 	bl	8000f3c <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e64:	e05c      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4611      	mov	r1, r2
 8002e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	f04f 0000 	mov.w	r0, #0
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	0159      	lsls	r1, r3, #5
 8002e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e92:	0150      	lsls	r0, r2, #5
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	46c4      	mov	ip, r8
 8002e9a:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	468c      	mov	ip, r1
 8002ea4:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	00eb      	lsls	r3, r5, #3
 8002ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ed2:	00e2      	lsls	r2, r4, #3
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	18e3      	adds	r3, r4, r3
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	eb45 0303 	adc.w	r3, r5, r3
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	028b      	lsls	r3, r1, #10
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4604      	mov	r4, r0
 8002efc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002f00:	4601      	mov	r1, r0
 8002f02:	028a      	lsls	r2, r1, #10
 8002f04:	4610      	mov	r0, r2
 8002f06:	4619      	mov	r1, r3
 8002f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	61fa      	str	r2, [r7, #28]
 8002f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f14:	f7fe f812 	bl	8000f3c <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x210>)
 8002f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3750      	adds	r7, #80	@ 0x50
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	00f42400 	.word	0x00f42400
 8002f58:	007a1200 	.word	0x007a1200

08002f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f60:	4b02      	ldr	r3, [pc, #8]	@ (8002f6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	20000000 	.word	0x20000000

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f74:	f7ff fff2 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40023800 	.word	0x40023800
 8002f94:	0800621c 	.word	0x0800621c

08002f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0b5b      	lsrs	r3, r3, #13
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4903      	ldr	r1, [pc, #12]	@ (8002fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	0800621c 	.word	0x0800621c

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e042      	b.n	8003058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe fb40 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f971 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b20      	cmp	r3, #32
 800307e:	d175      	bne.n	800316c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_UART_Transmit+0x2c>
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e06e      	b.n	800316e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2221      	movs	r2, #33	@ 0x21
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309e:	f7fe fcaf 	bl	8001a00 <HAL_GetTick>
 80030a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	88fa      	ldrh	r2, [r7, #6]
 80030a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e02e      	b.n	8003134 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f848 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e03a      	b.n	800316e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e007      	b.n	8003126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cb      	bne.n	80030d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	@ 0x40
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f814 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	e03b      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318e:	d037      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003190:	f7fe fc36 	bl	8001a00 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	6a3a      	ldr	r2, [r7, #32]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e03a      	b.n	8003220 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d023      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d020      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b40      	cmp	r3, #64	@ 0x40
 80031c2:	d01d      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d116      	bne.n	8003200 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f81d 	bl	8003228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2208      	movs	r2, #8
 80031f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e00f      	b.n	8003220 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	429a      	cmp	r2, r3
 800321c:	d0b4      	beq.n	8003188 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b095      	sub	sp, #84	@ 0x54
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003250:	643a      	str	r2, [r7, #64]	@ 0x40
 8003252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	61fb      	str	r3, [r7, #28]
   return(result);
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800328a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	2b01      	cmp	r3, #1
 800329e:	d119      	bne.n	80032d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c0:	61ba      	str	r2, [r7, #24]
 80032c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	613b      	str	r3, [r7, #16]
   return(result);
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032e2:	bf00      	nop
 80032e4:	3754      	adds	r7, #84	@ 0x54
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0c0      	sub	sp, #256	@ 0x100
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	ea40 0301 	orr.w	r3, r0, r1
 8003314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003344:	f021 010c 	bic.w	r1, r1, #12
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003352:	430b      	orrs	r3, r1
 8003354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003366:	6999      	ldr	r1, [r3, #24]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	ea40 0301 	orr.w	r3, r0, r1
 8003372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b91      	ldr	r3, [pc, #580]	@ (80035c0 <UART_SetConfig+0x2d4>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0xa0>
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b8f      	ldr	r3, [pc, #572]	@ (80035c4 <UART_SetConfig+0x2d8>)
 8003388:	429a      	cmp	r2, r3
 800338a:	d104      	bne.n	8003396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7ff fe04 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
 8003390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003394:	e003      	b.n	800339e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003396:	f7ff fdeb 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 800339a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a8:	f040 8110 	bne.w	80035cc <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033c6:	415b      	adcs	r3, r3
 80033c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	4604      	mov	r4, r0
 80033d4:	eb12 0804 	adds.w	r8, r2, r4
 80033d8:	460c      	mov	r4, r1
 80033da:	eb43 0904 	adc.w	r9, r3, r4
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033f2:	4690      	mov	r8, r2
 80033f4:	4699      	mov	r9, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	eb18 0303 	adds.w	r3, r8, r3
 80033fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003400:	460b      	mov	r3, r1
 8003402:	eb49 0303 	adc.w	r3, r9, r3
 8003406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003416:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800341a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800341e:	460b      	mov	r3, r1
 8003420:	18db      	adds	r3, r3, r3
 8003422:	653b      	str	r3, [r7, #80]	@ 0x50
 8003424:	4613      	mov	r3, r2
 8003426:	eb42 0303 	adc.w	r3, r2, r3
 800342a:	657b      	str	r3, [r7, #84]	@ 0x54
 800342c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003434:	f7fd fd82 	bl	8000f3c <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b62      	ldr	r3, [pc, #392]	@ (80035c8 <UART_SetConfig+0x2dc>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011c      	lsls	r4, r3, #4
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003450:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	1891      	adds	r1, r2, r2
 800345e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003460:	415b      	adcs	r3, r3
 8003462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003468:	4645      	mov	r5, r8
 800346a:	eb12 0a05 	adds.w	sl, r2, r5
 800346e:	4640      	mov	r0, r8
 8003470:	4649      	mov	r1, r9
 8003472:	460d      	mov	r5, r1
 8003474:	eb43 0b05 	adc.w	fp, r3, r5
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800348c:	4692      	mov	sl, r2
 800348e:	469b      	mov	fp, r3
 8003490:	4603      	mov	r3, r0
 8003492:	eb1a 0303 	adds.w	r3, sl, r3
 8003496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800349a:	460b      	mov	r3, r1
 800349c:	eb4b 0303 	adc.w	r3, fp, r3
 80034a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034b8:	460b      	mov	r3, r1
 80034ba:	18db      	adds	r3, r3, r3
 80034bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034be:	4613      	mov	r3, r2
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034ce:	f7fd fd35 	bl	8000f3c <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	4b3b      	ldr	r3, [pc, #236]	@ (80035c8 <UART_SetConfig+0x2dc>)
 80034da:	fba3 2301 	umull	r2, r3, r3, r1
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2264      	movs	r2, #100	@ 0x64
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	1acb      	subs	r3, r1, r3
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034ee:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <UART_SetConfig+0x2dc>)
 80034f0:	fba3 2302 	umull	r2, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034fc:	441c      	add	r4, r3
 80034fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003502:	2200      	movs	r2, #0
 8003504:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003508:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800350c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	1891      	adds	r1, r2, r2
 8003516:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003518:	415b      	adcs	r3, r3
 800351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800351c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003520:	4641      	mov	r1, r8
 8003522:	1851      	adds	r1, r2, r1
 8003524:	6339      	str	r1, [r7, #48]	@ 0x30
 8003526:	4649      	mov	r1, r9
 8003528:	414b      	adcs	r3, r1
 800352a:	637b      	str	r3, [r7, #52]	@ 0x34
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003538:	4659      	mov	r1, fp
 800353a:	00cb      	lsls	r3, r1, #3
 800353c:	4655      	mov	r5, sl
 800353e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003542:	4651      	mov	r1, sl
 8003544:	00ca      	lsls	r2, r1, #3
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	4603      	mov	r3, r0
 800354c:	4642      	mov	r2, r8
 800354e:	189b      	adds	r3, r3, r2
 8003550:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003554:	464b      	mov	r3, r9
 8003556:	460a      	mov	r2, r1
 8003558:	eb42 0303 	adc.w	r3, r2, r3
 800355c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800356c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003574:	460b      	mov	r3, r1
 8003576:	18db      	adds	r3, r3, r3
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357a:	4613      	mov	r3, r2
 800357c:	eb42 0303 	adc.w	r3, r2, r3
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800358a:	f7fd fcd7 	bl	8000f3c <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <UART_SetConfig+0x2dc>)
 8003594:	fba3 1302 	umull	r1, r3, r3, r2
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	2164      	movs	r1, #100	@ 0x64
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	3332      	adds	r3, #50	@ 0x32
 80035a6:	4a08      	ldr	r2, [pc, #32]	@ (80035c8 <UART_SetConfig+0x2dc>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	f003 0207 	and.w	r2, r3, #7
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4422      	add	r2, r4
 80035ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035bc:	e10a      	b.n	80037d4 <UART_SetConfig+0x4e8>
 80035be:	bf00      	nop
 80035c0:	40011000 	.word	0x40011000
 80035c4:	40011400 	.word	0x40011400
 80035c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035de:	4642      	mov	r2, r8
 80035e0:	464b      	mov	r3, r9
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	6239      	str	r1, [r7, #32]
 80035e6:	415b      	adcs	r3, r3
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ee:	4641      	mov	r1, r8
 80035f0:	1854      	adds	r4, r2, r1
 80035f2:	46cc      	mov	ip, r9
 80035f4:	eb43 050c 	adc.w	r5, r3, ip
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	00eb      	lsls	r3, r5, #3
 8003602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003606:	00e2      	lsls	r2, r4, #3
 8003608:	4614      	mov	r4, r2
 800360a:	461d      	mov	r5, r3
 800360c:	4640      	mov	r0, r8
 800360e:	4649      	mov	r1, r9
 8003610:	4603      	mov	r3, r0
 8003612:	18e3      	adds	r3, r4, r3
 8003614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003618:	460b      	mov	r3, r1
 800361a:	eb45 0303 	adc.w	r3, r5, r3
 800361e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800362e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800363e:	4629      	mov	r1, r5
 8003640:	008b      	lsls	r3, r1, #2
 8003642:	4620      	mov	r0, r4
 8003644:	4629      	mov	r1, r5
 8003646:	4604      	mov	r4, r0
 8003648:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800364c:	4601      	mov	r1, r0
 800364e:	008a      	lsls	r2, r1, #2
 8003650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003654:	f7fd fc72 	bl	8000f3c <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <UART_SetConfig+0x4f4>)
 800365e:	fba3 2302 	umull	r2, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	011c      	lsls	r4, r3, #4
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003678:	4642      	mov	r2, r8
 800367a:	464b      	mov	r3, r9
 800367c:	1891      	adds	r1, r2, r2
 800367e:	61b9      	str	r1, [r7, #24]
 8003680:	415b      	adcs	r3, r3
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003688:	4641      	mov	r1, r8
 800368a:	1851      	adds	r1, r2, r1
 800368c:	6139      	str	r1, [r7, #16]
 800368e:	4649      	mov	r1, r9
 8003690:	414b      	adcs	r3, r1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a0:	4659      	mov	r1, fp
 80036a2:	00cb      	lsls	r3, r1, #3
 80036a4:	4655      	mov	r5, sl
 80036a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80036aa:	4651      	mov	r1, sl
 80036ac:	00ca      	lsls	r2, r1, #3
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	4642      	mov	r2, r8
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036bc:	464b      	mov	r3, r9
 80036be:	460a      	mov	r2, r1
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036e0:	4649      	mov	r1, r9
 80036e2:	008b      	lsls	r3, r1, #2
 80036e4:	4645      	mov	r5, r8
 80036e6:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80036ea:	4641      	mov	r1, r8
 80036ec:	008a      	lsls	r2, r1, #2
 80036ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036f2:	f7fd fc23 	bl	8000f3c <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <UART_SetConfig+0x4f4>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2264      	movs	r2, #100	@ 0x64
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	3332      	adds	r3, #50	@ 0x32
 8003710:	4a33      	ldr	r2, [pc, #204]	@ (80037e0 <UART_SetConfig+0x4f4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800371c:	441c      	add	r4, r3
 800371e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003722:	2200      	movs	r2, #0
 8003724:	673b      	str	r3, [r7, #112]	@ 0x70
 8003726:	677a      	str	r2, [r7, #116]	@ 0x74
 8003728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	1891      	adds	r1, r2, r2
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	415b      	adcs	r3, r3
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800373c:	4641      	mov	r1, r8
 800373e:	1851      	adds	r1, r2, r1
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	4649      	mov	r1, r9
 8003744:	414b      	adcs	r3, r1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003754:	4659      	mov	r1, fp
 8003756:	00cb      	lsls	r3, r1, #3
 8003758:	4655      	mov	r5, sl
 800375a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800375e:	4651      	mov	r1, sl
 8003760:	00ca      	lsls	r2, r1, #3
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	4603      	mov	r3, r0
 8003768:	4642      	mov	r2, r8
 800376a:	189b      	adds	r3, r3, r2
 800376c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800376e:	464b      	mov	r3, r9
 8003770:	460a      	mov	r2, r1
 8003772:	eb42 0303 	adc.w	r3, r2, r3
 8003776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	663b      	str	r3, [r7, #96]	@ 0x60
 8003782:	667a      	str	r2, [r7, #100]	@ 0x64
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003790:	4649      	mov	r1, r9
 8003792:	008b      	lsls	r3, r1, #2
 8003794:	4645      	mov	r5, r8
 8003796:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800379a:	4641      	mov	r1, r8
 800379c:	008a      	lsls	r2, r1, #2
 800379e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037a2:	f7fd fbcb 	bl	8000f3c <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <UART_SetConfig+0x4f4>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	@ 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	3332      	adds	r3, #50	@ 0x32
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <UART_SetConfig+0x4f4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 020f 	and.w	r2, r3, #15
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4422      	add	r2, r4
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037da:	46bd      	mov	sp, r7
 80037dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e0:	51eb851f 	.word	0x51eb851f

080037e4 <__cvt>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	b088      	sub	sp, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	461d      	mov	r5, r3
 80037ee:	4614      	mov	r4, r2
 80037f0:	bfbc      	itt	lt
 80037f2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80037f6:	4614      	movlt	r4, r2
 80037f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80037fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80037fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003800:	bfb6      	itet	lt
 8003802:	461d      	movlt	r5, r3
 8003804:	2300      	movge	r3, #0
 8003806:	232d      	movlt	r3, #45	@ 0x2d
 8003808:	7013      	strb	r3, [r2, #0]
 800380a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800380c:	f023 0820 	bic.w	r8, r3, #32
 8003810:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003814:	d005      	beq.n	8003822 <__cvt+0x3e>
 8003816:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800381a:	d100      	bne.n	800381e <__cvt+0x3a>
 800381c:	3601      	adds	r6, #1
 800381e:	2302      	movs	r3, #2
 8003820:	e000      	b.n	8003824 <__cvt+0x40>
 8003822:	2303      	movs	r3, #3
 8003824:	aa07      	add	r2, sp, #28
 8003826:	9204      	str	r2, [sp, #16]
 8003828:	aa06      	add	r2, sp, #24
 800382a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800382e:	e9cd 3600 	strd	r3, r6, [sp]
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f000 ff3f 	bl	80046b8 <_dtoa_r>
 800383a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800383e:	4607      	mov	r7, r0
 8003840:	d119      	bne.n	8003876 <__cvt+0x92>
 8003842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003844:	07db      	lsls	r3, r3, #31
 8003846:	d50e      	bpl.n	8003866 <__cvt+0x82>
 8003848:	eb00 0906 	add.w	r9, r0, r6
 800384c:	2200      	movs	r2, #0
 800384e:	2300      	movs	r3, #0
 8003850:	4620      	mov	r0, r4
 8003852:	4629      	mov	r1, r5
 8003854:	f7fd f9f4 	bl	8000c40 <__aeabi_dcmpeq>
 8003858:	b108      	cbz	r0, 800385e <__cvt+0x7a>
 800385a:	f8cd 901c 	str.w	r9, [sp, #28]
 800385e:	2230      	movs	r2, #48	@ 0x30
 8003860:	9b07      	ldr	r3, [sp, #28]
 8003862:	454b      	cmp	r3, r9
 8003864:	d31e      	bcc.n	80038a4 <__cvt+0xc0>
 8003866:	9b07      	ldr	r3, [sp, #28]
 8003868:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800386a:	1bdb      	subs	r3, r3, r7
 800386c:	4638      	mov	r0, r7
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	b008      	add	sp, #32
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800387a:	eb00 0906 	add.w	r9, r0, r6
 800387e:	d1e5      	bne.n	800384c <__cvt+0x68>
 8003880:	7803      	ldrb	r3, [r0, #0]
 8003882:	2b30      	cmp	r3, #48	@ 0x30
 8003884:	d10a      	bne.n	800389c <__cvt+0xb8>
 8003886:	2200      	movs	r2, #0
 8003888:	2300      	movs	r3, #0
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fd f9d7 	bl	8000c40 <__aeabi_dcmpeq>
 8003892:	b918      	cbnz	r0, 800389c <__cvt+0xb8>
 8003894:	f1c6 0601 	rsb	r6, r6, #1
 8003898:	f8ca 6000 	str.w	r6, [sl]
 800389c:	f8da 3000 	ldr.w	r3, [sl]
 80038a0:	4499      	add	r9, r3
 80038a2:	e7d3      	b.n	800384c <__cvt+0x68>
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	9107      	str	r1, [sp, #28]
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e7d9      	b.n	8003860 <__cvt+0x7c>

080038ac <__exponent>:
 80038ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ae:	2900      	cmp	r1, #0
 80038b0:	bfba      	itte	lt
 80038b2:	4249      	neglt	r1, r1
 80038b4:	232d      	movlt	r3, #45	@ 0x2d
 80038b6:	232b      	movge	r3, #43	@ 0x2b
 80038b8:	2909      	cmp	r1, #9
 80038ba:	7002      	strb	r2, [r0, #0]
 80038bc:	7043      	strb	r3, [r0, #1]
 80038be:	dd29      	ble.n	8003914 <__exponent+0x68>
 80038c0:	f10d 0307 	add.w	r3, sp, #7
 80038c4:	461d      	mov	r5, r3
 80038c6:	270a      	movs	r7, #10
 80038c8:	461a      	mov	r2, r3
 80038ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80038ce:	fb07 1416 	mls	r4, r7, r6, r1
 80038d2:	3430      	adds	r4, #48	@ 0x30
 80038d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80038d8:	460c      	mov	r4, r1
 80038da:	2c63      	cmp	r4, #99	@ 0x63
 80038dc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80038e0:	4631      	mov	r1, r6
 80038e2:	dcf1      	bgt.n	80038c8 <__exponent+0x1c>
 80038e4:	3130      	adds	r1, #48	@ 0x30
 80038e6:	1e94      	subs	r4, r2, #2
 80038e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80038ec:	1c41      	adds	r1, r0, #1
 80038ee:	4623      	mov	r3, r4
 80038f0:	42ab      	cmp	r3, r5
 80038f2:	d30a      	bcc.n	800390a <__exponent+0x5e>
 80038f4:	f10d 0309 	add.w	r3, sp, #9
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	42ac      	cmp	r4, r5
 80038fc:	bf88      	it	hi
 80038fe:	2300      	movhi	r3, #0
 8003900:	3302      	adds	r3, #2
 8003902:	4403      	add	r3, r0
 8003904:	1a18      	subs	r0, r3, r0
 8003906:	b003      	add	sp, #12
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800390e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003912:	e7ed      	b.n	80038f0 <__exponent+0x44>
 8003914:	2330      	movs	r3, #48	@ 0x30
 8003916:	3130      	adds	r1, #48	@ 0x30
 8003918:	7083      	strb	r3, [r0, #2]
 800391a:	70c1      	strb	r1, [r0, #3]
 800391c:	1d03      	adds	r3, r0, #4
 800391e:	e7f1      	b.n	8003904 <__exponent+0x58>

08003920 <_printf_float>:
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	b091      	sub	sp, #68	@ 0x44
 8003926:	460c      	mov	r4, r1
 8003928:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800392c:	4616      	mov	r6, r2
 800392e:	461f      	mov	r7, r3
 8003930:	4605      	mov	r5, r0
 8003932:	f000 fdc1 	bl	80044b8 <_localeconv_r>
 8003936:	6803      	ldr	r3, [r0, #0]
 8003938:	9308      	str	r3, [sp, #32]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fc fca0 	bl	8000280 <strlen>
 8003940:	2300      	movs	r3, #0
 8003942:	930e      	str	r3, [sp, #56]	@ 0x38
 8003944:	f8d8 3000 	ldr.w	r3, [r8]
 8003948:	9009      	str	r0, [sp, #36]	@ 0x24
 800394a:	3307      	adds	r3, #7
 800394c:	f023 0307 	bic.w	r3, r3, #7
 8003950:	f103 0208 	add.w	r2, r3, #8
 8003954:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003958:	f8d4 b000 	ldr.w	fp, [r4]
 800395c:	f8c8 2000 	str.w	r2, [r8]
 8003960:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003964:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800396a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800396e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003972:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003976:	4b9d      	ldr	r3, [pc, #628]	@ (8003bec <_printf_float+0x2cc>)
 8003978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800397c:	f7fd f992 	bl	8000ca4 <__aeabi_dcmpun>
 8003980:	bb70      	cbnz	r0, 80039e0 <_printf_float+0xc0>
 8003982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003986:	4b99      	ldr	r3, [pc, #612]	@ (8003bec <_printf_float+0x2cc>)
 8003988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800398c:	f7fd f96c 	bl	8000c68 <__aeabi_dcmple>
 8003990:	bb30      	cbnz	r0, 80039e0 <_printf_float+0xc0>
 8003992:	2200      	movs	r2, #0
 8003994:	2300      	movs	r3, #0
 8003996:	4640      	mov	r0, r8
 8003998:	4649      	mov	r1, r9
 800399a:	f7fd f95b 	bl	8000c54 <__aeabi_dcmplt>
 800399e:	b110      	cbz	r0, 80039a6 <_printf_float+0x86>
 80039a0:	232d      	movs	r3, #45	@ 0x2d
 80039a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039a6:	4a92      	ldr	r2, [pc, #584]	@ (8003bf0 <_printf_float+0x2d0>)
 80039a8:	4b92      	ldr	r3, [pc, #584]	@ (8003bf4 <_printf_float+0x2d4>)
 80039aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80039ae:	bf94      	ite	ls
 80039b0:	4690      	movls	r8, r2
 80039b2:	4698      	movhi	r8, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	6123      	str	r3, [r4, #16]
 80039b8:	f02b 0304 	bic.w	r3, fp, #4
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	f04f 0900 	mov.w	r9, #0
 80039c2:	9700      	str	r7, [sp, #0]
 80039c4:	4633      	mov	r3, r6
 80039c6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 f9d4 	bl	8003d78 <_printf_common>
 80039d0:	3001      	adds	r0, #1
 80039d2:	f040 808f 	bne.w	8003af4 <_printf_float+0x1d4>
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039da:	b011      	add	sp, #68	@ 0x44
 80039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fd f95c 	bl	8000ca4 <__aeabi_dcmpun>
 80039ec:	b140      	cbz	r0, 8003a00 <_printf_float+0xe0>
 80039ee:	464b      	mov	r3, r9
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bfbc      	itt	lt
 80039f4:	232d      	movlt	r3, #45	@ 0x2d
 80039f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80039fa:	4a7f      	ldr	r2, [pc, #508]	@ (8003bf8 <_printf_float+0x2d8>)
 80039fc:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <_printf_float+0x2dc>)
 80039fe:	e7d4      	b.n	80039aa <_printf_float+0x8a>
 8003a00:	6863      	ldr	r3, [r4, #4]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003a08:	d13f      	bne.n	8003a8a <_printf_float+0x16a>
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003a12:	2200      	movs	r2, #0
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	9206      	str	r2, [sp, #24]
 8003a18:	aa0e      	add	r2, sp, #56	@ 0x38
 8003a1a:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003a1e:	aa0d      	add	r2, sp, #52	@ 0x34
 8003a20:	9203      	str	r2, [sp, #12]
 8003a22:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003a26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a2a:	6863      	ldr	r3, [r4, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4642      	mov	r2, r8
 8003a30:	464b      	mov	r3, r9
 8003a32:	4628      	mov	r0, r5
 8003a34:	910a      	str	r1, [sp, #40]	@ 0x28
 8003a36:	f7ff fed5 	bl	80037e4 <__cvt>
 8003a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a3c:	2947      	cmp	r1, #71	@ 0x47
 8003a3e:	4680      	mov	r8, r0
 8003a40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a42:	d128      	bne.n	8003a96 <_printf_float+0x176>
 8003a44:	1cc8      	adds	r0, r1, #3
 8003a46:	db02      	blt.n	8003a4e <_printf_float+0x12e>
 8003a48:	6863      	ldr	r3, [r4, #4]
 8003a4a:	4299      	cmp	r1, r3
 8003a4c:	dd40      	ble.n	8003ad0 <_printf_float+0x1b0>
 8003a4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a52:	fa5f fa8a 	uxtb.w	sl, sl
 8003a56:	3901      	subs	r1, #1
 8003a58:	4652      	mov	r2, sl
 8003a5a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a5e:	910d      	str	r1, [sp, #52]	@ 0x34
 8003a60:	f7ff ff24 	bl	80038ac <__exponent>
 8003a64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a66:	1813      	adds	r3, r2, r0
 8003a68:	2a01      	cmp	r2, #1
 8003a6a:	4681      	mov	r9, r0
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	dc02      	bgt.n	8003a76 <_printf_float+0x156>
 8003a70:	6822      	ldr	r2, [r4, #0]
 8003a72:	07d2      	lsls	r2, r2, #31
 8003a74:	d501      	bpl.n	8003a7a <_printf_float+0x15a>
 8003a76:	3301      	adds	r3, #1
 8003a78:	6123      	str	r3, [r4, #16]
 8003a7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d09f      	beq.n	80039c2 <_printf_float+0xa2>
 8003a82:	232d      	movs	r3, #45	@ 0x2d
 8003a84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a88:	e79b      	b.n	80039c2 <_printf_float+0xa2>
 8003a8a:	2947      	cmp	r1, #71	@ 0x47
 8003a8c:	d1bf      	bne.n	8003a0e <_printf_float+0xee>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1bd      	bne.n	8003a0e <_printf_float+0xee>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e7ba      	b.n	8003a0c <_printf_float+0xec>
 8003a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a9a:	d9dc      	bls.n	8003a56 <_printf_float+0x136>
 8003a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003aa0:	d118      	bne.n	8003ad4 <_printf_float+0x1b4>
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	6863      	ldr	r3, [r4, #4]
 8003aa6:	dd0b      	ble.n	8003ac0 <_printf_float+0x1a0>
 8003aa8:	6121      	str	r1, [r4, #16]
 8003aaa:	b913      	cbnz	r3, 8003ab2 <_printf_float+0x192>
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	07d0      	lsls	r0, r2, #31
 8003ab0:	d502      	bpl.n	8003ab8 <_printf_float+0x198>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	440b      	add	r3, r1
 8003ab6:	6123      	str	r3, [r4, #16]
 8003ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003aba:	f04f 0900 	mov.w	r9, #0
 8003abe:	e7dc      	b.n	8003a7a <_printf_float+0x15a>
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_printf_float+0x1a8>
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	07d2      	lsls	r2, r2, #31
 8003ac6:	d501      	bpl.n	8003acc <_printf_float+0x1ac>
 8003ac8:	3302      	adds	r3, #2
 8003aca:	e7f4      	b.n	8003ab6 <_printf_float+0x196>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e7f2      	b.n	8003ab6 <_printf_float+0x196>
 8003ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	db05      	blt.n	8003ae6 <_printf_float+0x1c6>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	6121      	str	r1, [r4, #16]
 8003ade:	07d8      	lsls	r0, r3, #31
 8003ae0:	d5ea      	bpl.n	8003ab8 <_printf_float+0x198>
 8003ae2:	1c4b      	adds	r3, r1, #1
 8003ae4:	e7e7      	b.n	8003ab6 <_printf_float+0x196>
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	bfd4      	ite	le
 8003aea:	f1c1 0202 	rsble	r2, r1, #2
 8003aee:	2201      	movgt	r2, #1
 8003af0:	4413      	add	r3, r2
 8003af2:	e7e0      	b.n	8003ab6 <_printf_float+0x196>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	055a      	lsls	r2, r3, #21
 8003af8:	d407      	bmi.n	8003b0a <_printf_float+0x1ea>
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	4642      	mov	r2, r8
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b8      	blx	r7
 8003b04:	3001      	adds	r0, #1
 8003b06:	d12b      	bne.n	8003b60 <_printf_float+0x240>
 8003b08:	e765      	b.n	80039d6 <_printf_float+0xb6>
 8003b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b0e:	f240 80dd 	bls.w	8003ccc <_printf_float+0x3ac>
 8003b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b16:	2200      	movs	r2, #0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f7fd f891 	bl	8000c40 <__aeabi_dcmpeq>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d033      	beq.n	8003b8a <_printf_float+0x26a>
 8003b22:	4a37      	ldr	r2, [pc, #220]	@ (8003c00 <_printf_float+0x2e0>)
 8003b24:	2301      	movs	r3, #1
 8003b26:	4631      	mov	r1, r6
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b8      	blx	r7
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f43f af52 	beq.w	80039d6 <_printf_float+0xb6>
 8003b32:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003b36:	4543      	cmp	r3, r8
 8003b38:	db02      	blt.n	8003b40 <_printf_float+0x220>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	07d8      	lsls	r0, r3, #31
 8003b3e:	d50f      	bpl.n	8003b60 <_printf_float+0x240>
 8003b40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b44:	4631      	mov	r1, r6
 8003b46:	4628      	mov	r0, r5
 8003b48:	47b8      	blx	r7
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	f43f af43 	beq.w	80039d6 <_printf_float+0xb6>
 8003b50:	f04f 0900 	mov.w	r9, #0
 8003b54:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003b58:	f104 0a1a 	add.w	sl, r4, #26
 8003b5c:	45c8      	cmp	r8, r9
 8003b5e:	dc09      	bgt.n	8003b74 <_printf_float+0x254>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	079b      	lsls	r3, r3, #30
 8003b64:	f100 8103 	bmi.w	8003d6e <_printf_float+0x44e>
 8003b68:	68e0      	ldr	r0, [r4, #12]
 8003b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b6c:	4298      	cmp	r0, r3
 8003b6e:	bfb8      	it	lt
 8003b70:	4618      	movlt	r0, r3
 8003b72:	e732      	b.n	80039da <_printf_float+0xba>
 8003b74:	2301      	movs	r3, #1
 8003b76:	4652      	mov	r2, sl
 8003b78:	4631      	mov	r1, r6
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	47b8      	blx	r7
 8003b7e:	3001      	adds	r0, #1
 8003b80:	f43f af29 	beq.w	80039d6 <_printf_float+0xb6>
 8003b84:	f109 0901 	add.w	r9, r9, #1
 8003b88:	e7e8      	b.n	8003b5c <_printf_float+0x23c>
 8003b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dc39      	bgt.n	8003c04 <_printf_float+0x2e4>
 8003b90:	4a1b      	ldr	r2, [pc, #108]	@ (8003c00 <_printf_float+0x2e0>)
 8003b92:	2301      	movs	r3, #1
 8003b94:	4631      	mov	r1, r6
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b8      	blx	r7
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f43f af1b 	beq.w	80039d6 <_printf_float+0xb6>
 8003ba0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8003ba8:	d102      	bne.n	8003bb0 <_printf_float+0x290>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	07d9      	lsls	r1, r3, #31
 8003bae:	d5d7      	bpl.n	8003b60 <_printf_float+0x240>
 8003bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b8      	blx	r7
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f43f af0b 	beq.w	80039d6 <_printf_float+0xb6>
 8003bc0:	f04f 0a00 	mov.w	sl, #0
 8003bc4:	f104 0b1a 	add.w	fp, r4, #26
 8003bc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bca:	425b      	negs	r3, r3
 8003bcc:	4553      	cmp	r3, sl
 8003bce:	dc01      	bgt.n	8003bd4 <_printf_float+0x2b4>
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	e793      	b.n	8003afc <_printf_float+0x1dc>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	465a      	mov	r2, fp
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b8      	blx	r7
 8003bde:	3001      	adds	r0, #1
 8003be0:	f43f aef9 	beq.w	80039d6 <_printf_float+0xb6>
 8003be4:	f10a 0a01 	add.w	sl, sl, #1
 8003be8:	e7ee      	b.n	8003bc8 <_printf_float+0x2a8>
 8003bea:	bf00      	nop
 8003bec:	7fefffff 	.word	0x7fefffff
 8003bf0:	08006224 	.word	0x08006224
 8003bf4:	08006228 	.word	0x08006228
 8003bf8:	0800622c 	.word	0x0800622c
 8003bfc:	08006230 	.word	0x08006230
 8003c00:	08006234 	.word	0x08006234
 8003c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c0a:	4553      	cmp	r3, sl
 8003c0c:	bfa8      	it	ge
 8003c0e:	4653      	movge	r3, sl
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	4699      	mov	r9, r3
 8003c14:	dc36      	bgt.n	8003c84 <_printf_float+0x364>
 8003c16:	f04f 0b00 	mov.w	fp, #0
 8003c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c1e:	f104 021a 	add.w	r2, r4, #26
 8003c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c26:	eba3 0309 	sub.w	r3, r3, r9
 8003c2a:	455b      	cmp	r3, fp
 8003c2c:	dc31      	bgt.n	8003c92 <_printf_float+0x372>
 8003c2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c30:	459a      	cmp	sl, r3
 8003c32:	dc3a      	bgt.n	8003caa <_printf_float+0x38a>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	07da      	lsls	r2, r3, #31
 8003c38:	d437      	bmi.n	8003caa <_printf_float+0x38a>
 8003c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8003c40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c42:	ebaa 0303 	sub.w	r3, sl, r3
 8003c46:	4599      	cmp	r9, r3
 8003c48:	bfa8      	it	ge
 8003c4a:	4699      	movge	r9, r3
 8003c4c:	f1b9 0f00 	cmp.w	r9, #0
 8003c50:	dc33      	bgt.n	8003cba <_printf_float+0x39a>
 8003c52:	f04f 0800 	mov.w	r8, #0
 8003c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c5a:	f104 0b1a 	add.w	fp, r4, #26
 8003c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c60:	ebaa 0303 	sub.w	r3, sl, r3
 8003c64:	eba3 0309 	sub.w	r3, r3, r9
 8003c68:	4543      	cmp	r3, r8
 8003c6a:	f77f af79 	ble.w	8003b60 <_printf_float+0x240>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	465a      	mov	r2, fp
 8003c72:	4631      	mov	r1, r6
 8003c74:	4628      	mov	r0, r5
 8003c76:	47b8      	blx	r7
 8003c78:	3001      	adds	r0, #1
 8003c7a:	f43f aeac 	beq.w	80039d6 <_printf_float+0xb6>
 8003c7e:	f108 0801 	add.w	r8, r8, #1
 8003c82:	e7ec      	b.n	8003c5e <_printf_float+0x33e>
 8003c84:	4642      	mov	r2, r8
 8003c86:	4631      	mov	r1, r6
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b8      	blx	r7
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d1c2      	bne.n	8003c16 <_printf_float+0x2f6>
 8003c90:	e6a1      	b.n	80039d6 <_printf_float+0xb6>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4631      	mov	r1, r6
 8003c96:	4628      	mov	r0, r5
 8003c98:	920a      	str	r2, [sp, #40]	@ 0x28
 8003c9a:	47b8      	blx	r7
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	f43f ae9a 	beq.w	80039d6 <_printf_float+0xb6>
 8003ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ca4:	f10b 0b01 	add.w	fp, fp, #1
 8003ca8:	e7bb      	b.n	8003c22 <_printf_float+0x302>
 8003caa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	47b8      	blx	r7
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d1c0      	bne.n	8003c3a <_printf_float+0x31a>
 8003cb8:	e68d      	b.n	80039d6 <_printf_float+0xb6>
 8003cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	4442      	add	r2, r8
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d1c3      	bne.n	8003c52 <_printf_float+0x332>
 8003cca:	e684      	b.n	80039d6 <_printf_float+0xb6>
 8003ccc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003cd0:	f1ba 0f01 	cmp.w	sl, #1
 8003cd4:	dc01      	bgt.n	8003cda <_printf_float+0x3ba>
 8003cd6:	07db      	lsls	r3, r3, #31
 8003cd8:	d536      	bpl.n	8003d48 <_printf_float+0x428>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4642      	mov	r2, r8
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b8      	blx	r7
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f43f ae76 	beq.w	80039d6 <_printf_float+0xb6>
 8003cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	47b8      	blx	r7
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	f43f ae6e 	beq.w	80039d6 <_printf_float+0xb6>
 8003cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2300      	movs	r3, #0
 8003d02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003d06:	f7fc ff9b 	bl	8000c40 <__aeabi_dcmpeq>
 8003d0a:	b9c0      	cbnz	r0, 8003d3e <_printf_float+0x41e>
 8003d0c:	4653      	mov	r3, sl
 8003d0e:	f108 0201 	add.w	r2, r8, #1
 8003d12:	4631      	mov	r1, r6
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b8      	blx	r7
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d10c      	bne.n	8003d36 <_printf_float+0x416>
 8003d1c:	e65b      	b.n	80039d6 <_printf_float+0xb6>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	465a      	mov	r2, fp
 8003d22:	4631      	mov	r1, r6
 8003d24:	4628      	mov	r0, r5
 8003d26:	47b8      	blx	r7
 8003d28:	3001      	adds	r0, #1
 8003d2a:	f43f ae54 	beq.w	80039d6 <_printf_float+0xb6>
 8003d2e:	f108 0801 	add.w	r8, r8, #1
 8003d32:	45d0      	cmp	r8, sl
 8003d34:	dbf3      	blt.n	8003d1e <_printf_float+0x3fe>
 8003d36:	464b      	mov	r3, r9
 8003d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003d3c:	e6df      	b.n	8003afe <_printf_float+0x1de>
 8003d3e:	f04f 0800 	mov.w	r8, #0
 8003d42:	f104 0b1a 	add.w	fp, r4, #26
 8003d46:	e7f4      	b.n	8003d32 <_printf_float+0x412>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	e7e1      	b.n	8003d12 <_printf_float+0x3f2>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	464a      	mov	r2, r9
 8003d52:	4631      	mov	r1, r6
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f ae3c 	beq.w	80039d6 <_printf_float+0xb6>
 8003d5e:	f108 0801 	add.w	r8, r8, #1
 8003d62:	68e3      	ldr	r3, [r4, #12]
 8003d64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003d66:	1a5b      	subs	r3, r3, r1
 8003d68:	4543      	cmp	r3, r8
 8003d6a:	dcf0      	bgt.n	8003d4e <_printf_float+0x42e>
 8003d6c:	e6fc      	b.n	8003b68 <_printf_float+0x248>
 8003d6e:	f04f 0800 	mov.w	r8, #0
 8003d72:	f104 0919 	add.w	r9, r4, #25
 8003d76:	e7f4      	b.n	8003d62 <_printf_float+0x442>

08003d78 <_printf_common>:
 8003d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	4616      	mov	r6, r2
 8003d7e:	4698      	mov	r8, r3
 8003d80:	688a      	ldr	r2, [r1, #8]
 8003d82:	690b      	ldr	r3, [r1, #16]
 8003d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	bfb8      	it	lt
 8003d8c:	4613      	movlt	r3, r2
 8003d8e:	6033      	str	r3, [r6, #0]
 8003d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d94:	4607      	mov	r7, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	b10a      	cbz	r2, 8003d9e <_printf_common+0x26>
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	0699      	lsls	r1, r3, #26
 8003da2:	bf42      	ittt	mi
 8003da4:	6833      	ldrmi	r3, [r6, #0]
 8003da6:	3302      	addmi	r3, #2
 8003da8:	6033      	strmi	r3, [r6, #0]
 8003daa:	6825      	ldr	r5, [r4, #0]
 8003dac:	f015 0506 	ands.w	r5, r5, #6
 8003db0:	d106      	bne.n	8003dc0 <_printf_common+0x48>
 8003db2:	f104 0a19 	add.w	sl, r4, #25
 8003db6:	68e3      	ldr	r3, [r4, #12]
 8003db8:	6832      	ldr	r2, [r6, #0]
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	dc26      	bgt.n	8003e0e <_printf_common+0x96>
 8003dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	3b00      	subs	r3, #0
 8003dc8:	bf18      	it	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	0692      	lsls	r2, r2, #26
 8003dce:	d42b      	bmi.n	8003e28 <_printf_common+0xb0>
 8003dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c8      	blx	r9
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d01e      	beq.n	8003e1c <_printf_common+0xa4>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	6922      	ldr	r2, [r4, #16]
 8003de2:	f003 0306 	and.w	r3, r3, #6
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf02      	ittt	eq
 8003dea:	68e5      	ldreq	r5, [r4, #12]
 8003dec:	6833      	ldreq	r3, [r6, #0]
 8003dee:	1aed      	subeq	r5, r5, r3
 8003df0:	68a3      	ldr	r3, [r4, #8]
 8003df2:	bf0c      	ite	eq
 8003df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df8:	2500      	movne	r5, #0
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bfc4      	itt	gt
 8003dfe:	1a9b      	subgt	r3, r3, r2
 8003e00:	18ed      	addgt	r5, r5, r3
 8003e02:	2600      	movs	r6, #0
 8003e04:	341a      	adds	r4, #26
 8003e06:	42b5      	cmp	r5, r6
 8003e08:	d11a      	bne.n	8003e40 <_printf_common+0xc8>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e008      	b.n	8003e20 <_printf_common+0xa8>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4652      	mov	r2, sl
 8003e12:	4641      	mov	r1, r8
 8003e14:	4638      	mov	r0, r7
 8003e16:	47c8      	blx	r9
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d103      	bne.n	8003e24 <_printf_common+0xac>
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e24:	3501      	adds	r5, #1
 8003e26:	e7c6      	b.n	8003db6 <_printf_common+0x3e>
 8003e28:	18e1      	adds	r1, r4, r3
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	2030      	movs	r0, #48	@ 0x30
 8003e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e32:	4422      	add	r2, r4
 8003e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	e7c7      	b.n	8003dd0 <_printf_common+0x58>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4622      	mov	r2, r4
 8003e44:	4641      	mov	r1, r8
 8003e46:	4638      	mov	r0, r7
 8003e48:	47c8      	blx	r9
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d0e6      	beq.n	8003e1c <_printf_common+0xa4>
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7d9      	b.n	8003e06 <_printf_common+0x8e>
	...

08003e54 <_printf_i>:
 8003e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	7e0f      	ldrb	r7, [r1, #24]
 8003e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e5c:	2f78      	cmp	r7, #120	@ 0x78
 8003e5e:	4691      	mov	r9, r2
 8003e60:	4680      	mov	r8, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	469a      	mov	sl, r3
 8003e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e6a:	d807      	bhi.n	8003e7c <_printf_i+0x28>
 8003e6c:	2f62      	cmp	r7, #98	@ 0x62
 8003e6e:	d80a      	bhi.n	8003e86 <_printf_i+0x32>
 8003e70:	2f00      	cmp	r7, #0
 8003e72:	f000 80d2 	beq.w	800401a <_printf_i+0x1c6>
 8003e76:	2f58      	cmp	r7, #88	@ 0x58
 8003e78:	f000 80b9 	beq.w	8003fee <_printf_i+0x19a>
 8003e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e84:	e03a      	b.n	8003efc <_printf_i+0xa8>
 8003e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e8a:	2b15      	cmp	r3, #21
 8003e8c:	d8f6      	bhi.n	8003e7c <_printf_i+0x28>
 8003e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e94 <_printf_i+0x40>)
 8003e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003f01 	.word	0x08003f01
 8003e9c:	08003e7d 	.word	0x08003e7d
 8003ea0:	08003e7d 	.word	0x08003e7d
 8003ea4:	08003e7d 	.word	0x08003e7d
 8003ea8:	08003e7d 	.word	0x08003e7d
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08003e7d 	.word	0x08003e7d
 8003eb4:	08003e7d 	.word	0x08003e7d
 8003eb8:	08003e7d 	.word	0x08003e7d
 8003ebc:	08003e7d 	.word	0x08003e7d
 8003ec0:	08004001 	.word	0x08004001
 8003ec4:	08003f2b 	.word	0x08003f2b
 8003ec8:	08003fbb 	.word	0x08003fbb
 8003ecc:	08003e7d 	.word	0x08003e7d
 8003ed0:	08003e7d 	.word	0x08003e7d
 8003ed4:	08004023 	.word	0x08004023
 8003ed8:	08003e7d 	.word	0x08003e7d
 8003edc:	08003f2b 	.word	0x08003f2b
 8003ee0:	08003e7d 	.word	0x08003e7d
 8003ee4:	08003e7d 	.word	0x08003e7d
 8003ee8:	08003fc3 	.word	0x08003fc3
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6032      	str	r2, [r6, #0]
 8003ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003efc:	2301      	movs	r3, #1
 8003efe:	e09d      	b.n	800403c <_printf_i+0x1e8>
 8003f00:	6833      	ldr	r3, [r6, #0]
 8003f02:	6820      	ldr	r0, [r4, #0]
 8003f04:	1d19      	adds	r1, r3, #4
 8003f06:	6031      	str	r1, [r6, #0]
 8003f08:	0606      	lsls	r6, r0, #24
 8003f0a:	d501      	bpl.n	8003f10 <_printf_i+0xbc>
 8003f0c:	681d      	ldr	r5, [r3, #0]
 8003f0e:	e003      	b.n	8003f18 <_printf_i+0xc4>
 8003f10:	0645      	lsls	r5, r0, #25
 8003f12:	d5fb      	bpl.n	8003f0c <_printf_i+0xb8>
 8003f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	da03      	bge.n	8003f24 <_printf_i+0xd0>
 8003f1c:	232d      	movs	r3, #45	@ 0x2d
 8003f1e:	426d      	negs	r5, r5
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f24:	4859      	ldr	r0, [pc, #356]	@ (800408c <_printf_i+0x238>)
 8003f26:	230a      	movs	r3, #10
 8003f28:	e011      	b.n	8003f4e <_printf_i+0xfa>
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	6833      	ldr	r3, [r6, #0]
 8003f2e:	0608      	lsls	r0, r1, #24
 8003f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f34:	d402      	bmi.n	8003f3c <_printf_i+0xe8>
 8003f36:	0649      	lsls	r1, r1, #25
 8003f38:	bf48      	it	mi
 8003f3a:	b2ad      	uxthmi	r5, r5
 8003f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f3e:	4853      	ldr	r0, [pc, #332]	@ (800408c <_printf_i+0x238>)
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	bf14      	ite	ne
 8003f44:	230a      	movne	r3, #10
 8003f46:	2308      	moveq	r3, #8
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f4e:	6866      	ldr	r6, [r4, #4]
 8003f50:	60a6      	str	r6, [r4, #8]
 8003f52:	2e00      	cmp	r6, #0
 8003f54:	bfa2      	ittt	ge
 8003f56:	6821      	ldrge	r1, [r4, #0]
 8003f58:	f021 0104 	bicge.w	r1, r1, #4
 8003f5c:	6021      	strge	r1, [r4, #0]
 8003f5e:	b90d      	cbnz	r5, 8003f64 <_printf_i+0x110>
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d04b      	beq.n	8003ffc <_printf_i+0x1a8>
 8003f64:	4616      	mov	r6, r2
 8003f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8003f6e:	5dc7      	ldrb	r7, [r0, r7]
 8003f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f74:	462f      	mov	r7, r5
 8003f76:	42bb      	cmp	r3, r7
 8003f78:	460d      	mov	r5, r1
 8003f7a:	d9f4      	bls.n	8003f66 <_printf_i+0x112>
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10b      	bne.n	8003f98 <_printf_i+0x144>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	07df      	lsls	r7, r3, #31
 8003f84:	d508      	bpl.n	8003f98 <_printf_i+0x144>
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	6861      	ldr	r1, [r4, #4]
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	bfde      	ittt	le
 8003f8e:	2330      	movle	r3, #48	@ 0x30
 8003f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f94:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f98:	1b92      	subs	r2, r2, r6
 8003f9a:	6122      	str	r2, [r4, #16]
 8003f9c:	f8cd a000 	str.w	sl, [sp]
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	aa03      	add	r2, sp, #12
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f7ff fee6 	bl	8003d78 <_printf_common>
 8003fac:	3001      	adds	r0, #1
 8003fae:	d14a      	bne.n	8004046 <_printf_i+0x1f2>
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fb4:	b004      	add	sp, #16
 8003fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	f043 0320 	orr.w	r3, r3, #32
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	4833      	ldr	r0, [pc, #204]	@ (8004090 <_printf_i+0x23c>)
 8003fc4:	2778      	movs	r7, #120	@ 0x78
 8003fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	6831      	ldr	r1, [r6, #0]
 8003fce:	061f      	lsls	r7, r3, #24
 8003fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fd4:	d402      	bmi.n	8003fdc <_printf_i+0x188>
 8003fd6:	065f      	lsls	r7, r3, #25
 8003fd8:	bf48      	it	mi
 8003fda:	b2ad      	uxthmi	r5, r5
 8003fdc:	6031      	str	r1, [r6, #0]
 8003fde:	07d9      	lsls	r1, r3, #31
 8003fe0:	bf44      	itt	mi
 8003fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8003fe6:	6023      	strmi	r3, [r4, #0]
 8003fe8:	b11d      	cbz	r5, 8003ff2 <_printf_i+0x19e>
 8003fea:	2310      	movs	r3, #16
 8003fec:	e7ac      	b.n	8003f48 <_printf_i+0xf4>
 8003fee:	4827      	ldr	r0, [pc, #156]	@ (800408c <_printf_i+0x238>)
 8003ff0:	e7e9      	b.n	8003fc6 <_printf_i+0x172>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	f023 0320 	bic.w	r3, r3, #32
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	e7f6      	b.n	8003fea <_printf_i+0x196>
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	e7bd      	b.n	8003f7c <_printf_i+0x128>
 8004000:	6833      	ldr	r3, [r6, #0]
 8004002:	6825      	ldr	r5, [r4, #0]
 8004004:	6961      	ldr	r1, [r4, #20]
 8004006:	1d18      	adds	r0, r3, #4
 8004008:	6030      	str	r0, [r6, #0]
 800400a:	062e      	lsls	r6, r5, #24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	d501      	bpl.n	8004014 <_printf_i+0x1c0>
 8004010:	6019      	str	r1, [r3, #0]
 8004012:	e002      	b.n	800401a <_printf_i+0x1c6>
 8004014:	0668      	lsls	r0, r5, #25
 8004016:	d5fb      	bpl.n	8004010 <_printf_i+0x1bc>
 8004018:	8019      	strh	r1, [r3, #0]
 800401a:	2300      	movs	r3, #0
 800401c:	6123      	str	r3, [r4, #16]
 800401e:	4616      	mov	r6, r2
 8004020:	e7bc      	b.n	8003f9c <_printf_i+0x148>
 8004022:	6833      	ldr	r3, [r6, #0]
 8004024:	1d1a      	adds	r2, r3, #4
 8004026:	6032      	str	r2, [r6, #0]
 8004028:	681e      	ldr	r6, [r3, #0]
 800402a:	6862      	ldr	r2, [r4, #4]
 800402c:	2100      	movs	r1, #0
 800402e:	4630      	mov	r0, r6
 8004030:	f7fc f8d6 	bl	80001e0 <memchr>
 8004034:	b108      	cbz	r0, 800403a <_printf_i+0x1e6>
 8004036:	1b80      	subs	r0, r0, r6
 8004038:	6060      	str	r0, [r4, #4]
 800403a:	6863      	ldr	r3, [r4, #4]
 800403c:	6123      	str	r3, [r4, #16]
 800403e:	2300      	movs	r3, #0
 8004040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004044:	e7aa      	b.n	8003f9c <_printf_i+0x148>
 8004046:	6923      	ldr	r3, [r4, #16]
 8004048:	4632      	mov	r2, r6
 800404a:	4649      	mov	r1, r9
 800404c:	4640      	mov	r0, r8
 800404e:	47d0      	blx	sl
 8004050:	3001      	adds	r0, #1
 8004052:	d0ad      	beq.n	8003fb0 <_printf_i+0x15c>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	079b      	lsls	r3, r3, #30
 8004058:	d413      	bmi.n	8004082 <_printf_i+0x22e>
 800405a:	68e0      	ldr	r0, [r4, #12]
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	4298      	cmp	r0, r3
 8004060:	bfb8      	it	lt
 8004062:	4618      	movlt	r0, r3
 8004064:	e7a6      	b.n	8003fb4 <_printf_i+0x160>
 8004066:	2301      	movs	r3, #1
 8004068:	4632      	mov	r2, r6
 800406a:	4649      	mov	r1, r9
 800406c:	4640      	mov	r0, r8
 800406e:	47d0      	blx	sl
 8004070:	3001      	adds	r0, #1
 8004072:	d09d      	beq.n	8003fb0 <_printf_i+0x15c>
 8004074:	3501      	adds	r5, #1
 8004076:	68e3      	ldr	r3, [r4, #12]
 8004078:	9903      	ldr	r1, [sp, #12]
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	42ab      	cmp	r3, r5
 800407e:	dcf2      	bgt.n	8004066 <_printf_i+0x212>
 8004080:	e7eb      	b.n	800405a <_printf_i+0x206>
 8004082:	2500      	movs	r5, #0
 8004084:	f104 0619 	add.w	r6, r4, #25
 8004088:	e7f5      	b.n	8004076 <_printf_i+0x222>
 800408a:	bf00      	nop
 800408c:	08006236 	.word	0x08006236
 8004090:	08006247 	.word	0x08006247

08004094 <std>:
 8004094:	2300      	movs	r3, #0
 8004096:	b510      	push	{r4, lr}
 8004098:	4604      	mov	r4, r0
 800409a:	e9c0 3300 	strd	r3, r3, [r0]
 800409e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040a2:	6083      	str	r3, [r0, #8]
 80040a4:	8181      	strh	r1, [r0, #12]
 80040a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80040a8:	81c2      	strh	r2, [r0, #14]
 80040aa:	6183      	str	r3, [r0, #24]
 80040ac:	4619      	mov	r1, r3
 80040ae:	2208      	movs	r2, #8
 80040b0:	305c      	adds	r0, #92	@ 0x5c
 80040b2:	f000 f9f9 	bl	80044a8 <memset>
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <std+0x58>)
 80040b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <std+0x5c>)
 80040bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <std+0x60>)
 80040c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040c2:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <std+0x64>)
 80040c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80040c6:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <std+0x68>)
 80040c8:	6224      	str	r4, [r4, #32]
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d006      	beq.n	80040dc <std+0x48>
 80040ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040d2:	4294      	cmp	r4, r2
 80040d4:	d002      	beq.n	80040dc <std+0x48>
 80040d6:	33d0      	adds	r3, #208	@ 0xd0
 80040d8:	429c      	cmp	r4, r3
 80040da:	d105      	bne.n	80040e8 <std+0x54>
 80040dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e4:	f000 ba5c 	b.w	80045a0 <__retarget_lock_init_recursive>
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	bf00      	nop
 80040ec:	080042f9 	.word	0x080042f9
 80040f0:	0800431b 	.word	0x0800431b
 80040f4:	08004353 	.word	0x08004353
 80040f8:	08004377 	.word	0x08004377
 80040fc:	20000290 	.word	0x20000290

08004100 <stdio_exit_handler>:
 8004100:	4a02      	ldr	r2, [pc, #8]	@ (800410c <stdio_exit_handler+0xc>)
 8004102:	4903      	ldr	r1, [pc, #12]	@ (8004110 <stdio_exit_handler+0x10>)
 8004104:	4803      	ldr	r0, [pc, #12]	@ (8004114 <stdio_exit_handler+0x14>)
 8004106:	f000 b869 	b.w	80041dc <_fwalk_sglue>
 800410a:	bf00      	nop
 800410c:	2000000c 	.word	0x2000000c
 8004110:	08005ec9 	.word	0x08005ec9
 8004114:	2000001c 	.word	0x2000001c

08004118 <cleanup_stdio>:
 8004118:	6841      	ldr	r1, [r0, #4]
 800411a:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <cleanup_stdio+0x34>)
 800411c:	4299      	cmp	r1, r3
 800411e:	b510      	push	{r4, lr}
 8004120:	4604      	mov	r4, r0
 8004122:	d001      	beq.n	8004128 <cleanup_stdio+0x10>
 8004124:	f001 fed0 	bl	8005ec8 <_fflush_r>
 8004128:	68a1      	ldr	r1, [r4, #8]
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <cleanup_stdio+0x38>)
 800412c:	4299      	cmp	r1, r3
 800412e:	d002      	beq.n	8004136 <cleanup_stdio+0x1e>
 8004130:	4620      	mov	r0, r4
 8004132:	f001 fec9 	bl	8005ec8 <_fflush_r>
 8004136:	68e1      	ldr	r1, [r4, #12]
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <cleanup_stdio+0x3c>)
 800413a:	4299      	cmp	r1, r3
 800413c:	d004      	beq.n	8004148 <cleanup_stdio+0x30>
 800413e:	4620      	mov	r0, r4
 8004140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004144:	f001 bec0 	b.w	8005ec8 <_fflush_r>
 8004148:	bd10      	pop	{r4, pc}
 800414a:	bf00      	nop
 800414c:	20000290 	.word	0x20000290
 8004150:	200002f8 	.word	0x200002f8
 8004154:	20000360 	.word	0x20000360

08004158 <global_stdio_init.part.0>:
 8004158:	b510      	push	{r4, lr}
 800415a:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <global_stdio_init.part.0+0x30>)
 800415c:	4c0b      	ldr	r4, [pc, #44]	@ (800418c <global_stdio_init.part.0+0x34>)
 800415e:	4a0c      	ldr	r2, [pc, #48]	@ (8004190 <global_stdio_init.part.0+0x38>)
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	4620      	mov	r0, r4
 8004164:	2200      	movs	r2, #0
 8004166:	2104      	movs	r1, #4
 8004168:	f7ff ff94 	bl	8004094 <std>
 800416c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004170:	2201      	movs	r2, #1
 8004172:	2109      	movs	r1, #9
 8004174:	f7ff ff8e 	bl	8004094 <std>
 8004178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800417c:	2202      	movs	r2, #2
 800417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004182:	2112      	movs	r1, #18
 8004184:	f7ff bf86 	b.w	8004094 <std>
 8004188:	200003c8 	.word	0x200003c8
 800418c:	20000290 	.word	0x20000290
 8004190:	08004101 	.word	0x08004101

08004194 <__sfp_lock_acquire>:
 8004194:	4801      	ldr	r0, [pc, #4]	@ (800419c <__sfp_lock_acquire+0x8>)
 8004196:	f000 ba04 	b.w	80045a2 <__retarget_lock_acquire_recursive>
 800419a:	bf00      	nop
 800419c:	200003d1 	.word	0x200003d1

080041a0 <__sfp_lock_release>:
 80041a0:	4801      	ldr	r0, [pc, #4]	@ (80041a8 <__sfp_lock_release+0x8>)
 80041a2:	f000 b9ff 	b.w	80045a4 <__retarget_lock_release_recursive>
 80041a6:	bf00      	nop
 80041a8:	200003d1 	.word	0x200003d1

080041ac <__sinit>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4604      	mov	r4, r0
 80041b0:	f7ff fff0 	bl	8004194 <__sfp_lock_acquire>
 80041b4:	6a23      	ldr	r3, [r4, #32]
 80041b6:	b11b      	cbz	r3, 80041c0 <__sinit+0x14>
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041bc:	f7ff bff0 	b.w	80041a0 <__sfp_lock_release>
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <__sinit+0x28>)
 80041c2:	6223      	str	r3, [r4, #32]
 80041c4:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <__sinit+0x2c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f5      	bne.n	80041b8 <__sinit+0xc>
 80041cc:	f7ff ffc4 	bl	8004158 <global_stdio_init.part.0>
 80041d0:	e7f2      	b.n	80041b8 <__sinit+0xc>
 80041d2:	bf00      	nop
 80041d4:	08004119 	.word	0x08004119
 80041d8:	200003c8 	.word	0x200003c8

080041dc <_fwalk_sglue>:
 80041dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041e0:	4607      	mov	r7, r0
 80041e2:	4688      	mov	r8, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	2600      	movs	r6, #0
 80041e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041ec:	f1b9 0901 	subs.w	r9, r9, #1
 80041f0:	d505      	bpl.n	80041fe <_fwalk_sglue+0x22>
 80041f2:	6824      	ldr	r4, [r4, #0]
 80041f4:	2c00      	cmp	r4, #0
 80041f6:	d1f7      	bne.n	80041e8 <_fwalk_sglue+0xc>
 80041f8:	4630      	mov	r0, r6
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	89ab      	ldrh	r3, [r5, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d907      	bls.n	8004214 <_fwalk_sglue+0x38>
 8004204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004208:	3301      	adds	r3, #1
 800420a:	d003      	beq.n	8004214 <_fwalk_sglue+0x38>
 800420c:	4629      	mov	r1, r5
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	4306      	orrs	r6, r0
 8004214:	3568      	adds	r5, #104	@ 0x68
 8004216:	e7e9      	b.n	80041ec <_fwalk_sglue+0x10>

08004218 <iprintf>:
 8004218:	b40f      	push	{r0, r1, r2, r3}
 800421a:	b507      	push	{r0, r1, r2, lr}
 800421c:	4906      	ldr	r1, [pc, #24]	@ (8004238 <iprintf+0x20>)
 800421e:	ab04      	add	r3, sp, #16
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	f853 2b04 	ldr.w	r2, [r3], #4
 8004226:	6881      	ldr	r1, [r0, #8]
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	f001 fcb5 	bl	8005b98 <_vfiprintf_r>
 800422e:	b003      	add	sp, #12
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b004      	add	sp, #16
 8004236:	4770      	bx	lr
 8004238:	20000018 	.word	0x20000018

0800423c <_puts_r>:
 800423c:	6a03      	ldr	r3, [r0, #32]
 800423e:	b570      	push	{r4, r5, r6, lr}
 8004240:	6884      	ldr	r4, [r0, #8]
 8004242:	4605      	mov	r5, r0
 8004244:	460e      	mov	r6, r1
 8004246:	b90b      	cbnz	r3, 800424c <_puts_r+0x10>
 8004248:	f7ff ffb0 	bl	80041ac <__sinit>
 800424c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d405      	bmi.n	800425e <_puts_r+0x22>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	0598      	lsls	r0, r3, #22
 8004256:	d402      	bmi.n	800425e <_puts_r+0x22>
 8004258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800425a:	f000 f9a2 	bl	80045a2 <__retarget_lock_acquire_recursive>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0719      	lsls	r1, r3, #28
 8004262:	d502      	bpl.n	800426a <_puts_r+0x2e>
 8004264:	6923      	ldr	r3, [r4, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d135      	bne.n	80042d6 <_puts_r+0x9a>
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f8c5 	bl	80043fc <__swsetup_r>
 8004272:	b380      	cbz	r0, 80042d6 <_puts_r+0x9a>
 8004274:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800427a:	07da      	lsls	r2, r3, #31
 800427c:	d405      	bmi.n	800428a <_puts_r+0x4e>
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	059b      	lsls	r3, r3, #22
 8004282:	d402      	bmi.n	800428a <_puts_r+0x4e>
 8004284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004286:	f000 f98d 	bl	80045a4 <__retarget_lock_release_recursive>
 800428a:	4628      	mov	r0, r5
 800428c:	bd70      	pop	{r4, r5, r6, pc}
 800428e:	2b00      	cmp	r3, #0
 8004290:	da04      	bge.n	800429c <_puts_r+0x60>
 8004292:	69a2      	ldr	r2, [r4, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	dc17      	bgt.n	80042c8 <_puts_r+0x8c>
 8004298:	290a      	cmp	r1, #10
 800429a:	d015      	beq.n	80042c8 <_puts_r+0x8c>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	6022      	str	r2, [r4, #0]
 80042a2:	7019      	strb	r1, [r3, #0]
 80042a4:	68a3      	ldr	r3, [r4, #8]
 80042a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042aa:	3b01      	subs	r3, #1
 80042ac:	60a3      	str	r3, [r4, #8]
 80042ae:	2900      	cmp	r1, #0
 80042b0:	d1ed      	bne.n	800428e <_puts_r+0x52>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da11      	bge.n	80042da <_puts_r+0x9e>
 80042b6:	4622      	mov	r2, r4
 80042b8:	210a      	movs	r1, #10
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f85f 	bl	800437e <__swbuf_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d0d7      	beq.n	8004274 <_puts_r+0x38>
 80042c4:	250a      	movs	r5, #10
 80042c6:	e7d7      	b.n	8004278 <_puts_r+0x3c>
 80042c8:	4622      	mov	r2, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 f857 	bl	800437e <__swbuf_r>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d1e7      	bne.n	80042a4 <_puts_r+0x68>
 80042d4:	e7ce      	b.n	8004274 <_puts_r+0x38>
 80042d6:	3e01      	subs	r6, #1
 80042d8:	e7e4      	b.n	80042a4 <_puts_r+0x68>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	6022      	str	r2, [r4, #0]
 80042e0:	220a      	movs	r2, #10
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e7ee      	b.n	80042c4 <_puts_r+0x88>
	...

080042e8 <puts>:
 80042e8:	4b02      	ldr	r3, [pc, #8]	@ (80042f4 <puts+0xc>)
 80042ea:	4601      	mov	r1, r0
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	f7ff bfa5 	b.w	800423c <_puts_r>
 80042f2:	bf00      	nop
 80042f4:	20000018 	.word	0x20000018

080042f8 <__sread>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	460c      	mov	r4, r1
 80042fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004300:	f000 f900 	bl	8004504 <_read_r>
 8004304:	2800      	cmp	r0, #0
 8004306:	bfab      	itete	ge
 8004308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800430a:	89a3      	ldrhlt	r3, [r4, #12]
 800430c:	181b      	addge	r3, r3, r0
 800430e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004312:	bfac      	ite	ge
 8004314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004316:	81a3      	strhlt	r3, [r4, #12]
 8004318:	bd10      	pop	{r4, pc}

0800431a <__swrite>:
 800431a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431e:	461f      	mov	r7, r3
 8004320:	898b      	ldrh	r3, [r1, #12]
 8004322:	05db      	lsls	r3, r3, #23
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	4616      	mov	r6, r2
 800432a:	d505      	bpl.n	8004338 <__swrite+0x1e>
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	2302      	movs	r3, #2
 8004332:	2200      	movs	r2, #0
 8004334:	f000 f8d4 	bl	80044e0 <_lseek_r>
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004342:	81a3      	strh	r3, [r4, #12]
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	4628      	mov	r0, r5
 800434a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	f000 b8eb 	b.w	8004528 <_write_r>

08004352 <__sseek>:
 8004352:	b510      	push	{r4, lr}
 8004354:	460c      	mov	r4, r1
 8004356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435a:	f000 f8c1 	bl	80044e0 <_lseek_r>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	bf15      	itete	ne
 8004364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800436a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800436e:	81a3      	strheq	r3, [r4, #12]
 8004370:	bf18      	it	ne
 8004372:	81a3      	strhne	r3, [r4, #12]
 8004374:	bd10      	pop	{r4, pc}

08004376 <__sclose>:
 8004376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437a:	f000 b8a1 	b.w	80044c0 <_close_r>

0800437e <__swbuf_r>:
 800437e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004380:	460e      	mov	r6, r1
 8004382:	4614      	mov	r4, r2
 8004384:	4605      	mov	r5, r0
 8004386:	b118      	cbz	r0, 8004390 <__swbuf_r+0x12>
 8004388:	6a03      	ldr	r3, [r0, #32]
 800438a:	b90b      	cbnz	r3, 8004390 <__swbuf_r+0x12>
 800438c:	f7ff ff0e 	bl	80041ac <__sinit>
 8004390:	69a3      	ldr	r3, [r4, #24]
 8004392:	60a3      	str	r3, [r4, #8]
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	071a      	lsls	r2, r3, #28
 8004398:	d501      	bpl.n	800439e <__swbuf_r+0x20>
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	b943      	cbnz	r3, 80043b0 <__swbuf_r+0x32>
 800439e:	4621      	mov	r1, r4
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 f82b 	bl	80043fc <__swsetup_r>
 80043a6:	b118      	cbz	r0, 80043b0 <__swbuf_r+0x32>
 80043a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80043ac:	4638      	mov	r0, r7
 80043ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	6922      	ldr	r2, [r4, #16]
 80043b4:	1a98      	subs	r0, r3, r2
 80043b6:	6963      	ldr	r3, [r4, #20]
 80043b8:	b2f6      	uxtb	r6, r6
 80043ba:	4283      	cmp	r3, r0
 80043bc:	4637      	mov	r7, r6
 80043be:	dc05      	bgt.n	80043cc <__swbuf_r+0x4e>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4628      	mov	r0, r5
 80043c4:	f001 fd80 	bl	8005ec8 <_fflush_r>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1ed      	bne.n	80043a8 <__swbuf_r+0x2a>
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	6022      	str	r2, [r4, #0]
 80043d8:	701e      	strb	r6, [r3, #0]
 80043da:	6962      	ldr	r2, [r4, #20]
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	429a      	cmp	r2, r3
 80043e0:	d004      	beq.n	80043ec <__swbuf_r+0x6e>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	07db      	lsls	r3, r3, #31
 80043e6:	d5e1      	bpl.n	80043ac <__swbuf_r+0x2e>
 80043e8:	2e0a      	cmp	r6, #10
 80043ea:	d1df      	bne.n	80043ac <__swbuf_r+0x2e>
 80043ec:	4621      	mov	r1, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	f001 fd6a 	bl	8005ec8 <_fflush_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d0d9      	beq.n	80043ac <__swbuf_r+0x2e>
 80043f8:	e7d6      	b.n	80043a8 <__swbuf_r+0x2a>
	...

080043fc <__swsetup_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <__swsetup_r+0xa8>)
 8004400:	4605      	mov	r5, r0
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	460c      	mov	r4, r1
 8004406:	b118      	cbz	r0, 8004410 <__swsetup_r+0x14>
 8004408:	6a03      	ldr	r3, [r0, #32]
 800440a:	b90b      	cbnz	r3, 8004410 <__swsetup_r+0x14>
 800440c:	f7ff fece 	bl	80041ac <__sinit>
 8004410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004414:	0719      	lsls	r1, r3, #28
 8004416:	d422      	bmi.n	800445e <__swsetup_r+0x62>
 8004418:	06da      	lsls	r2, r3, #27
 800441a:	d407      	bmi.n	800442c <__swsetup_r+0x30>
 800441c:	2209      	movs	r2, #9
 800441e:	602a      	str	r2, [r5, #0]
 8004420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800442a:	e033      	b.n	8004494 <__swsetup_r+0x98>
 800442c:	0758      	lsls	r0, r3, #29
 800442e:	d512      	bpl.n	8004456 <__swsetup_r+0x5a>
 8004430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004432:	b141      	cbz	r1, 8004446 <__swsetup_r+0x4a>
 8004434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <__swsetup_r+0x46>
 800443c:	4628      	mov	r0, r5
 800443e:	f000 ff03 	bl	8005248 <_free_r>
 8004442:	2300      	movs	r3, #0
 8004444:	6363      	str	r3, [r4, #52]	@ 0x34
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	2300      	movs	r3, #0
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	6923      	ldr	r3, [r4, #16]
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0308 	orr.w	r3, r3, #8
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	b94b      	cbnz	r3, 8004476 <__swsetup_r+0x7a>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446c:	d003      	beq.n	8004476 <__swsetup_r+0x7a>
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f001 fd77 	bl	8005f64 <__smakebuf_r>
 8004476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447a:	f013 0201 	ands.w	r2, r3, #1
 800447e:	d00a      	beq.n	8004496 <__swsetup_r+0x9a>
 8004480:	2200      	movs	r2, #0
 8004482:	60a2      	str	r2, [r4, #8]
 8004484:	6962      	ldr	r2, [r4, #20]
 8004486:	4252      	negs	r2, r2
 8004488:	61a2      	str	r2, [r4, #24]
 800448a:	6922      	ldr	r2, [r4, #16]
 800448c:	b942      	cbnz	r2, 80044a0 <__swsetup_r+0xa4>
 800448e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004492:	d1c5      	bne.n	8004420 <__swsetup_r+0x24>
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	0799      	lsls	r1, r3, #30
 8004498:	bf58      	it	pl
 800449a:	6962      	ldrpl	r2, [r4, #20]
 800449c:	60a2      	str	r2, [r4, #8]
 800449e:	e7f4      	b.n	800448a <__swsetup_r+0x8e>
 80044a0:	2000      	movs	r0, #0
 80044a2:	e7f7      	b.n	8004494 <__swsetup_r+0x98>
 80044a4:	20000018 	.word	0x20000018

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <_localeconv_r>:
 80044b8:	4800      	ldr	r0, [pc, #0]	@ (80044bc <_localeconv_r+0x4>)
 80044ba:	4770      	bx	lr
 80044bc:	20000158 	.word	0x20000158

080044c0 <_close_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	@ (80044dc <_close_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fd f99d 	bl	800180a <_close>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_close_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_close_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200003cc 	.word	0x200003cc

080044e0 <_lseek_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d07      	ldr	r5, [pc, #28]	@ (8004500 <_lseek_r+0x20>)
 80044e4:	4604      	mov	r4, r0
 80044e6:	4608      	mov	r0, r1
 80044e8:	4611      	mov	r1, r2
 80044ea:	2200      	movs	r2, #0
 80044ec:	602a      	str	r2, [r5, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fd f9af 	bl	8001852 <_lseek>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_lseek_r+0x1e>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_lseek_r+0x1e>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	200003cc 	.word	0x200003cc

08004504 <_read_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d07      	ldr	r5, [pc, #28]	@ (8004524 <_read_r+0x20>)
 8004508:	4604      	mov	r4, r0
 800450a:	4608      	mov	r0, r1
 800450c:	4611      	mov	r1, r2
 800450e:	2200      	movs	r2, #0
 8004510:	602a      	str	r2, [r5, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f7fd f940 	bl	8001798 <_read>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_read_r+0x1e>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_read_r+0x1e>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	200003cc 	.word	0x200003cc

08004528 <_write_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d07      	ldr	r5, [pc, #28]	@ (8004548 <_write_r+0x20>)
 800452c:	4604      	mov	r4, r0
 800452e:	4608      	mov	r0, r1
 8004530:	4611      	mov	r1, r2
 8004532:	2200      	movs	r2, #0
 8004534:	602a      	str	r2, [r5, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fd f94b 	bl	80017d2 <_write>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_write_r+0x1e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_write_r+0x1e>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	200003cc 	.word	0x200003cc

0800454c <__errno>:
 800454c:	4b01      	ldr	r3, [pc, #4]	@ (8004554 <__errno+0x8>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000018 	.word	0x20000018

08004558 <__libc_init_array>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	4d0d      	ldr	r5, [pc, #52]	@ (8004590 <__libc_init_array+0x38>)
 800455c:	4c0d      	ldr	r4, [pc, #52]	@ (8004594 <__libc_init_array+0x3c>)
 800455e:	1b64      	subs	r4, r4, r5
 8004560:	10a4      	asrs	r4, r4, #2
 8004562:	2600      	movs	r6, #0
 8004564:	42a6      	cmp	r6, r4
 8004566:	d109      	bne.n	800457c <__libc_init_array+0x24>
 8004568:	4d0b      	ldr	r5, [pc, #44]	@ (8004598 <__libc_init_array+0x40>)
 800456a:	4c0c      	ldr	r4, [pc, #48]	@ (800459c <__libc_init_array+0x44>)
 800456c:	f001 fe26 	bl	80061bc <_init>
 8004570:	1b64      	subs	r4, r4, r5
 8004572:	10a4      	asrs	r4, r4, #2
 8004574:	2600      	movs	r6, #0
 8004576:	42a6      	cmp	r6, r4
 8004578:	d105      	bne.n	8004586 <__libc_init_array+0x2e>
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004580:	4798      	blx	r3
 8004582:	3601      	adds	r6, #1
 8004584:	e7ee      	b.n	8004564 <__libc_init_array+0xc>
 8004586:	f855 3b04 	ldr.w	r3, [r5], #4
 800458a:	4798      	blx	r3
 800458c:	3601      	adds	r6, #1
 800458e:	e7f2      	b.n	8004576 <__libc_init_array+0x1e>
 8004590:	080065a0 	.word	0x080065a0
 8004594:	080065a0 	.word	0x080065a0
 8004598:	080065a0 	.word	0x080065a0
 800459c:	080065a4 	.word	0x080065a4

080045a0 <__retarget_lock_init_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <__retarget_lock_acquire_recursive>:
 80045a2:	4770      	bx	lr

080045a4 <__retarget_lock_release_recursive>:
 80045a4:	4770      	bx	lr

080045a6 <quorem>:
 80045a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045aa:	6903      	ldr	r3, [r0, #16]
 80045ac:	690c      	ldr	r4, [r1, #16]
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	4607      	mov	r7, r0
 80045b2:	db7e      	blt.n	80046b2 <quorem+0x10c>
 80045b4:	3c01      	subs	r4, #1
 80045b6:	f101 0814 	add.w	r8, r1, #20
 80045ba:	00a3      	lsls	r3, r4, #2
 80045bc:	f100 0514 	add.w	r5, r0, #20
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045d0:	3301      	adds	r3, #1
 80045d2:	429a      	cmp	r2, r3
 80045d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80045dc:	d32e      	bcc.n	800463c <quorem+0x96>
 80045de:	f04f 0a00 	mov.w	sl, #0
 80045e2:	46c4      	mov	ip, r8
 80045e4:	46ae      	mov	lr, r5
 80045e6:	46d3      	mov	fp, sl
 80045e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80045ec:	b298      	uxth	r0, r3
 80045ee:	fb06 a000 	mla	r0, r6, r0, sl
 80045f2:	0c02      	lsrs	r2, r0, #16
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	fb06 2303 	mla	r3, r6, r3, r2
 80045fa:	f8de 2000 	ldr.w	r2, [lr]
 80045fe:	b280      	uxth	r0, r0
 8004600:	b292      	uxth	r2, r2
 8004602:	1a12      	subs	r2, r2, r0
 8004604:	445a      	add	r2, fp
 8004606:	f8de 0000 	ldr.w	r0, [lr]
 800460a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800460e:	b29b      	uxth	r3, r3
 8004610:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004614:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004618:	b292      	uxth	r2, r2
 800461a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800461e:	45e1      	cmp	r9, ip
 8004620:	f84e 2b04 	str.w	r2, [lr], #4
 8004624:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004628:	d2de      	bcs.n	80045e8 <quorem+0x42>
 800462a:	9b00      	ldr	r3, [sp, #0]
 800462c:	58eb      	ldr	r3, [r5, r3]
 800462e:	b92b      	cbnz	r3, 800463c <quorem+0x96>
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	3b04      	subs	r3, #4
 8004634:	429d      	cmp	r5, r3
 8004636:	461a      	mov	r2, r3
 8004638:	d32f      	bcc.n	800469a <quorem+0xf4>
 800463a:	613c      	str	r4, [r7, #16]
 800463c:	4638      	mov	r0, r7
 800463e:	f001 f97d 	bl	800593c <__mcmp>
 8004642:	2800      	cmp	r0, #0
 8004644:	db25      	blt.n	8004692 <quorem+0xec>
 8004646:	4629      	mov	r1, r5
 8004648:	2000      	movs	r0, #0
 800464a:	f858 2b04 	ldr.w	r2, [r8], #4
 800464e:	f8d1 c000 	ldr.w	ip, [r1]
 8004652:	fa1f fe82 	uxth.w	lr, r2
 8004656:	fa1f f38c 	uxth.w	r3, ip
 800465a:	eba3 030e 	sub.w	r3, r3, lr
 800465e:	4403      	add	r3, r0
 8004660:	0c12      	lsrs	r2, r2, #16
 8004662:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004666:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004670:	45c1      	cmp	r9, r8
 8004672:	f841 3b04 	str.w	r3, [r1], #4
 8004676:	ea4f 4022 	mov.w	r0, r2, asr #16
 800467a:	d2e6      	bcs.n	800464a <quorem+0xa4>
 800467c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004680:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004684:	b922      	cbnz	r2, 8004690 <quorem+0xea>
 8004686:	3b04      	subs	r3, #4
 8004688:	429d      	cmp	r5, r3
 800468a:	461a      	mov	r2, r3
 800468c:	d30b      	bcc.n	80046a6 <quorem+0x100>
 800468e:	613c      	str	r4, [r7, #16]
 8004690:	3601      	adds	r6, #1
 8004692:	4630      	mov	r0, r6
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	3b04      	subs	r3, #4
 800469e:	2a00      	cmp	r2, #0
 80046a0:	d1cb      	bne.n	800463a <quorem+0x94>
 80046a2:	3c01      	subs	r4, #1
 80046a4:	e7c6      	b.n	8004634 <quorem+0x8e>
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	3b04      	subs	r3, #4
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	d1ef      	bne.n	800468e <quorem+0xe8>
 80046ae:	3c01      	subs	r4, #1
 80046b0:	e7ea      	b.n	8004688 <quorem+0xe2>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e7ee      	b.n	8004694 <quorem+0xee>
	...

080046b8 <_dtoa_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	69c7      	ldr	r7, [r0, #28]
 80046be:	b097      	sub	sp, #92	@ 0x5c
 80046c0:	4614      	mov	r4, r2
 80046c2:	461d      	mov	r5, r3
 80046c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80046c8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80046ca:	4683      	mov	fp, r0
 80046cc:	b97f      	cbnz	r7, 80046ee <_dtoa_r+0x36>
 80046ce:	2010      	movs	r0, #16
 80046d0:	f000 fe04 	bl	80052dc <malloc>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80046da:	b920      	cbnz	r0, 80046e6 <_dtoa_r+0x2e>
 80046dc:	4ba8      	ldr	r3, [pc, #672]	@ (8004980 <_dtoa_r+0x2c8>)
 80046de:	21ef      	movs	r1, #239	@ 0xef
 80046e0:	48a8      	ldr	r0, [pc, #672]	@ (8004984 <_dtoa_r+0x2cc>)
 80046e2:	f001 fcbb 	bl	800605c <__assert_func>
 80046e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80046ea:	6007      	str	r7, [r0, #0]
 80046ec:	60c7      	str	r7, [r0, #12]
 80046ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	b159      	cbz	r1, 800470e <_dtoa_r+0x56>
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	604a      	str	r2, [r1, #4]
 80046fa:	2301      	movs	r3, #1
 80046fc:	4093      	lsls	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
 8004700:	4658      	mov	r0, fp
 8004702:	f000 fee1 	bl	80054c8 <_Bfree>
 8004706:	f8db 301c 	ldr.w	r3, [fp, #28]
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	1e2b      	subs	r3, r5, #0
 8004710:	bfb9      	ittee	lt
 8004712:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	9303      	strlt	r3, [sp, #12]
 8004718:	2300      	movge	r3, #0
 800471a:	6033      	strge	r3, [r6, #0]
 800471c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004720:	4b99      	ldr	r3, [pc, #612]	@ (8004988 <_dtoa_r+0x2d0>)
 8004722:	bfbc      	itt	lt
 8004724:	2201      	movlt	r2, #1
 8004726:	6032      	strlt	r2, [r6, #0]
 8004728:	ea33 0308 	bics.w	r3, r3, r8
 800472c:	d112      	bne.n	8004754 <_dtoa_r+0x9c>
 800472e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004730:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800473a:	4323      	orrs	r3, r4
 800473c:	f000 8551 	beq.w	80051e2 <_dtoa_r+0xb2a>
 8004740:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004742:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800498c <_dtoa_r+0x2d4>
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8553 	beq.w	80051f2 <_dtoa_r+0xb3a>
 800474c:	f10a 0303 	add.w	r3, sl, #3
 8004750:	f000 bd4d 	b.w	80051ee <_dtoa_r+0xb36>
 8004754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004758:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800475c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	2300      	movs	r3, #0
 8004764:	f7fc fa6c 	bl	8000c40 <__aeabi_dcmpeq>
 8004768:	4607      	mov	r7, r0
 800476a:	b158      	cbz	r0, 8004784 <_dtoa_r+0xcc>
 800476c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800476e:	2301      	movs	r3, #1
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004774:	b113      	cbz	r3, 800477c <_dtoa_r+0xc4>
 8004776:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004778:	4b85      	ldr	r3, [pc, #532]	@ (8004990 <_dtoa_r+0x2d8>)
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004994 <_dtoa_r+0x2dc>
 8004780:	f000 bd37 	b.w	80051f2 <_dtoa_r+0xb3a>
 8004784:	ab14      	add	r3, sp, #80	@ 0x50
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	ab15      	add	r3, sp, #84	@ 0x54
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4658      	mov	r0, fp
 800478e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004792:	f001 f981 	bl	8005a98 <__d2b>
 8004796:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800479a:	4681      	mov	r9, r0
 800479c:	2e00      	cmp	r6, #0
 800479e:	d076      	beq.n	800488e <_dtoa_r+0x1d6>
 80047a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047a2:	9712      	str	r7, [sp, #72]	@ 0x48
 80047a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80047b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80047b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80047b8:	4619      	mov	r1, r3
 80047ba:	2200      	movs	r2, #0
 80047bc:	4b76      	ldr	r3, [pc, #472]	@ (8004998 <_dtoa_r+0x2e0>)
 80047be:	f7fb fe1f 	bl	8000400 <__aeabi_dsub>
 80047c2:	a369      	add	r3, pc, #420	@ (adr r3, 8004968 <_dtoa_r+0x2b0>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb ffd2 	bl	8000770 <__aeabi_dmul>
 80047cc:	a368      	add	r3, pc, #416	@ (adr r3, 8004970 <_dtoa_r+0x2b8>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb fe17 	bl	8000404 <__adddf3>
 80047d6:	4604      	mov	r4, r0
 80047d8:	4630      	mov	r0, r6
 80047da:	460d      	mov	r5, r1
 80047dc:	f7fb ff5e 	bl	800069c <__aeabi_i2d>
 80047e0:	a365      	add	r3, pc, #404	@ (adr r3, 8004978 <_dtoa_r+0x2c0>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb ffc3 	bl	8000770 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fb fe07 	bl	8000404 <__adddf3>
 80047f6:	4604      	mov	r4, r0
 80047f8:	460d      	mov	r5, r1
 80047fa:	f7fc fa69 	bl	8000cd0 <__aeabi_d2iz>
 80047fe:	2200      	movs	r2, #0
 8004800:	4607      	mov	r7, r0
 8004802:	2300      	movs	r3, #0
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fc fa24 	bl	8000c54 <__aeabi_dcmplt>
 800480c:	b140      	cbz	r0, 8004820 <_dtoa_r+0x168>
 800480e:	4638      	mov	r0, r7
 8004810:	f7fb ff44 	bl	800069c <__aeabi_i2d>
 8004814:	4622      	mov	r2, r4
 8004816:	462b      	mov	r3, r5
 8004818:	f7fc fa12 	bl	8000c40 <__aeabi_dcmpeq>
 800481c:	b900      	cbnz	r0, 8004820 <_dtoa_r+0x168>
 800481e:	3f01      	subs	r7, #1
 8004820:	2f16      	cmp	r7, #22
 8004822:	d852      	bhi.n	80048ca <_dtoa_r+0x212>
 8004824:	4b5d      	ldr	r3, [pc, #372]	@ (800499c <_dtoa_r+0x2e4>)
 8004826:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004832:	f7fc fa0f 	bl	8000c54 <__aeabi_dcmplt>
 8004836:	2800      	cmp	r0, #0
 8004838:	d049      	beq.n	80048ce <_dtoa_r+0x216>
 800483a:	3f01      	subs	r7, #1
 800483c:	2300      	movs	r3, #0
 800483e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004840:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004842:	1b9b      	subs	r3, r3, r6
 8004844:	1e5a      	subs	r2, r3, #1
 8004846:	bf44      	itt	mi
 8004848:	f1c3 0801 	rsbmi	r8, r3, #1
 800484c:	2300      	movmi	r3, #0
 800484e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004850:	bf54      	ite	pl
 8004852:	f04f 0800 	movpl.w	r8, #0
 8004856:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004858:	2f00      	cmp	r7, #0
 800485a:	db3a      	blt.n	80048d2 <_dtoa_r+0x21a>
 800485c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800485e:	970e      	str	r7, [sp, #56]	@ 0x38
 8004860:	443b      	add	r3, r7
 8004862:	9309      	str	r3, [sp, #36]	@ 0x24
 8004864:	2300      	movs	r3, #0
 8004866:	930a      	str	r3, [sp, #40]	@ 0x28
 8004868:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800486a:	2b09      	cmp	r3, #9
 800486c:	d865      	bhi.n	800493a <_dtoa_r+0x282>
 800486e:	2b05      	cmp	r3, #5
 8004870:	bfc4      	itt	gt
 8004872:	3b04      	subgt	r3, #4
 8004874:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004878:	f1a3 0302 	sub.w	r3, r3, #2
 800487c:	bfcc      	ite	gt
 800487e:	2400      	movgt	r4, #0
 8004880:	2401      	movle	r4, #1
 8004882:	2b03      	cmp	r3, #3
 8004884:	d864      	bhi.n	8004950 <_dtoa_r+0x298>
 8004886:	e8df f003 	tbb	[pc, r3]
 800488a:	382b      	.short	0x382b
 800488c:	5636      	.short	0x5636
 800488e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004892:	441e      	add	r6, r3
 8004894:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004898:	2b20      	cmp	r3, #32
 800489a:	bfc1      	itttt	gt
 800489c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80048a0:	fa08 f803 	lslgt.w	r8, r8, r3
 80048a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80048a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80048ac:	bfd6      	itet	le
 80048ae:	f1c3 0320 	rsble	r3, r3, #32
 80048b2:	ea48 0003 	orrgt.w	r0, r8, r3
 80048b6:	fa04 f003 	lslle.w	r0, r4, r3
 80048ba:	f7fb fedf 	bl	800067c <__aeabi_ui2d>
 80048be:	2201      	movs	r2, #1
 80048c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80048c4:	3e01      	subs	r6, #1
 80048c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80048c8:	e776      	b.n	80047b8 <_dtoa_r+0x100>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e7b7      	b.n	800483e <_dtoa_r+0x186>
 80048ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80048d0:	e7b6      	b.n	8004840 <_dtoa_r+0x188>
 80048d2:	427b      	negs	r3, r7
 80048d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80048d6:	2300      	movs	r3, #0
 80048d8:	eba8 0807 	sub.w	r8, r8, r7
 80048dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80048de:	e7c3      	b.n	8004868 <_dtoa_r+0x1b0>
 80048e0:	2300      	movs	r3, #0
 80048e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	dc35      	bgt.n	8004956 <_dtoa_r+0x29e>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80048f0:	461a      	mov	r2, r3
 80048f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80048f4:	e00b      	b.n	800490e <_dtoa_r+0x256>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7f3      	b.n	80048e2 <_dtoa_r+0x22a>
 80048fa:	2300      	movs	r3, #0
 80048fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	9308      	str	r3, [sp, #32]
 8004904:	3301      	adds	r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	9307      	str	r3, [sp, #28]
 800490a:	bfb8      	it	lt
 800490c:	2301      	movlt	r3, #1
 800490e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004912:	2100      	movs	r1, #0
 8004914:	2204      	movs	r2, #4
 8004916:	f102 0514 	add.w	r5, r2, #20
 800491a:	429d      	cmp	r5, r3
 800491c:	d91f      	bls.n	800495e <_dtoa_r+0x2a6>
 800491e:	6041      	str	r1, [r0, #4]
 8004920:	4658      	mov	r0, fp
 8004922:	f000 fd91 	bl	8005448 <_Balloc>
 8004926:	4682      	mov	sl, r0
 8004928:	2800      	cmp	r0, #0
 800492a:	d13b      	bne.n	80049a4 <_dtoa_r+0x2ec>
 800492c:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <_dtoa_r+0x2e8>)
 800492e:	4602      	mov	r2, r0
 8004930:	f240 11af 	movw	r1, #431	@ 0x1af
 8004934:	e6d4      	b.n	80046e0 <_dtoa_r+0x28>
 8004936:	2301      	movs	r3, #1
 8004938:	e7e0      	b.n	80048fc <_dtoa_r+0x244>
 800493a:	2401      	movs	r4, #1
 800493c:	2300      	movs	r3, #0
 800493e:	9320      	str	r3, [sp, #128]	@ 0x80
 8004940:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004946:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800494a:	2200      	movs	r2, #0
 800494c:	2312      	movs	r3, #18
 800494e:	e7d0      	b.n	80048f2 <_dtoa_r+0x23a>
 8004950:	2301      	movs	r3, #1
 8004952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004954:	e7f5      	b.n	8004942 <_dtoa_r+0x28a>
 8004956:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004958:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800495c:	e7d7      	b.n	800490e <_dtoa_r+0x256>
 800495e:	3101      	adds	r1, #1
 8004960:	0052      	lsls	r2, r2, #1
 8004962:	e7d8      	b.n	8004916 <_dtoa_r+0x25e>
 8004964:	f3af 8000 	nop.w
 8004968:	636f4361 	.word	0x636f4361
 800496c:	3fd287a7 	.word	0x3fd287a7
 8004970:	8b60c8b3 	.word	0x8b60c8b3
 8004974:	3fc68a28 	.word	0x3fc68a28
 8004978:	509f79fb 	.word	0x509f79fb
 800497c:	3fd34413 	.word	0x3fd34413
 8004980:	08006265 	.word	0x08006265
 8004984:	0800627c 	.word	0x0800627c
 8004988:	7ff00000 	.word	0x7ff00000
 800498c:	08006261 	.word	0x08006261
 8004990:	08006235 	.word	0x08006235
 8004994:	08006234 	.word	0x08006234
 8004998:	3ff80000 	.word	0x3ff80000
 800499c:	08006378 	.word	0x08006378
 80049a0:	080062d4 	.word	0x080062d4
 80049a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049a8:	6018      	str	r0, [r3, #0]
 80049aa:	9b07      	ldr	r3, [sp, #28]
 80049ac:	2b0e      	cmp	r3, #14
 80049ae:	f200 80a4 	bhi.w	8004afa <_dtoa_r+0x442>
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	f000 80a1 	beq.w	8004afa <_dtoa_r+0x442>
 80049b8:	2f00      	cmp	r7, #0
 80049ba:	dd33      	ble.n	8004a24 <_dtoa_r+0x36c>
 80049bc:	4b86      	ldr	r3, [pc, #536]	@ (8004bd8 <_dtoa_r+0x520>)
 80049be:	f007 020f 	and.w	r2, r7, #15
 80049c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049ca:	05f8      	lsls	r0, r7, #23
 80049cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80049d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80049d4:	d516      	bpl.n	8004a04 <_dtoa_r+0x34c>
 80049d6:	4b81      	ldr	r3, [pc, #516]	@ (8004bdc <_dtoa_r+0x524>)
 80049d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049e0:	f7fb fff0 	bl	80009c4 <__aeabi_ddiv>
 80049e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049e8:	f004 040f 	and.w	r4, r4, #15
 80049ec:	2603      	movs	r6, #3
 80049ee:	4d7b      	ldr	r5, [pc, #492]	@ (8004bdc <_dtoa_r+0x524>)
 80049f0:	b954      	cbnz	r4, 8004a08 <_dtoa_r+0x350>
 80049f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049fa:	f7fb ffe3 	bl	80009c4 <__aeabi_ddiv>
 80049fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a02:	e028      	b.n	8004a56 <_dtoa_r+0x39e>
 8004a04:	2602      	movs	r6, #2
 8004a06:	e7f2      	b.n	80049ee <_dtoa_r+0x336>
 8004a08:	07e1      	lsls	r1, r4, #31
 8004a0a:	d508      	bpl.n	8004a1e <_dtoa_r+0x366>
 8004a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a14:	f7fb feac 	bl	8000770 <__aeabi_dmul>
 8004a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	1064      	asrs	r4, r4, #1
 8004a20:	3508      	adds	r5, #8
 8004a22:	e7e5      	b.n	80049f0 <_dtoa_r+0x338>
 8004a24:	f000 80d2 	beq.w	8004bcc <_dtoa_r+0x514>
 8004a28:	427c      	negs	r4, r7
 8004a2a:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd8 <_dtoa_r+0x520>)
 8004a2c:	4d6b      	ldr	r5, [pc, #428]	@ (8004bdc <_dtoa_r+0x524>)
 8004a2e:	f004 020f 	and.w	r2, r4, #15
 8004a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a3e:	f7fb fe97 	bl	8000770 <__aeabi_dmul>
 8004a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a46:	1124      	asrs	r4, r4, #4
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2602      	movs	r6, #2
 8004a4c:	2c00      	cmp	r4, #0
 8004a4e:	f040 80b2 	bne.w	8004bb6 <_dtoa_r+0x4fe>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1d3      	bne.n	80049fe <_dtoa_r+0x346>
 8004a56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80b7 	beq.w	8004bd0 <_dtoa_r+0x518>
 8004a62:	4b5f      	ldr	r3, [pc, #380]	@ (8004be0 <_dtoa_r+0x528>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	4620      	mov	r0, r4
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f7fc f8f3 	bl	8000c54 <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f000 80ae 	beq.w	8004bd0 <_dtoa_r+0x518>
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80aa 	beq.w	8004bd0 <_dtoa_r+0x518>
 8004a7c:	9b08      	ldr	r3, [sp, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dd37      	ble.n	8004af2 <_dtoa_r+0x43a>
 8004a82:	1e7b      	subs	r3, r7, #1
 8004a84:	9304      	str	r3, [sp, #16]
 8004a86:	4620      	mov	r0, r4
 8004a88:	4b56      	ldr	r3, [pc, #344]	@ (8004be4 <_dtoa_r+0x52c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fb fe6f 	bl	8000770 <__aeabi_dmul>
 8004a92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a96:	9c08      	ldr	r4, [sp, #32]
 8004a98:	3601      	adds	r6, #1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7fb fdfe 	bl	800069c <__aeabi_i2d>
 8004aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004aa4:	f7fb fe64 	bl	8000770 <__aeabi_dmul>
 8004aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8004be8 <_dtoa_r+0x530>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f7fb fcaa 	bl	8000404 <__adddf3>
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ab6:	2c00      	cmp	r4, #0
 8004ab8:	f040 809a 	bne.w	8004bf0 <_dtoa_r+0x538>
 8004abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <_dtoa_r+0x534>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f7fb fc9c 	bl	8000400 <__aeabi_dsub>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ad0:	462a      	mov	r2, r5
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	f7fc f8dc 	bl	8000c90 <__aeabi_dcmpgt>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	f040 828e 	bne.w	8004ffa <_dtoa_r+0x942>
 8004ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ae8:	f7fc f8b4 	bl	8000c54 <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f040 8127 	bne.w	8004d40 <_dtoa_r+0x688>
 8004af2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004af6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004afa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f2c0 8163 	blt.w	8004dc8 <_dtoa_r+0x710>
 8004b02:	2f0e      	cmp	r7, #14
 8004b04:	f300 8160 	bgt.w	8004dc8 <_dtoa_r+0x710>
 8004b08:	4b33      	ldr	r3, [pc, #204]	@ (8004bd8 <_dtoa_r+0x520>)
 8004b0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da03      	bge.n	8004b24 <_dtoa_r+0x46c>
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f340 8100 	ble.w	8004d24 <_dtoa_r+0x66c>
 8004b24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b28:	4656      	mov	r6, sl
 8004b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f7fb ff47 	bl	80009c4 <__aeabi_ddiv>
 8004b36:	f7fc f8cb 	bl	8000cd0 <__aeabi_d2iz>
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	f7fb fdae 	bl	800069c <__aeabi_i2d>
 8004b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b44:	f7fb fe14 	bl	8000770 <__aeabi_dmul>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b54:	f7fb fc54 	bl	8000400 <__aeabi_dsub>
 8004b58:	f806 4b01 	strb.w	r4, [r6], #1
 8004b5c:	9d07      	ldr	r5, [sp, #28]
 8004b5e:	eba6 040a 	sub.w	r4, r6, sl
 8004b62:	42a5      	cmp	r5, r4
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	f040 8116 	bne.w	8004d98 <_dtoa_r+0x6e0>
 8004b6c:	f7fb fc4a 	bl	8000404 <__adddf3>
 8004b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b74:	4604      	mov	r4, r0
 8004b76:	460d      	mov	r5, r1
 8004b78:	f7fc f88a 	bl	8000c90 <__aeabi_dcmpgt>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f040 80f8 	bne.w	8004d72 <_dtoa_r+0x6ba>
 8004b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b86:	4620      	mov	r0, r4
 8004b88:	4629      	mov	r1, r5
 8004b8a:	f7fc f859 	bl	8000c40 <__aeabi_dcmpeq>
 8004b8e:	b118      	cbz	r0, 8004b98 <_dtoa_r+0x4e0>
 8004b90:	f018 0f01 	tst.w	r8, #1
 8004b94:	f040 80ed 	bne.w	8004d72 <_dtoa_r+0x6ba>
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4658      	mov	r0, fp
 8004b9c:	f000 fc94 	bl	80054c8 <_Bfree>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	7033      	strb	r3, [r6, #0]
 8004ba4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ba6:	3701      	adds	r7, #1
 8004ba8:	601f      	str	r7, [r3, #0]
 8004baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8320 	beq.w	80051f2 <_dtoa_r+0xb3a>
 8004bb2:	601e      	str	r6, [r3, #0]
 8004bb4:	e31d      	b.n	80051f2 <_dtoa_r+0xb3a>
 8004bb6:	07e2      	lsls	r2, r4, #31
 8004bb8:	d505      	bpl.n	8004bc6 <_dtoa_r+0x50e>
 8004bba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bbe:	f7fb fdd7 	bl	8000770 <__aeabi_dmul>
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	1064      	asrs	r4, r4, #1
 8004bc8:	3508      	adds	r5, #8
 8004bca:	e73f      	b.n	8004a4c <_dtoa_r+0x394>
 8004bcc:	2602      	movs	r6, #2
 8004bce:	e742      	b.n	8004a56 <_dtoa_r+0x39e>
 8004bd0:	9c07      	ldr	r4, [sp, #28]
 8004bd2:	9704      	str	r7, [sp, #16]
 8004bd4:	e761      	b.n	8004a9a <_dtoa_r+0x3e2>
 8004bd6:	bf00      	nop
 8004bd8:	08006378 	.word	0x08006378
 8004bdc:	08006350 	.word	0x08006350
 8004be0:	3ff00000 	.word	0x3ff00000
 8004be4:	40240000 	.word	0x40240000
 8004be8:	401c0000 	.word	0x401c0000
 8004bec:	40140000 	.word	0x40140000
 8004bf0:	4b70      	ldr	r3, [pc, #448]	@ (8004db4 <_dtoa_r+0x6fc>)
 8004bf2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004bf4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bf8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bfc:	4454      	add	r4, sl
 8004bfe:	2900      	cmp	r1, #0
 8004c00:	d045      	beq.n	8004c8e <_dtoa_r+0x5d6>
 8004c02:	496d      	ldr	r1, [pc, #436]	@ (8004db8 <_dtoa_r+0x700>)
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fb fedd 	bl	80009c4 <__aeabi_ddiv>
 8004c0a:	4633      	mov	r3, r6
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	f7fb fbf7 	bl	8000400 <__aeabi_dsub>
 8004c12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c16:	4656      	mov	r6, sl
 8004c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c1c:	f7fc f858 	bl	8000cd0 <__aeabi_d2iz>
 8004c20:	4605      	mov	r5, r0
 8004c22:	f7fb fd3b 	bl	800069c <__aeabi_i2d>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c2e:	f7fb fbe7 	bl	8000400 <__aeabi_dsub>
 8004c32:	3530      	adds	r5, #48	@ 0x30
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c44:	f7fc f806 	bl	8000c54 <__aeabi_dcmplt>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d163      	bne.n	8004d14 <_dtoa_r+0x65c>
 8004c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c50:	495a      	ldr	r1, [pc, #360]	@ (8004dbc <_dtoa_r+0x704>)
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7fb fbd4 	bl	8000400 <__aeabi_dsub>
 8004c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c5c:	f7fb fffa 	bl	8000c54 <__aeabi_dcmplt>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	f040 8087 	bne.w	8004d74 <_dtoa_r+0x6bc>
 8004c66:	42a6      	cmp	r6, r4
 8004c68:	f43f af43 	beq.w	8004af2 <_dtoa_r+0x43a>
 8004c6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c70:	4b53      	ldr	r3, [pc, #332]	@ (8004dc0 <_dtoa_r+0x708>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	f7fb fd7c 	bl	8000770 <__aeabi_dmul>
 8004c78:	4b51      	ldr	r3, [pc, #324]	@ (8004dc0 <_dtoa_r+0x708>)
 8004c7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c7e:	2200      	movs	r2, #0
 8004c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c84:	f7fb fd74 	bl	8000770 <__aeabi_dmul>
 8004c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c8c:	e7c4      	b.n	8004c18 <_dtoa_r+0x560>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7fb fd6d 	bl	8000770 <__aeabi_dmul>
 8004c96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004c9c:	4656      	mov	r6, sl
 8004c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ca2:	f7fc f815 	bl	8000cd0 <__aeabi_d2iz>
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	f7fb fcf8 	bl	800069c <__aeabi_i2d>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cb4:	f7fb fba4 	bl	8000400 <__aeabi_dsub>
 8004cb8:	3530      	adds	r5, #48	@ 0x30
 8004cba:	f806 5b01 	strb.w	r5, [r6], #1
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	42a6      	cmp	r6, r4
 8004cc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	d124      	bne.n	8004d18 <_dtoa_r+0x660>
 8004cce:	4b3a      	ldr	r3, [pc, #232]	@ (8004db8 <_dtoa_r+0x700>)
 8004cd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cd4:	f7fb fb96 	bl	8000404 <__adddf3>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ce0:	f7fb ffd6 	bl	8000c90 <__aeabi_dcmpgt>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d145      	bne.n	8004d74 <_dtoa_r+0x6bc>
 8004ce8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cec:	4932      	ldr	r1, [pc, #200]	@ (8004db8 <_dtoa_r+0x700>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb fb86 	bl	8000400 <__aeabi_dsub>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cfc:	f7fb ffaa 	bl	8000c54 <__aeabi_dcmplt>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f43f aef6 	beq.w	8004af2 <_dtoa_r+0x43a>
 8004d06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004d08:	1e73      	subs	r3, r6, #1
 8004d0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d10:	2b30      	cmp	r3, #48	@ 0x30
 8004d12:	d0f8      	beq.n	8004d06 <_dtoa_r+0x64e>
 8004d14:	9f04      	ldr	r7, [sp, #16]
 8004d16:	e73f      	b.n	8004b98 <_dtoa_r+0x4e0>
 8004d18:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <_dtoa_r+0x708>)
 8004d1a:	f7fb fd29 	bl	8000770 <__aeabi_dmul>
 8004d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d22:	e7bc      	b.n	8004c9e <_dtoa_r+0x5e6>
 8004d24:	d10c      	bne.n	8004d40 <_dtoa_r+0x688>
 8004d26:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <_dtoa_r+0x70c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d2e:	f7fb fd1f 	bl	8000770 <__aeabi_dmul>
 8004d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d36:	f7fb ffa1 	bl	8000c7c <__aeabi_dcmpge>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f000 815b 	beq.w	8004ff6 <_dtoa_r+0x93e>
 8004d40:	2400      	movs	r4, #0
 8004d42:	4625      	mov	r5, r4
 8004d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d46:	43db      	mvns	r3, r3
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	4656      	mov	r6, sl
 8004d4c:	2700      	movs	r7, #0
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4658      	mov	r0, fp
 8004d52:	f000 fbb9 	bl	80054c8 <_Bfree>
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	d0dc      	beq.n	8004d14 <_dtoa_r+0x65c>
 8004d5a:	b12f      	cbz	r7, 8004d68 <_dtoa_r+0x6b0>
 8004d5c:	42af      	cmp	r7, r5
 8004d5e:	d003      	beq.n	8004d68 <_dtoa_r+0x6b0>
 8004d60:	4639      	mov	r1, r7
 8004d62:	4658      	mov	r0, fp
 8004d64:	f000 fbb0 	bl	80054c8 <_Bfree>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4658      	mov	r0, fp
 8004d6c:	f000 fbac 	bl	80054c8 <_Bfree>
 8004d70:	e7d0      	b.n	8004d14 <_dtoa_r+0x65c>
 8004d72:	9704      	str	r7, [sp, #16]
 8004d74:	4633      	mov	r3, r6
 8004d76:	461e      	mov	r6, r3
 8004d78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d7c:	2a39      	cmp	r2, #57	@ 0x39
 8004d7e:	d107      	bne.n	8004d90 <_dtoa_r+0x6d8>
 8004d80:	459a      	cmp	sl, r3
 8004d82:	d1f8      	bne.n	8004d76 <_dtoa_r+0x6be>
 8004d84:	9a04      	ldr	r2, [sp, #16]
 8004d86:	3201      	adds	r2, #1
 8004d88:	9204      	str	r2, [sp, #16]
 8004d8a:	2230      	movs	r2, #48	@ 0x30
 8004d8c:	f88a 2000 	strb.w	r2, [sl]
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	3201      	adds	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	e7bd      	b.n	8004d14 <_dtoa_r+0x65c>
 8004d98:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <_dtoa_r+0x708>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f7fb fce8 	bl	8000770 <__aeabi_dmul>
 8004da0:	2200      	movs	r2, #0
 8004da2:	2300      	movs	r3, #0
 8004da4:	4604      	mov	r4, r0
 8004da6:	460d      	mov	r5, r1
 8004da8:	f7fb ff4a 	bl	8000c40 <__aeabi_dcmpeq>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f43f aebc 	beq.w	8004b2a <_dtoa_r+0x472>
 8004db2:	e6f1      	b.n	8004b98 <_dtoa_r+0x4e0>
 8004db4:	08006378 	.word	0x08006378
 8004db8:	3fe00000 	.word	0x3fe00000
 8004dbc:	3ff00000 	.word	0x3ff00000
 8004dc0:	40240000 	.word	0x40240000
 8004dc4:	40140000 	.word	0x40140000
 8004dc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004dca:	2a00      	cmp	r2, #0
 8004dcc:	f000 80db 	beq.w	8004f86 <_dtoa_r+0x8ce>
 8004dd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004dd2:	2a01      	cmp	r2, #1
 8004dd4:	f300 80bf 	bgt.w	8004f56 <_dtoa_r+0x89e>
 8004dd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	f000 80b7 	beq.w	8004f4e <_dtoa_r+0x896>
 8004de0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004de4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004de6:	4646      	mov	r6, r8
 8004de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dea:	2101      	movs	r1, #1
 8004dec:	441a      	add	r2, r3
 8004dee:	4658      	mov	r0, fp
 8004df0:	4498      	add	r8, r3
 8004df2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004df4:	f000 fc1c 	bl	8005630 <__i2b>
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b15e      	cbz	r6, 8004e14 <_dtoa_r+0x75c>
 8004dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dd08      	ble.n	8004e14 <_dtoa_r+0x75c>
 8004e02:	42b3      	cmp	r3, r6
 8004e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e06:	bfa8      	it	ge
 8004e08:	4633      	movge	r3, r6
 8004e0a:	eba8 0803 	sub.w	r8, r8, r3
 8004e0e:	1af6      	subs	r6, r6, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e16:	b1f3      	cbz	r3, 8004e56 <_dtoa_r+0x79e>
 8004e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80b7 	beq.w	8004f8e <_dtoa_r+0x8d6>
 8004e20:	b18c      	cbz	r4, 8004e46 <_dtoa_r+0x78e>
 8004e22:	4629      	mov	r1, r5
 8004e24:	4622      	mov	r2, r4
 8004e26:	4658      	mov	r0, fp
 8004e28:	f000 fcc2 	bl	80057b0 <__pow5mult>
 8004e2c:	464a      	mov	r2, r9
 8004e2e:	4601      	mov	r1, r0
 8004e30:	4605      	mov	r5, r0
 8004e32:	4658      	mov	r0, fp
 8004e34:	f000 fc12 	bl	800565c <__multiply>
 8004e38:	4649      	mov	r1, r9
 8004e3a:	9004      	str	r0, [sp, #16]
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	f000 fb43 	bl	80054c8 <_Bfree>
 8004e42:	9b04      	ldr	r3, [sp, #16]
 8004e44:	4699      	mov	r9, r3
 8004e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e48:	1b1a      	subs	r2, r3, r4
 8004e4a:	d004      	beq.n	8004e56 <_dtoa_r+0x79e>
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	4658      	mov	r0, fp
 8004e50:	f000 fcae 	bl	80057b0 <__pow5mult>
 8004e54:	4681      	mov	r9, r0
 8004e56:	2101      	movs	r1, #1
 8004e58:	4658      	mov	r0, fp
 8004e5a:	f000 fbe9 	bl	8005630 <__i2b>
 8004e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e60:	4604      	mov	r4, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 81c9 	beq.w	80051fa <_dtoa_r+0xb42>
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f000 fc9f 	bl	80057b0 <__pow5mult>
 8004e72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	4604      	mov	r4, r0
 8004e78:	f300 808f 	bgt.w	8004f9a <_dtoa_r+0x8e2>
 8004e7c:	9b02      	ldr	r3, [sp, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 8087 	bne.w	8004f92 <_dtoa_r+0x8da>
 8004e84:	9b03      	ldr	r3, [sp, #12]
 8004e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f040 8083 	bne.w	8004f96 <_dtoa_r+0x8de>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	b12b      	cbz	r3, 8004ea8 <_dtoa_r+0x7f0>
 8004e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea2:	f108 0801 	add.w	r8, r8, #1
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 81aa 	beq.w	8005206 <_dtoa_r+0xb4e>
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004eb8:	6918      	ldr	r0, [r3, #16]
 8004eba:	f000 fb6d 	bl	8005598 <__hi0bits>
 8004ebe:	f1c0 0020 	rsb	r0, r0, #32
 8004ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec4:	4418      	add	r0, r3
 8004ec6:	f010 001f 	ands.w	r0, r0, #31
 8004eca:	d071      	beq.n	8004fb0 <_dtoa_r+0x8f8>
 8004ecc:	f1c0 0320 	rsb	r3, r0, #32
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	dd65      	ble.n	8004fa0 <_dtoa_r+0x8e8>
 8004ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed6:	f1c0 001c 	rsb	r0, r0, #28
 8004eda:	4403      	add	r3, r0
 8004edc:	4480      	add	r8, r0
 8004ede:	4406      	add	r6, r0
 8004ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee2:	f1b8 0f00 	cmp.w	r8, #0
 8004ee6:	dd05      	ble.n	8004ef4 <_dtoa_r+0x83c>
 8004ee8:	4649      	mov	r1, r9
 8004eea:	4642      	mov	r2, r8
 8004eec:	4658      	mov	r0, fp
 8004eee:	f000 fcb9 	bl	8005864 <__lshift>
 8004ef2:	4681      	mov	r9, r0
 8004ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dd05      	ble.n	8004f06 <_dtoa_r+0x84e>
 8004efa:	4621      	mov	r1, r4
 8004efc:	461a      	mov	r2, r3
 8004efe:	4658      	mov	r0, fp
 8004f00:	f000 fcb0 	bl	8005864 <__lshift>
 8004f04:	4604      	mov	r4, r0
 8004f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d053      	beq.n	8004fb4 <_dtoa_r+0x8fc>
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4648      	mov	r0, r9
 8004f10:	f000 fd14 	bl	800593c <__mcmp>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	da4d      	bge.n	8004fb4 <_dtoa_r+0x8fc>
 8004f18:	1e7b      	subs	r3, r7, #1
 8004f1a:	9304      	str	r3, [sp, #16]
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	2300      	movs	r3, #0
 8004f20:	220a      	movs	r2, #10
 8004f22:	4658      	mov	r0, fp
 8004f24:	f000 faf2 	bl	800550c <__multadd>
 8004f28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 816c 	beq.w	800520a <_dtoa_r+0xb52>
 8004f32:	2300      	movs	r3, #0
 8004f34:	4629      	mov	r1, r5
 8004f36:	220a      	movs	r2, #10
 8004f38:	4658      	mov	r0, fp
 8004f3a:	f000 fae7 	bl	800550c <__multadd>
 8004f3e:	9b08      	ldr	r3, [sp, #32]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	4605      	mov	r5, r0
 8004f44:	dc61      	bgt.n	800500a <_dtoa_r+0x952>
 8004f46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	dc3b      	bgt.n	8004fc4 <_dtoa_r+0x90c>
 8004f4c:	e05d      	b.n	800500a <_dtoa_r+0x952>
 8004f4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004f54:	e746      	b.n	8004de4 <_dtoa_r+0x72c>
 8004f56:	9b07      	ldr	r3, [sp, #28]
 8004f58:	1e5c      	subs	r4, r3, #1
 8004f5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	bfbf      	itttt	lt
 8004f60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004f62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004f64:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004f66:	1ae3      	sublt	r3, r4, r3
 8004f68:	bfb4      	ite	lt
 8004f6a:	18d2      	addlt	r2, r2, r3
 8004f6c:	1b1c      	subge	r4, r3, r4
 8004f6e:	9b07      	ldr	r3, [sp, #28]
 8004f70:	bfbc      	itt	lt
 8004f72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004f74:	2400      	movlt	r4, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb5      	itete	lt
 8004f7a:	eba8 0603 	sublt.w	r6, r8, r3
 8004f7e:	9b07      	ldrge	r3, [sp, #28]
 8004f80:	2300      	movlt	r3, #0
 8004f82:	4646      	movge	r6, r8
 8004f84:	e730      	b.n	8004de8 <_dtoa_r+0x730>
 8004f86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f88:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004f8a:	4646      	mov	r6, r8
 8004f8c:	e735      	b.n	8004dfa <_dtoa_r+0x742>
 8004f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f90:	e75c      	b.n	8004e4c <_dtoa_r+0x794>
 8004f92:	2300      	movs	r3, #0
 8004f94:	e788      	b.n	8004ea8 <_dtoa_r+0x7f0>
 8004f96:	9b02      	ldr	r3, [sp, #8]
 8004f98:	e786      	b.n	8004ea8 <_dtoa_r+0x7f0>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f9e:	e788      	b.n	8004eb2 <_dtoa_r+0x7fa>
 8004fa0:	d09f      	beq.n	8004ee2 <_dtoa_r+0x82a>
 8004fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fa4:	331c      	adds	r3, #28
 8004fa6:	441a      	add	r2, r3
 8004fa8:	4498      	add	r8, r3
 8004faa:	441e      	add	r6, r3
 8004fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fae:	e798      	b.n	8004ee2 <_dtoa_r+0x82a>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	e7f6      	b.n	8004fa2 <_dtoa_r+0x8ea>
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	9704      	str	r7, [sp, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dc20      	bgt.n	8004ffe <_dtoa_r+0x946>
 8004fbc:	9308      	str	r3, [sp, #32]
 8004fbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	dd1e      	ble.n	8005002 <_dtoa_r+0x94a>
 8004fc4:	9b08      	ldr	r3, [sp, #32]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f47f aebc 	bne.w	8004d44 <_dtoa_r+0x68c>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	2205      	movs	r2, #5
 8004fd0:	4658      	mov	r0, fp
 8004fd2:	f000 fa9b 	bl	800550c <__multadd>
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	4604      	mov	r4, r0
 8004fda:	4648      	mov	r0, r9
 8004fdc:	f000 fcae 	bl	800593c <__mcmp>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	f77f aeaf 	ble.w	8004d44 <_dtoa_r+0x68c>
 8004fe6:	4656      	mov	r6, sl
 8004fe8:	2331      	movs	r3, #49	@ 0x31
 8004fea:	f806 3b01 	strb.w	r3, [r6], #1
 8004fee:	9b04      	ldr	r3, [sp, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	e6aa      	b.n	8004d4c <_dtoa_r+0x694>
 8004ff6:	9c07      	ldr	r4, [sp, #28]
 8004ff8:	9704      	str	r7, [sp, #16]
 8004ffa:	4625      	mov	r5, r4
 8004ffc:	e7f3      	b.n	8004fe6 <_dtoa_r+0x92e>
 8004ffe:	9b07      	ldr	r3, [sp, #28]
 8005000:	9308      	str	r3, [sp, #32]
 8005002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8104 	beq.w	8005212 <_dtoa_r+0xb5a>
 800500a:	2e00      	cmp	r6, #0
 800500c:	dd05      	ble.n	800501a <_dtoa_r+0x962>
 800500e:	4629      	mov	r1, r5
 8005010:	4632      	mov	r2, r6
 8005012:	4658      	mov	r0, fp
 8005014:	f000 fc26 	bl	8005864 <__lshift>
 8005018:	4605      	mov	r5, r0
 800501a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d05a      	beq.n	80050d6 <_dtoa_r+0xa1e>
 8005020:	6869      	ldr	r1, [r5, #4]
 8005022:	4658      	mov	r0, fp
 8005024:	f000 fa10 	bl	8005448 <_Balloc>
 8005028:	4606      	mov	r6, r0
 800502a:	b928      	cbnz	r0, 8005038 <_dtoa_r+0x980>
 800502c:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <_dtoa_r+0xb88>)
 800502e:	4602      	mov	r2, r0
 8005030:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005034:	f7ff bb54 	b.w	80046e0 <_dtoa_r+0x28>
 8005038:	692a      	ldr	r2, [r5, #16]
 800503a:	3202      	adds	r2, #2
 800503c:	0092      	lsls	r2, r2, #2
 800503e:	f105 010c 	add.w	r1, r5, #12
 8005042:	300c      	adds	r0, #12
 8005044:	f000 fffc 	bl	8006040 <memcpy>
 8005048:	2201      	movs	r2, #1
 800504a:	4631      	mov	r1, r6
 800504c:	4658      	mov	r0, fp
 800504e:	f000 fc09 	bl	8005864 <__lshift>
 8005052:	f10a 0301 	add.w	r3, sl, #1
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	9b08      	ldr	r3, [sp, #32]
 800505a:	4453      	add	r3, sl
 800505c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800505e:	9b02      	ldr	r3, [sp, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	462f      	mov	r7, r5
 8005066:	930a      	str	r3, [sp, #40]	@ 0x28
 8005068:	4605      	mov	r5, r0
 800506a:	9b07      	ldr	r3, [sp, #28]
 800506c:	4621      	mov	r1, r4
 800506e:	3b01      	subs	r3, #1
 8005070:	4648      	mov	r0, r9
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	f7ff fa97 	bl	80045a6 <quorem>
 8005078:	4639      	mov	r1, r7
 800507a:	9008      	str	r0, [sp, #32]
 800507c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005080:	4648      	mov	r0, r9
 8005082:	f000 fc5b 	bl	800593c <__mcmp>
 8005086:	462a      	mov	r2, r5
 8005088:	9009      	str	r0, [sp, #36]	@ 0x24
 800508a:	4621      	mov	r1, r4
 800508c:	4658      	mov	r0, fp
 800508e:	f000 fc71 	bl	8005974 <__mdiff>
 8005092:	68c2      	ldr	r2, [r0, #12]
 8005094:	4606      	mov	r6, r0
 8005096:	bb02      	cbnz	r2, 80050da <_dtoa_r+0xa22>
 8005098:	4601      	mov	r1, r0
 800509a:	4648      	mov	r0, r9
 800509c:	f000 fc4e 	bl	800593c <__mcmp>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4631      	mov	r1, r6
 80050a4:	4658      	mov	r0, fp
 80050a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80050a8:	f000 fa0e 	bl	80054c8 <_Bfree>
 80050ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80050b0:	9e07      	ldr	r6, [sp, #28]
 80050b2:	ea43 0102 	orr.w	r1, r3, r2
 80050b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050b8:	4319      	orrs	r1, r3
 80050ba:	d110      	bne.n	80050de <_dtoa_r+0xa26>
 80050bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050c0:	d029      	beq.n	8005116 <_dtoa_r+0xa5e>
 80050c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	dd02      	ble.n	80050ce <_dtoa_r+0xa16>
 80050c8:	9b08      	ldr	r3, [sp, #32]
 80050ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80050ce:	9b02      	ldr	r3, [sp, #8]
 80050d0:	f883 8000 	strb.w	r8, [r3]
 80050d4:	e63b      	b.n	8004d4e <_dtoa_r+0x696>
 80050d6:	4628      	mov	r0, r5
 80050d8:	e7bb      	b.n	8005052 <_dtoa_r+0x99a>
 80050da:	2201      	movs	r2, #1
 80050dc:	e7e1      	b.n	80050a2 <_dtoa_r+0x9ea>
 80050de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	db04      	blt.n	80050ee <_dtoa_r+0xa36>
 80050e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80050e6:	430b      	orrs	r3, r1
 80050e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050ea:	430b      	orrs	r3, r1
 80050ec:	d120      	bne.n	8005130 <_dtoa_r+0xa78>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	dded      	ble.n	80050ce <_dtoa_r+0xa16>
 80050f2:	4649      	mov	r1, r9
 80050f4:	2201      	movs	r2, #1
 80050f6:	4658      	mov	r0, fp
 80050f8:	f000 fbb4 	bl	8005864 <__lshift>
 80050fc:	4621      	mov	r1, r4
 80050fe:	4681      	mov	r9, r0
 8005100:	f000 fc1c 	bl	800593c <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	dc03      	bgt.n	8005110 <_dtoa_r+0xa58>
 8005108:	d1e1      	bne.n	80050ce <_dtoa_r+0xa16>
 800510a:	f018 0f01 	tst.w	r8, #1
 800510e:	d0de      	beq.n	80050ce <_dtoa_r+0xa16>
 8005110:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005114:	d1d8      	bne.n	80050c8 <_dtoa_r+0xa10>
 8005116:	9a02      	ldr	r2, [sp, #8]
 8005118:	2339      	movs	r3, #57	@ 0x39
 800511a:	7013      	strb	r3, [r2, #0]
 800511c:	4633      	mov	r3, r6
 800511e:	461e      	mov	r6, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005126:	2a39      	cmp	r2, #57	@ 0x39
 8005128:	d052      	beq.n	80051d0 <_dtoa_r+0xb18>
 800512a:	3201      	adds	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e60e      	b.n	8004d4e <_dtoa_r+0x696>
 8005130:	2a00      	cmp	r2, #0
 8005132:	dd07      	ble.n	8005144 <_dtoa_r+0xa8c>
 8005134:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005138:	d0ed      	beq.n	8005116 <_dtoa_r+0xa5e>
 800513a:	9a02      	ldr	r2, [sp, #8]
 800513c:	f108 0301 	add.w	r3, r8, #1
 8005140:	7013      	strb	r3, [r2, #0]
 8005142:	e604      	b.n	8004d4e <_dtoa_r+0x696>
 8005144:	9b07      	ldr	r3, [sp, #28]
 8005146:	9a07      	ldr	r2, [sp, #28]
 8005148:	f803 8c01 	strb.w	r8, [r3, #-1]
 800514c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800514e:	4293      	cmp	r3, r2
 8005150:	d028      	beq.n	80051a4 <_dtoa_r+0xaec>
 8005152:	4649      	mov	r1, r9
 8005154:	2300      	movs	r3, #0
 8005156:	220a      	movs	r2, #10
 8005158:	4658      	mov	r0, fp
 800515a:	f000 f9d7 	bl	800550c <__multadd>
 800515e:	42af      	cmp	r7, r5
 8005160:	4681      	mov	r9, r0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	f04f 020a 	mov.w	r2, #10
 800516a:	4639      	mov	r1, r7
 800516c:	4658      	mov	r0, fp
 800516e:	d107      	bne.n	8005180 <_dtoa_r+0xac8>
 8005170:	f000 f9cc 	bl	800550c <__multadd>
 8005174:	4607      	mov	r7, r0
 8005176:	4605      	mov	r5, r0
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	9307      	str	r3, [sp, #28]
 800517e:	e774      	b.n	800506a <_dtoa_r+0x9b2>
 8005180:	f000 f9c4 	bl	800550c <__multadd>
 8005184:	4629      	mov	r1, r5
 8005186:	4607      	mov	r7, r0
 8005188:	2300      	movs	r3, #0
 800518a:	220a      	movs	r2, #10
 800518c:	4658      	mov	r0, fp
 800518e:	f000 f9bd 	bl	800550c <__multadd>
 8005192:	4605      	mov	r5, r0
 8005194:	e7f0      	b.n	8005178 <_dtoa_r+0xac0>
 8005196:	9b08      	ldr	r3, [sp, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfcc      	ite	gt
 800519c:	461e      	movgt	r6, r3
 800519e:	2601      	movle	r6, #1
 80051a0:	4456      	add	r6, sl
 80051a2:	2700      	movs	r7, #0
 80051a4:	4649      	mov	r1, r9
 80051a6:	2201      	movs	r2, #1
 80051a8:	4658      	mov	r0, fp
 80051aa:	f000 fb5b 	bl	8005864 <__lshift>
 80051ae:	4621      	mov	r1, r4
 80051b0:	4681      	mov	r9, r0
 80051b2:	f000 fbc3 	bl	800593c <__mcmp>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	dcb0      	bgt.n	800511c <_dtoa_r+0xa64>
 80051ba:	d102      	bne.n	80051c2 <_dtoa_r+0xb0a>
 80051bc:	f018 0f01 	tst.w	r8, #1
 80051c0:	d1ac      	bne.n	800511c <_dtoa_r+0xa64>
 80051c2:	4633      	mov	r3, r6
 80051c4:	461e      	mov	r6, r3
 80051c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ca:	2a30      	cmp	r2, #48	@ 0x30
 80051cc:	d0fa      	beq.n	80051c4 <_dtoa_r+0xb0c>
 80051ce:	e5be      	b.n	8004d4e <_dtoa_r+0x696>
 80051d0:	459a      	cmp	sl, r3
 80051d2:	d1a4      	bne.n	800511e <_dtoa_r+0xa66>
 80051d4:	9b04      	ldr	r3, [sp, #16]
 80051d6:	3301      	adds	r3, #1
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	2331      	movs	r3, #49	@ 0x31
 80051dc:	f88a 3000 	strb.w	r3, [sl]
 80051e0:	e5b5      	b.n	8004d4e <_dtoa_r+0x696>
 80051e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80051e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005244 <_dtoa_r+0xb8c>
 80051e8:	b11b      	cbz	r3, 80051f2 <_dtoa_r+0xb3a>
 80051ea:	f10a 0308 	add.w	r3, sl, #8
 80051ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4650      	mov	r0, sl
 80051f4:	b017      	add	sp, #92	@ 0x5c
 80051f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f77f ae3d 	ble.w	8004e7c <_dtoa_r+0x7c4>
 8005202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005204:	930a      	str	r3, [sp, #40]	@ 0x28
 8005206:	2001      	movs	r0, #1
 8005208:	e65b      	b.n	8004ec2 <_dtoa_r+0x80a>
 800520a:	9b08      	ldr	r3, [sp, #32]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f77f aed6 	ble.w	8004fbe <_dtoa_r+0x906>
 8005212:	4656      	mov	r6, sl
 8005214:	4621      	mov	r1, r4
 8005216:	4648      	mov	r0, r9
 8005218:	f7ff f9c5 	bl	80045a6 <quorem>
 800521c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005220:	f806 8b01 	strb.w	r8, [r6], #1
 8005224:	9b08      	ldr	r3, [sp, #32]
 8005226:	eba6 020a 	sub.w	r2, r6, sl
 800522a:	4293      	cmp	r3, r2
 800522c:	ddb3      	ble.n	8005196 <_dtoa_r+0xade>
 800522e:	4649      	mov	r1, r9
 8005230:	2300      	movs	r3, #0
 8005232:	220a      	movs	r2, #10
 8005234:	4658      	mov	r0, fp
 8005236:	f000 f969 	bl	800550c <__multadd>
 800523a:	4681      	mov	r9, r0
 800523c:	e7ea      	b.n	8005214 <_dtoa_r+0xb5c>
 800523e:	bf00      	nop
 8005240:	080062d4 	.word	0x080062d4
 8005244:	08006258 	.word	0x08006258

08005248 <_free_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	2900      	cmp	r1, #0
 800524e:	d041      	beq.n	80052d4 <_free_r+0x8c>
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f0c      	subs	r4, r1, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfb8      	it	lt
 800525a:	18e4      	addlt	r4, r4, r3
 800525c:	f000 f8e8 	bl	8005430 <__malloc_lock>
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <_free_r+0x90>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	b933      	cbnz	r3, 8005274 <_free_r+0x2c>
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	6014      	str	r4, [r2, #0]
 800526a:	4628      	mov	r0, r5
 800526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005270:	f000 b8e4 	b.w	800543c <__malloc_unlock>
 8005274:	42a3      	cmp	r3, r4
 8005276:	d908      	bls.n	800528a <_free_r+0x42>
 8005278:	6820      	ldr	r0, [r4, #0]
 800527a:	1821      	adds	r1, r4, r0
 800527c:	428b      	cmp	r3, r1
 800527e:	bf01      	itttt	eq
 8005280:	6819      	ldreq	r1, [r3, #0]
 8005282:	685b      	ldreq	r3, [r3, #4]
 8005284:	1809      	addeq	r1, r1, r0
 8005286:	6021      	streq	r1, [r4, #0]
 8005288:	e7ed      	b.n	8005266 <_free_r+0x1e>
 800528a:	461a      	mov	r2, r3
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b10b      	cbz	r3, 8005294 <_free_r+0x4c>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d9fa      	bls.n	800528a <_free_r+0x42>
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	1850      	adds	r0, r2, r1
 8005298:	42a0      	cmp	r0, r4
 800529a:	d10b      	bne.n	80052b4 <_free_r+0x6c>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	4401      	add	r1, r0
 80052a0:	1850      	adds	r0, r2, r1
 80052a2:	4283      	cmp	r3, r0
 80052a4:	6011      	str	r1, [r2, #0]
 80052a6:	d1e0      	bne.n	800526a <_free_r+0x22>
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	6053      	str	r3, [r2, #4]
 80052ae:	4408      	add	r0, r1
 80052b0:	6010      	str	r0, [r2, #0]
 80052b2:	e7da      	b.n	800526a <_free_r+0x22>
 80052b4:	d902      	bls.n	80052bc <_free_r+0x74>
 80052b6:	230c      	movs	r3, #12
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	e7d6      	b.n	800526a <_free_r+0x22>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	1821      	adds	r1, r4, r0
 80052c0:	428b      	cmp	r3, r1
 80052c2:	bf04      	itt	eq
 80052c4:	6819      	ldreq	r1, [r3, #0]
 80052c6:	685b      	ldreq	r3, [r3, #4]
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	bf04      	itt	eq
 80052cc:	1809      	addeq	r1, r1, r0
 80052ce:	6021      	streq	r1, [r4, #0]
 80052d0:	6054      	str	r4, [r2, #4]
 80052d2:	e7ca      	b.n	800526a <_free_r+0x22>
 80052d4:	bd38      	pop	{r3, r4, r5, pc}
 80052d6:	bf00      	nop
 80052d8:	200003d8 	.word	0x200003d8

080052dc <malloc>:
 80052dc:	4b02      	ldr	r3, [pc, #8]	@ (80052e8 <malloc+0xc>)
 80052de:	4601      	mov	r1, r0
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f000 b825 	b.w	8005330 <_malloc_r>
 80052e6:	bf00      	nop
 80052e8:	20000018 	.word	0x20000018

080052ec <sbrk_aligned>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4e0f      	ldr	r6, [pc, #60]	@ (800532c <sbrk_aligned+0x40>)
 80052f0:	460c      	mov	r4, r1
 80052f2:	6831      	ldr	r1, [r6, #0]
 80052f4:	4605      	mov	r5, r0
 80052f6:	b911      	cbnz	r1, 80052fe <sbrk_aligned+0x12>
 80052f8:	f000 fe92 	bl	8006020 <_sbrk_r>
 80052fc:	6030      	str	r0, [r6, #0]
 80052fe:	4621      	mov	r1, r4
 8005300:	4628      	mov	r0, r5
 8005302:	f000 fe8d 	bl	8006020 <_sbrk_r>
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	d103      	bne.n	8005312 <sbrk_aligned+0x26>
 800530a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800530e:	4620      	mov	r0, r4
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	1cc4      	adds	r4, r0, #3
 8005314:	f024 0403 	bic.w	r4, r4, #3
 8005318:	42a0      	cmp	r0, r4
 800531a:	d0f8      	beq.n	800530e <sbrk_aligned+0x22>
 800531c:	1a21      	subs	r1, r4, r0
 800531e:	4628      	mov	r0, r5
 8005320:	f000 fe7e 	bl	8006020 <_sbrk_r>
 8005324:	3001      	adds	r0, #1
 8005326:	d1f2      	bne.n	800530e <sbrk_aligned+0x22>
 8005328:	e7ef      	b.n	800530a <sbrk_aligned+0x1e>
 800532a:	bf00      	nop
 800532c:	200003d4 	.word	0x200003d4

08005330 <_malloc_r>:
 8005330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005334:	1ccd      	adds	r5, r1, #3
 8005336:	f025 0503 	bic.w	r5, r5, #3
 800533a:	3508      	adds	r5, #8
 800533c:	2d0c      	cmp	r5, #12
 800533e:	bf38      	it	cc
 8005340:	250c      	movcc	r5, #12
 8005342:	2d00      	cmp	r5, #0
 8005344:	4606      	mov	r6, r0
 8005346:	db01      	blt.n	800534c <_malloc_r+0x1c>
 8005348:	42a9      	cmp	r1, r5
 800534a:	d904      	bls.n	8005356 <_malloc_r+0x26>
 800534c:	230c      	movs	r3, #12
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	2000      	movs	r0, #0
 8005352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800542c <_malloc_r+0xfc>
 800535a:	f000 f869 	bl	8005430 <__malloc_lock>
 800535e:	f8d8 3000 	ldr.w	r3, [r8]
 8005362:	461c      	mov	r4, r3
 8005364:	bb44      	cbnz	r4, 80053b8 <_malloc_r+0x88>
 8005366:	4629      	mov	r1, r5
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff ffbf 	bl	80052ec <sbrk_aligned>
 800536e:	1c43      	adds	r3, r0, #1
 8005370:	4604      	mov	r4, r0
 8005372:	d158      	bne.n	8005426 <_malloc_r+0xf6>
 8005374:	f8d8 4000 	ldr.w	r4, [r8]
 8005378:	4627      	mov	r7, r4
 800537a:	2f00      	cmp	r7, #0
 800537c:	d143      	bne.n	8005406 <_malloc_r+0xd6>
 800537e:	2c00      	cmp	r4, #0
 8005380:	d04b      	beq.n	800541a <_malloc_r+0xea>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	4639      	mov	r1, r7
 8005386:	4630      	mov	r0, r6
 8005388:	eb04 0903 	add.w	r9, r4, r3
 800538c:	f000 fe48 	bl	8006020 <_sbrk_r>
 8005390:	4581      	cmp	r9, r0
 8005392:	d142      	bne.n	800541a <_malloc_r+0xea>
 8005394:	6821      	ldr	r1, [r4, #0]
 8005396:	1a6d      	subs	r5, r5, r1
 8005398:	4629      	mov	r1, r5
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff ffa6 	bl	80052ec <sbrk_aligned>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d03a      	beq.n	800541a <_malloc_r+0xea>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	442b      	add	r3, r5
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	f8d8 3000 	ldr.w	r3, [r8]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	bb62      	cbnz	r2, 800540c <_malloc_r+0xdc>
 80053b2:	f8c8 7000 	str.w	r7, [r8]
 80053b6:	e00f      	b.n	80053d8 <_malloc_r+0xa8>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	1b52      	subs	r2, r2, r5
 80053bc:	d420      	bmi.n	8005400 <_malloc_r+0xd0>
 80053be:	2a0b      	cmp	r2, #11
 80053c0:	d917      	bls.n	80053f2 <_malloc_r+0xc2>
 80053c2:	1961      	adds	r1, r4, r5
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	6025      	str	r5, [r4, #0]
 80053c8:	bf18      	it	ne
 80053ca:	6059      	strne	r1, [r3, #4]
 80053cc:	6863      	ldr	r3, [r4, #4]
 80053ce:	bf08      	it	eq
 80053d0:	f8c8 1000 	streq.w	r1, [r8]
 80053d4:	5162      	str	r2, [r4, r5]
 80053d6:	604b      	str	r3, [r1, #4]
 80053d8:	4630      	mov	r0, r6
 80053da:	f000 f82f 	bl	800543c <__malloc_unlock>
 80053de:	f104 000b 	add.w	r0, r4, #11
 80053e2:	1d23      	adds	r3, r4, #4
 80053e4:	f020 0007 	bic.w	r0, r0, #7
 80053e8:	1ac2      	subs	r2, r0, r3
 80053ea:	bf1c      	itt	ne
 80053ec:	1a1b      	subne	r3, r3, r0
 80053ee:	50a3      	strne	r3, [r4, r2]
 80053f0:	e7af      	b.n	8005352 <_malloc_r+0x22>
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	bf0c      	ite	eq
 80053f8:	f8c8 2000 	streq.w	r2, [r8]
 80053fc:	605a      	strne	r2, [r3, #4]
 80053fe:	e7eb      	b.n	80053d8 <_malloc_r+0xa8>
 8005400:	4623      	mov	r3, r4
 8005402:	6864      	ldr	r4, [r4, #4]
 8005404:	e7ae      	b.n	8005364 <_malloc_r+0x34>
 8005406:	463c      	mov	r4, r7
 8005408:	687f      	ldr	r7, [r7, #4]
 800540a:	e7b6      	b.n	800537a <_malloc_r+0x4a>
 800540c:	461a      	mov	r2, r3
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	42a3      	cmp	r3, r4
 8005412:	d1fb      	bne.n	800540c <_malloc_r+0xdc>
 8005414:	2300      	movs	r3, #0
 8005416:	6053      	str	r3, [r2, #4]
 8005418:	e7de      	b.n	80053d8 <_malloc_r+0xa8>
 800541a:	230c      	movs	r3, #12
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	4630      	mov	r0, r6
 8005420:	f000 f80c 	bl	800543c <__malloc_unlock>
 8005424:	e794      	b.n	8005350 <_malloc_r+0x20>
 8005426:	6005      	str	r5, [r0, #0]
 8005428:	e7d6      	b.n	80053d8 <_malloc_r+0xa8>
 800542a:	bf00      	nop
 800542c:	200003d8 	.word	0x200003d8

08005430 <__malloc_lock>:
 8005430:	4801      	ldr	r0, [pc, #4]	@ (8005438 <__malloc_lock+0x8>)
 8005432:	f7ff b8b6 	b.w	80045a2 <__retarget_lock_acquire_recursive>
 8005436:	bf00      	nop
 8005438:	200003d0 	.word	0x200003d0

0800543c <__malloc_unlock>:
 800543c:	4801      	ldr	r0, [pc, #4]	@ (8005444 <__malloc_unlock+0x8>)
 800543e:	f7ff b8b1 	b.w	80045a4 <__retarget_lock_release_recursive>
 8005442:	bf00      	nop
 8005444:	200003d0 	.word	0x200003d0

08005448 <_Balloc>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	69c6      	ldr	r6, [r0, #28]
 800544c:	4604      	mov	r4, r0
 800544e:	460d      	mov	r5, r1
 8005450:	b976      	cbnz	r6, 8005470 <_Balloc+0x28>
 8005452:	2010      	movs	r0, #16
 8005454:	f7ff ff42 	bl	80052dc <malloc>
 8005458:	4602      	mov	r2, r0
 800545a:	61e0      	str	r0, [r4, #28]
 800545c:	b920      	cbnz	r0, 8005468 <_Balloc+0x20>
 800545e:	4b18      	ldr	r3, [pc, #96]	@ (80054c0 <_Balloc+0x78>)
 8005460:	4818      	ldr	r0, [pc, #96]	@ (80054c4 <_Balloc+0x7c>)
 8005462:	216b      	movs	r1, #107	@ 0x6b
 8005464:	f000 fdfa 	bl	800605c <__assert_func>
 8005468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800546c:	6006      	str	r6, [r0, #0]
 800546e:	60c6      	str	r6, [r0, #12]
 8005470:	69e6      	ldr	r6, [r4, #28]
 8005472:	68f3      	ldr	r3, [r6, #12]
 8005474:	b183      	cbz	r3, 8005498 <_Balloc+0x50>
 8005476:	69e3      	ldr	r3, [r4, #28]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800547e:	b9b8      	cbnz	r0, 80054b0 <_Balloc+0x68>
 8005480:	2101      	movs	r1, #1
 8005482:	fa01 f605 	lsl.w	r6, r1, r5
 8005486:	1d72      	adds	r2, r6, #5
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	4620      	mov	r0, r4
 800548c:	f000 fe04 	bl	8006098 <_calloc_r>
 8005490:	b160      	cbz	r0, 80054ac <_Balloc+0x64>
 8005492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005496:	e00e      	b.n	80054b6 <_Balloc+0x6e>
 8005498:	2221      	movs	r2, #33	@ 0x21
 800549a:	2104      	movs	r1, #4
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fdfb 	bl	8006098 <_calloc_r>
 80054a2:	69e3      	ldr	r3, [r4, #28]
 80054a4:	60f0      	str	r0, [r6, #12]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e4      	bne.n	8005476 <_Balloc+0x2e>
 80054ac:	2000      	movs	r0, #0
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	6802      	ldr	r2, [r0, #0]
 80054b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054b6:	2300      	movs	r3, #0
 80054b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054bc:	e7f7      	b.n	80054ae <_Balloc+0x66>
 80054be:	bf00      	nop
 80054c0:	08006265 	.word	0x08006265
 80054c4:	080062e5 	.word	0x080062e5

080054c8 <_Bfree>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	69c6      	ldr	r6, [r0, #28]
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	b976      	cbnz	r6, 80054f0 <_Bfree+0x28>
 80054d2:	2010      	movs	r0, #16
 80054d4:	f7ff ff02 	bl	80052dc <malloc>
 80054d8:	4602      	mov	r2, r0
 80054da:	61e8      	str	r0, [r5, #28]
 80054dc:	b920      	cbnz	r0, 80054e8 <_Bfree+0x20>
 80054de:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <_Bfree+0x3c>)
 80054e0:	4809      	ldr	r0, [pc, #36]	@ (8005508 <_Bfree+0x40>)
 80054e2:	218f      	movs	r1, #143	@ 0x8f
 80054e4:	f000 fdba 	bl	800605c <__assert_func>
 80054e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054ec:	6006      	str	r6, [r0, #0]
 80054ee:	60c6      	str	r6, [r0, #12]
 80054f0:	b13c      	cbz	r4, 8005502 <_Bfree+0x3a>
 80054f2:	69eb      	ldr	r3, [r5, #28]
 80054f4:	6862      	ldr	r2, [r4, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054fc:	6021      	str	r1, [r4, #0]
 80054fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	08006265 	.word	0x08006265
 8005508:	080062e5 	.word	0x080062e5

0800550c <__multadd>:
 800550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005510:	690d      	ldr	r5, [r1, #16]
 8005512:	4607      	mov	r7, r0
 8005514:	460c      	mov	r4, r1
 8005516:	461e      	mov	r6, r3
 8005518:	f101 0c14 	add.w	ip, r1, #20
 800551c:	2000      	movs	r0, #0
 800551e:	f8dc 3000 	ldr.w	r3, [ip]
 8005522:	b299      	uxth	r1, r3
 8005524:	fb02 6101 	mla	r1, r2, r1, r6
 8005528:	0c1e      	lsrs	r6, r3, #16
 800552a:	0c0b      	lsrs	r3, r1, #16
 800552c:	fb02 3306 	mla	r3, r2, r6, r3
 8005530:	b289      	uxth	r1, r1
 8005532:	3001      	adds	r0, #1
 8005534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005538:	4285      	cmp	r5, r0
 800553a:	f84c 1b04 	str.w	r1, [ip], #4
 800553e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005542:	dcec      	bgt.n	800551e <__multadd+0x12>
 8005544:	b30e      	cbz	r6, 800558a <__multadd+0x7e>
 8005546:	68a3      	ldr	r3, [r4, #8]
 8005548:	42ab      	cmp	r3, r5
 800554a:	dc19      	bgt.n	8005580 <__multadd+0x74>
 800554c:	6861      	ldr	r1, [r4, #4]
 800554e:	4638      	mov	r0, r7
 8005550:	3101      	adds	r1, #1
 8005552:	f7ff ff79 	bl	8005448 <_Balloc>
 8005556:	4680      	mov	r8, r0
 8005558:	b928      	cbnz	r0, 8005566 <__multadd+0x5a>
 800555a:	4602      	mov	r2, r0
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <__multadd+0x84>)
 800555e:	480d      	ldr	r0, [pc, #52]	@ (8005594 <__multadd+0x88>)
 8005560:	21ba      	movs	r1, #186	@ 0xba
 8005562:	f000 fd7b 	bl	800605c <__assert_func>
 8005566:	6922      	ldr	r2, [r4, #16]
 8005568:	3202      	adds	r2, #2
 800556a:	f104 010c 	add.w	r1, r4, #12
 800556e:	0092      	lsls	r2, r2, #2
 8005570:	300c      	adds	r0, #12
 8005572:	f000 fd65 	bl	8006040 <memcpy>
 8005576:	4621      	mov	r1, r4
 8005578:	4638      	mov	r0, r7
 800557a:	f7ff ffa5 	bl	80054c8 <_Bfree>
 800557e:	4644      	mov	r4, r8
 8005580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005584:	3501      	adds	r5, #1
 8005586:	615e      	str	r6, [r3, #20]
 8005588:	6125      	str	r5, [r4, #16]
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	080062d4 	.word	0x080062d4
 8005594:	080062e5 	.word	0x080062e5

08005598 <__hi0bits>:
 8005598:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800559c:	4603      	mov	r3, r0
 800559e:	bf36      	itet	cc
 80055a0:	0403      	lslcc	r3, r0, #16
 80055a2:	2000      	movcs	r0, #0
 80055a4:	2010      	movcc	r0, #16
 80055a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055aa:	bf3c      	itt	cc
 80055ac:	021b      	lslcc	r3, r3, #8
 80055ae:	3008      	addcc	r0, #8
 80055b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055b4:	bf3c      	itt	cc
 80055b6:	011b      	lslcc	r3, r3, #4
 80055b8:	3004      	addcc	r0, #4
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	bf3c      	itt	cc
 80055c0:	009b      	lslcc	r3, r3, #2
 80055c2:	3002      	addcc	r0, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	db05      	blt.n	80055d4 <__hi0bits+0x3c>
 80055c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80055cc:	f100 0001 	add.w	r0, r0, #1
 80055d0:	bf08      	it	eq
 80055d2:	2020      	moveq	r0, #32
 80055d4:	4770      	bx	lr

080055d6 <__lo0bits>:
 80055d6:	6803      	ldr	r3, [r0, #0]
 80055d8:	4602      	mov	r2, r0
 80055da:	f013 0007 	ands.w	r0, r3, #7
 80055de:	d00b      	beq.n	80055f8 <__lo0bits+0x22>
 80055e0:	07d9      	lsls	r1, r3, #31
 80055e2:	d421      	bmi.n	8005628 <__lo0bits+0x52>
 80055e4:	0798      	lsls	r0, r3, #30
 80055e6:	bf49      	itett	mi
 80055e8:	085b      	lsrmi	r3, r3, #1
 80055ea:	089b      	lsrpl	r3, r3, #2
 80055ec:	2001      	movmi	r0, #1
 80055ee:	6013      	strmi	r3, [r2, #0]
 80055f0:	bf5c      	itt	pl
 80055f2:	6013      	strpl	r3, [r2, #0]
 80055f4:	2002      	movpl	r0, #2
 80055f6:	4770      	bx	lr
 80055f8:	b299      	uxth	r1, r3
 80055fa:	b909      	cbnz	r1, 8005600 <__lo0bits+0x2a>
 80055fc:	0c1b      	lsrs	r3, r3, #16
 80055fe:	2010      	movs	r0, #16
 8005600:	b2d9      	uxtb	r1, r3
 8005602:	b909      	cbnz	r1, 8005608 <__lo0bits+0x32>
 8005604:	3008      	adds	r0, #8
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	0719      	lsls	r1, r3, #28
 800560a:	bf04      	itt	eq
 800560c:	091b      	lsreq	r3, r3, #4
 800560e:	3004      	addeq	r0, #4
 8005610:	0799      	lsls	r1, r3, #30
 8005612:	bf04      	itt	eq
 8005614:	089b      	lsreq	r3, r3, #2
 8005616:	3002      	addeq	r0, #2
 8005618:	07d9      	lsls	r1, r3, #31
 800561a:	d403      	bmi.n	8005624 <__lo0bits+0x4e>
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	f100 0001 	add.w	r0, r0, #1
 8005622:	d003      	beq.n	800562c <__lo0bits+0x56>
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4770      	bx	lr
 8005628:	2000      	movs	r0, #0
 800562a:	4770      	bx	lr
 800562c:	2020      	movs	r0, #32
 800562e:	4770      	bx	lr

08005630 <__i2b>:
 8005630:	b510      	push	{r4, lr}
 8005632:	460c      	mov	r4, r1
 8005634:	2101      	movs	r1, #1
 8005636:	f7ff ff07 	bl	8005448 <_Balloc>
 800563a:	4602      	mov	r2, r0
 800563c:	b928      	cbnz	r0, 800564a <__i2b+0x1a>
 800563e:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <__i2b+0x24>)
 8005640:	4805      	ldr	r0, [pc, #20]	@ (8005658 <__i2b+0x28>)
 8005642:	f240 1145 	movw	r1, #325	@ 0x145
 8005646:	f000 fd09 	bl	800605c <__assert_func>
 800564a:	2301      	movs	r3, #1
 800564c:	6144      	str	r4, [r0, #20]
 800564e:	6103      	str	r3, [r0, #16]
 8005650:	bd10      	pop	{r4, pc}
 8005652:	bf00      	nop
 8005654:	080062d4 	.word	0x080062d4
 8005658:	080062e5 	.word	0x080062e5

0800565c <__multiply>:
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	4614      	mov	r4, r2
 8005662:	690a      	ldr	r2, [r1, #16]
 8005664:	6923      	ldr	r3, [r4, #16]
 8005666:	429a      	cmp	r2, r3
 8005668:	bfa8      	it	ge
 800566a:	4623      	movge	r3, r4
 800566c:	460f      	mov	r7, r1
 800566e:	bfa4      	itt	ge
 8005670:	460c      	movge	r4, r1
 8005672:	461f      	movge	r7, r3
 8005674:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005678:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	6861      	ldr	r1, [r4, #4]
 8005680:	eb0a 0609 	add.w	r6, sl, r9
 8005684:	42b3      	cmp	r3, r6
 8005686:	b085      	sub	sp, #20
 8005688:	bfb8      	it	lt
 800568a:	3101      	addlt	r1, #1
 800568c:	f7ff fedc 	bl	8005448 <_Balloc>
 8005690:	b930      	cbnz	r0, 80056a0 <__multiply+0x44>
 8005692:	4602      	mov	r2, r0
 8005694:	4b44      	ldr	r3, [pc, #272]	@ (80057a8 <__multiply+0x14c>)
 8005696:	4845      	ldr	r0, [pc, #276]	@ (80057ac <__multiply+0x150>)
 8005698:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800569c:	f000 fcde 	bl	800605c <__assert_func>
 80056a0:	f100 0514 	add.w	r5, r0, #20
 80056a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056a8:	462b      	mov	r3, r5
 80056aa:	2200      	movs	r2, #0
 80056ac:	4543      	cmp	r3, r8
 80056ae:	d321      	bcc.n	80056f4 <__multiply+0x98>
 80056b0:	f107 0114 	add.w	r1, r7, #20
 80056b4:	f104 0214 	add.w	r2, r4, #20
 80056b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80056bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	1b13      	subs	r3, r2, r4
 80056c4:	3b15      	subs	r3, #21
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	3304      	adds	r3, #4
 80056cc:	f104 0715 	add.w	r7, r4, #21
 80056d0:	42ba      	cmp	r2, r7
 80056d2:	bf38      	it	cc
 80056d4:	2304      	movcc	r3, #4
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	9b02      	ldr	r3, [sp, #8]
 80056da:	9103      	str	r1, [sp, #12]
 80056dc:	428b      	cmp	r3, r1
 80056de:	d80c      	bhi.n	80056fa <__multiply+0x9e>
 80056e0:	2e00      	cmp	r6, #0
 80056e2:	dd03      	ble.n	80056ec <__multiply+0x90>
 80056e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d05a      	beq.n	80057a2 <__multiply+0x146>
 80056ec:	6106      	str	r6, [r0, #16]
 80056ee:	b005      	add	sp, #20
 80056f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f4:	f843 2b04 	str.w	r2, [r3], #4
 80056f8:	e7d8      	b.n	80056ac <__multiply+0x50>
 80056fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	d023      	beq.n	800574c <__multiply+0xf0>
 8005704:	f104 0e14 	add.w	lr, r4, #20
 8005708:	46a9      	mov	r9, r5
 800570a:	f04f 0c00 	mov.w	ip, #0
 800570e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005712:	f8d9 3000 	ldr.w	r3, [r9]
 8005716:	fa1f fb87 	uxth.w	fp, r7
 800571a:	b29b      	uxth	r3, r3
 800571c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005720:	4463      	add	r3, ip
 8005722:	f8d9 c000 	ldr.w	ip, [r9]
 8005726:	0c3f      	lsrs	r7, r7, #16
 8005728:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800572c:	fb0a c707 	mla	r7, sl, r7, ip
 8005730:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005734:	b29b      	uxth	r3, r3
 8005736:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800573a:	4572      	cmp	r2, lr
 800573c:	f849 3b04 	str.w	r3, [r9], #4
 8005740:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005744:	d8e3      	bhi.n	800570e <__multiply+0xb2>
 8005746:	9b01      	ldr	r3, [sp, #4]
 8005748:	f845 c003 	str.w	ip, [r5, r3]
 800574c:	9b03      	ldr	r3, [sp, #12]
 800574e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005752:	3104      	adds	r1, #4
 8005754:	f1b9 0f00 	cmp.w	r9, #0
 8005758:	d021      	beq.n	800579e <__multiply+0x142>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	f104 0c14 	add.w	ip, r4, #20
 8005760:	46ae      	mov	lr, r5
 8005762:	f04f 0a00 	mov.w	sl, #0
 8005766:	f8bc b000 	ldrh.w	fp, [ip]
 800576a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800576e:	fb09 770b 	mla	r7, r9, fp, r7
 8005772:	4457      	add	r7, sl
 8005774:	b29b      	uxth	r3, r3
 8005776:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800577a:	f84e 3b04 	str.w	r3, [lr], #4
 800577e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005782:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005786:	f8be 3000 	ldrh.w	r3, [lr]
 800578a:	fb09 330a 	mla	r3, r9, sl, r3
 800578e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005792:	4562      	cmp	r2, ip
 8005794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005798:	d8e5      	bhi.n	8005766 <__multiply+0x10a>
 800579a:	9f01      	ldr	r7, [sp, #4]
 800579c:	51eb      	str	r3, [r5, r7]
 800579e:	3504      	adds	r5, #4
 80057a0:	e79a      	b.n	80056d8 <__multiply+0x7c>
 80057a2:	3e01      	subs	r6, #1
 80057a4:	e79c      	b.n	80056e0 <__multiply+0x84>
 80057a6:	bf00      	nop
 80057a8:	080062d4 	.word	0x080062d4
 80057ac:	080062e5 	.word	0x080062e5

080057b0 <__pow5mult>:
 80057b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b4:	4615      	mov	r5, r2
 80057b6:	f012 0203 	ands.w	r2, r2, #3
 80057ba:	4607      	mov	r7, r0
 80057bc:	460e      	mov	r6, r1
 80057be:	d007      	beq.n	80057d0 <__pow5mult+0x20>
 80057c0:	4c25      	ldr	r4, [pc, #148]	@ (8005858 <__pow5mult+0xa8>)
 80057c2:	3a01      	subs	r2, #1
 80057c4:	2300      	movs	r3, #0
 80057c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057ca:	f7ff fe9f 	bl	800550c <__multadd>
 80057ce:	4606      	mov	r6, r0
 80057d0:	10ad      	asrs	r5, r5, #2
 80057d2:	d03d      	beq.n	8005850 <__pow5mult+0xa0>
 80057d4:	69fc      	ldr	r4, [r7, #28]
 80057d6:	b97c      	cbnz	r4, 80057f8 <__pow5mult+0x48>
 80057d8:	2010      	movs	r0, #16
 80057da:	f7ff fd7f 	bl	80052dc <malloc>
 80057de:	4602      	mov	r2, r0
 80057e0:	61f8      	str	r0, [r7, #28]
 80057e2:	b928      	cbnz	r0, 80057f0 <__pow5mult+0x40>
 80057e4:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <__pow5mult+0xac>)
 80057e6:	481e      	ldr	r0, [pc, #120]	@ (8005860 <__pow5mult+0xb0>)
 80057e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057ec:	f000 fc36 	bl	800605c <__assert_func>
 80057f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057f4:	6004      	str	r4, [r0, #0]
 80057f6:	60c4      	str	r4, [r0, #12]
 80057f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005800:	b94c      	cbnz	r4, 8005816 <__pow5mult+0x66>
 8005802:	f240 2171 	movw	r1, #625	@ 0x271
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff ff12 	bl	8005630 <__i2b>
 800580c:	2300      	movs	r3, #0
 800580e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005812:	4604      	mov	r4, r0
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	f04f 0900 	mov.w	r9, #0
 800581a:	07eb      	lsls	r3, r5, #31
 800581c:	d50a      	bpl.n	8005834 <__pow5mult+0x84>
 800581e:	4631      	mov	r1, r6
 8005820:	4622      	mov	r2, r4
 8005822:	4638      	mov	r0, r7
 8005824:	f7ff ff1a 	bl	800565c <__multiply>
 8005828:	4631      	mov	r1, r6
 800582a:	4680      	mov	r8, r0
 800582c:	4638      	mov	r0, r7
 800582e:	f7ff fe4b 	bl	80054c8 <_Bfree>
 8005832:	4646      	mov	r6, r8
 8005834:	106d      	asrs	r5, r5, #1
 8005836:	d00b      	beq.n	8005850 <__pow5mult+0xa0>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	b938      	cbnz	r0, 800584c <__pow5mult+0x9c>
 800583c:	4622      	mov	r2, r4
 800583e:	4621      	mov	r1, r4
 8005840:	4638      	mov	r0, r7
 8005842:	f7ff ff0b 	bl	800565c <__multiply>
 8005846:	6020      	str	r0, [r4, #0]
 8005848:	f8c0 9000 	str.w	r9, [r0]
 800584c:	4604      	mov	r4, r0
 800584e:	e7e4      	b.n	800581a <__pow5mult+0x6a>
 8005850:	4630      	mov	r0, r6
 8005852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005856:	bf00      	nop
 8005858:	08006340 	.word	0x08006340
 800585c:	08006265 	.word	0x08006265
 8005860:	080062e5 	.word	0x080062e5

08005864 <__lshift>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	460c      	mov	r4, r1
 800586a:	6849      	ldr	r1, [r1, #4]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005872:	68a3      	ldr	r3, [r4, #8]
 8005874:	4607      	mov	r7, r0
 8005876:	4691      	mov	r9, r2
 8005878:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800587c:	f108 0601 	add.w	r6, r8, #1
 8005880:	42b3      	cmp	r3, r6
 8005882:	db0b      	blt.n	800589c <__lshift+0x38>
 8005884:	4638      	mov	r0, r7
 8005886:	f7ff fddf 	bl	8005448 <_Balloc>
 800588a:	4605      	mov	r5, r0
 800588c:	b948      	cbnz	r0, 80058a2 <__lshift+0x3e>
 800588e:	4602      	mov	r2, r0
 8005890:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <__lshift+0xd0>)
 8005892:	4829      	ldr	r0, [pc, #164]	@ (8005938 <__lshift+0xd4>)
 8005894:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005898:	f000 fbe0 	bl	800605c <__assert_func>
 800589c:	3101      	adds	r1, #1
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	e7ee      	b.n	8005880 <__lshift+0x1c>
 80058a2:	2300      	movs	r3, #0
 80058a4:	f100 0114 	add.w	r1, r0, #20
 80058a8:	f100 0210 	add.w	r2, r0, #16
 80058ac:	4618      	mov	r0, r3
 80058ae:	4553      	cmp	r3, sl
 80058b0:	db33      	blt.n	800591a <__lshift+0xb6>
 80058b2:	6920      	ldr	r0, [r4, #16]
 80058b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058b8:	f104 0314 	add.w	r3, r4, #20
 80058bc:	f019 091f 	ands.w	r9, r9, #31
 80058c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058c8:	d02b      	beq.n	8005922 <__lshift+0xbe>
 80058ca:	f1c9 0e20 	rsb	lr, r9, #32
 80058ce:	468a      	mov	sl, r1
 80058d0:	2200      	movs	r2, #0
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	fa00 f009 	lsl.w	r0, r0, r9
 80058d8:	4310      	orrs	r0, r2
 80058da:	f84a 0b04 	str.w	r0, [sl], #4
 80058de:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e2:	459c      	cmp	ip, r3
 80058e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80058e8:	d8f3      	bhi.n	80058d2 <__lshift+0x6e>
 80058ea:	ebac 0304 	sub.w	r3, ip, r4
 80058ee:	3b15      	subs	r3, #21
 80058f0:	f023 0303 	bic.w	r3, r3, #3
 80058f4:	3304      	adds	r3, #4
 80058f6:	f104 0015 	add.w	r0, r4, #21
 80058fa:	4584      	cmp	ip, r0
 80058fc:	bf38      	it	cc
 80058fe:	2304      	movcc	r3, #4
 8005900:	50ca      	str	r2, [r1, r3]
 8005902:	b10a      	cbz	r2, 8005908 <__lshift+0xa4>
 8005904:	f108 0602 	add.w	r6, r8, #2
 8005908:	3e01      	subs	r6, #1
 800590a:	4638      	mov	r0, r7
 800590c:	612e      	str	r6, [r5, #16]
 800590e:	4621      	mov	r1, r4
 8005910:	f7ff fdda 	bl	80054c8 <_Bfree>
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800591a:	f842 0f04 	str.w	r0, [r2, #4]!
 800591e:	3301      	adds	r3, #1
 8005920:	e7c5      	b.n	80058ae <__lshift+0x4a>
 8005922:	3904      	subs	r1, #4
 8005924:	f853 2b04 	ldr.w	r2, [r3], #4
 8005928:	f841 2f04 	str.w	r2, [r1, #4]!
 800592c:	459c      	cmp	ip, r3
 800592e:	d8f9      	bhi.n	8005924 <__lshift+0xc0>
 8005930:	e7ea      	b.n	8005908 <__lshift+0xa4>
 8005932:	bf00      	nop
 8005934:	080062d4 	.word	0x080062d4
 8005938:	080062e5 	.word	0x080062e5

0800593c <__mcmp>:
 800593c:	690a      	ldr	r2, [r1, #16]
 800593e:	4603      	mov	r3, r0
 8005940:	6900      	ldr	r0, [r0, #16]
 8005942:	1a80      	subs	r0, r0, r2
 8005944:	b530      	push	{r4, r5, lr}
 8005946:	d10e      	bne.n	8005966 <__mcmp+0x2a>
 8005948:	3314      	adds	r3, #20
 800594a:	3114      	adds	r1, #20
 800594c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005950:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005954:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005958:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800595c:	4295      	cmp	r5, r2
 800595e:	d003      	beq.n	8005968 <__mcmp+0x2c>
 8005960:	d205      	bcs.n	800596e <__mcmp+0x32>
 8005962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005966:	bd30      	pop	{r4, r5, pc}
 8005968:	42a3      	cmp	r3, r4
 800596a:	d3f3      	bcc.n	8005954 <__mcmp+0x18>
 800596c:	e7fb      	b.n	8005966 <__mcmp+0x2a>
 800596e:	2001      	movs	r0, #1
 8005970:	e7f9      	b.n	8005966 <__mcmp+0x2a>
	...

08005974 <__mdiff>:
 8005974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	4689      	mov	r9, r1
 800597a:	4606      	mov	r6, r0
 800597c:	4611      	mov	r1, r2
 800597e:	4648      	mov	r0, r9
 8005980:	4614      	mov	r4, r2
 8005982:	f7ff ffdb 	bl	800593c <__mcmp>
 8005986:	1e05      	subs	r5, r0, #0
 8005988:	d112      	bne.n	80059b0 <__mdiff+0x3c>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	f7ff fd5b 	bl	8005448 <_Balloc>
 8005992:	4602      	mov	r2, r0
 8005994:	b928      	cbnz	r0, 80059a2 <__mdiff+0x2e>
 8005996:	4b3e      	ldr	r3, [pc, #248]	@ (8005a90 <__mdiff+0x11c>)
 8005998:	f240 2137 	movw	r1, #567	@ 0x237
 800599c:	483d      	ldr	r0, [pc, #244]	@ (8005a94 <__mdiff+0x120>)
 800599e:	f000 fb5d 	bl	800605c <__assert_func>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059a8:	4610      	mov	r0, r2
 80059aa:	b003      	add	sp, #12
 80059ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b0:	bfbc      	itt	lt
 80059b2:	464b      	movlt	r3, r9
 80059b4:	46a1      	movlt	r9, r4
 80059b6:	4630      	mov	r0, r6
 80059b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059bc:	bfba      	itte	lt
 80059be:	461c      	movlt	r4, r3
 80059c0:	2501      	movlt	r5, #1
 80059c2:	2500      	movge	r5, #0
 80059c4:	f7ff fd40 	bl	8005448 <_Balloc>
 80059c8:	4602      	mov	r2, r0
 80059ca:	b918      	cbnz	r0, 80059d4 <__mdiff+0x60>
 80059cc:	4b30      	ldr	r3, [pc, #192]	@ (8005a90 <__mdiff+0x11c>)
 80059ce:	f240 2145 	movw	r1, #581	@ 0x245
 80059d2:	e7e3      	b.n	800599c <__mdiff+0x28>
 80059d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059d8:	6926      	ldr	r6, [r4, #16]
 80059da:	60c5      	str	r5, [r0, #12]
 80059dc:	f109 0310 	add.w	r3, r9, #16
 80059e0:	f109 0514 	add.w	r5, r9, #20
 80059e4:	f104 0e14 	add.w	lr, r4, #20
 80059e8:	f100 0b14 	add.w	fp, r0, #20
 80059ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	46d9      	mov	r9, fp
 80059f8:	f04f 0c00 	mov.w	ip, #0
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	b281      	uxth	r1, r0
 8005a0a:	fa1f f38a 	uxth.w	r3, sl
 8005a0e:	1a5b      	subs	r3, r3, r1
 8005a10:	0c00      	lsrs	r0, r0, #16
 8005a12:	4463      	add	r3, ip
 8005a14:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a18:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a22:	4576      	cmp	r6, lr
 8005a24:	f849 3b04 	str.w	r3, [r9], #4
 8005a28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a2c:	d8e6      	bhi.n	80059fc <__mdiff+0x88>
 8005a2e:	1b33      	subs	r3, r6, r4
 8005a30:	3b15      	subs	r3, #21
 8005a32:	f023 0303 	bic.w	r3, r3, #3
 8005a36:	3415      	adds	r4, #21
 8005a38:	3304      	adds	r3, #4
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	bf38      	it	cc
 8005a3e:	2304      	movcc	r3, #4
 8005a40:	441d      	add	r5, r3
 8005a42:	445b      	add	r3, fp
 8005a44:	461e      	mov	r6, r3
 8005a46:	462c      	mov	r4, r5
 8005a48:	4544      	cmp	r4, r8
 8005a4a:	d30e      	bcc.n	8005a6a <__mdiff+0xf6>
 8005a4c:	f108 0103 	add.w	r1, r8, #3
 8005a50:	1b49      	subs	r1, r1, r5
 8005a52:	f021 0103 	bic.w	r1, r1, #3
 8005a56:	3d03      	subs	r5, #3
 8005a58:	45a8      	cmp	r8, r5
 8005a5a:	bf38      	it	cc
 8005a5c:	2100      	movcc	r1, #0
 8005a5e:	440b      	add	r3, r1
 8005a60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a64:	b191      	cbz	r1, 8005a8c <__mdiff+0x118>
 8005a66:	6117      	str	r7, [r2, #16]
 8005a68:	e79e      	b.n	80059a8 <__mdiff+0x34>
 8005a6a:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a6e:	46e6      	mov	lr, ip
 8005a70:	0c08      	lsrs	r0, r1, #16
 8005a72:	fa1c fc81 	uxtah	ip, ip, r1
 8005a76:	4471      	add	r1, lr
 8005a78:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a7c:	b289      	uxth	r1, r1
 8005a7e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a82:	f846 1b04 	str.w	r1, [r6], #4
 8005a86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a8a:	e7dd      	b.n	8005a48 <__mdiff+0xd4>
 8005a8c:	3f01      	subs	r7, #1
 8005a8e:	e7e7      	b.n	8005a60 <__mdiff+0xec>
 8005a90:	080062d4 	.word	0x080062d4
 8005a94:	080062e5 	.word	0x080062e5

08005a98 <__d2b>:
 8005a98:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	9e08      	ldr	r6, [sp, #32]
 8005aa0:	4690      	mov	r8, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	f7ff fcd0 	bl	8005448 <_Balloc>
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	b930      	cbnz	r0, 8005aba <__d2b+0x22>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b24      	ldr	r3, [pc, #144]	@ (8005b40 <__d2b+0xa8>)
 8005ab0:	4824      	ldr	r0, [pc, #144]	@ (8005b44 <__d2b+0xac>)
 8005ab2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ab6:	f000 fad1 	bl	800605c <__assert_func>
 8005aba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005abe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ac2:	b10d      	cbz	r5, 8005ac8 <__d2b+0x30>
 8005ac4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f1b8 0300 	subs.w	r3, r8, #0
 8005ace:	d024      	beq.n	8005b1a <__d2b+0x82>
 8005ad0:	4668      	mov	r0, sp
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	f7ff fd7f 	bl	80055d6 <__lo0bits>
 8005ad8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005adc:	b1d8      	cbz	r0, 8005b16 <__d2b+0x7e>
 8005ade:	f1c0 0320 	rsb	r3, r0, #32
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	40c2      	lsrs	r2, r0
 8005aea:	6163      	str	r3, [r4, #20]
 8005aec:	9201      	str	r2, [sp, #4]
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	61a3      	str	r3, [r4, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf0c      	ite	eq
 8005af6:	2201      	moveq	r2, #1
 8005af8:	2202      	movne	r2, #2
 8005afa:	6122      	str	r2, [r4, #16]
 8005afc:	b1ad      	cbz	r5, 8005b2a <__d2b+0x92>
 8005afe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b02:	4405      	add	r5, r0
 8005b04:	6035      	str	r5, [r6, #0]
 8005b06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	6018      	str	r0, [r3, #0]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	b002      	add	sp, #8
 8005b12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005b16:	6161      	str	r1, [r4, #20]
 8005b18:	e7e9      	b.n	8005aee <__d2b+0x56>
 8005b1a:	a801      	add	r0, sp, #4
 8005b1c:	f7ff fd5b 	bl	80055d6 <__lo0bits>
 8005b20:	9b01      	ldr	r3, [sp, #4]
 8005b22:	6163      	str	r3, [r4, #20]
 8005b24:	3020      	adds	r0, #32
 8005b26:	2201      	movs	r2, #1
 8005b28:	e7e7      	b.n	8005afa <__d2b+0x62>
 8005b2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b32:	6030      	str	r0, [r6, #0]
 8005b34:	6918      	ldr	r0, [r3, #16]
 8005b36:	f7ff fd2f 	bl	8005598 <__hi0bits>
 8005b3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b3e:	e7e4      	b.n	8005b0a <__d2b+0x72>
 8005b40:	080062d4 	.word	0x080062d4
 8005b44:	080062e5 	.word	0x080062e5

08005b48 <__sfputc_r>:
 8005b48:	6893      	ldr	r3, [r2, #8]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	b410      	push	{r4}
 8005b50:	6093      	str	r3, [r2, #8]
 8005b52:	da07      	bge.n	8005b64 <__sfputc_r+0x1c>
 8005b54:	6994      	ldr	r4, [r2, #24]
 8005b56:	42a3      	cmp	r3, r4
 8005b58:	db01      	blt.n	8005b5e <__sfputc_r+0x16>
 8005b5a:	290a      	cmp	r1, #10
 8005b5c:	d102      	bne.n	8005b64 <__sfputc_r+0x1c>
 8005b5e:	bc10      	pop	{r4}
 8005b60:	f7fe bc0d 	b.w	800437e <__swbuf_r>
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	1c58      	adds	r0, r3, #1
 8005b68:	6010      	str	r0, [r2, #0]
 8005b6a:	7019      	strb	r1, [r3, #0]
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	bc10      	pop	{r4}
 8005b70:	4770      	bx	lr

08005b72 <__sfputs_r>:
 8005b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	18d5      	adds	r5, r2, r3
 8005b7c:	42ac      	cmp	r4, r5
 8005b7e:	d101      	bne.n	8005b84 <__sfputs_r+0x12>
 8005b80:	2000      	movs	r0, #0
 8005b82:	e007      	b.n	8005b94 <__sfputs_r+0x22>
 8005b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b88:	463a      	mov	r2, r7
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	f7ff ffdc 	bl	8005b48 <__sfputc_r>
 8005b90:	1c43      	adds	r3, r0, #1
 8005b92:	d1f3      	bne.n	8005b7c <__sfputs_r+0xa>
 8005b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b98 <_vfiprintf_r>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	b09d      	sub	sp, #116	@ 0x74
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	4698      	mov	r8, r3
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	b118      	cbz	r0, 8005bb0 <_vfiprintf_r+0x18>
 8005ba8:	6a03      	ldr	r3, [r0, #32]
 8005baa:	b90b      	cbnz	r3, 8005bb0 <_vfiprintf_r+0x18>
 8005bac:	f7fe fafe 	bl	80041ac <__sinit>
 8005bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bb2:	07d9      	lsls	r1, r3, #31
 8005bb4:	d405      	bmi.n	8005bc2 <_vfiprintf_r+0x2a>
 8005bb6:	89ab      	ldrh	r3, [r5, #12]
 8005bb8:	059a      	lsls	r2, r3, #22
 8005bba:	d402      	bmi.n	8005bc2 <_vfiprintf_r+0x2a>
 8005bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bbe:	f7fe fcf0 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	071b      	lsls	r3, r3, #28
 8005bc6:	d501      	bpl.n	8005bcc <_vfiprintf_r+0x34>
 8005bc8:	692b      	ldr	r3, [r5, #16]
 8005bca:	b99b      	cbnz	r3, 8005bf4 <_vfiprintf_r+0x5c>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7fe fc14 	bl	80043fc <__swsetup_r>
 8005bd4:	b170      	cbz	r0, 8005bf4 <_vfiprintf_r+0x5c>
 8005bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bd8:	07dc      	lsls	r4, r3, #31
 8005bda:	d504      	bpl.n	8005be6 <_vfiprintf_r+0x4e>
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005be0:	b01d      	add	sp, #116	@ 0x74
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	89ab      	ldrh	r3, [r5, #12]
 8005be8:	0598      	lsls	r0, r3, #22
 8005bea:	d4f7      	bmi.n	8005bdc <_vfiprintf_r+0x44>
 8005bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bee:	f7fe fcd9 	bl	80045a4 <__retarget_lock_release_recursive>
 8005bf2:	e7f3      	b.n	8005bdc <_vfiprintf_r+0x44>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c02:	2330      	movs	r3, #48	@ 0x30
 8005c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005db4 <_vfiprintf_r+0x21c>
 8005c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c0c:	f04f 0901 	mov.w	r9, #1
 8005c10:	4623      	mov	r3, r4
 8005c12:	469a      	mov	sl, r3
 8005c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c18:	b10a      	cbz	r2, 8005c1e <_vfiprintf_r+0x86>
 8005c1a:	2a25      	cmp	r2, #37	@ 0x25
 8005c1c:	d1f9      	bne.n	8005c12 <_vfiprintf_r+0x7a>
 8005c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c22:	d00b      	beq.n	8005c3c <_vfiprintf_r+0xa4>
 8005c24:	465b      	mov	r3, fp
 8005c26:	4622      	mov	r2, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff ffa1 	bl	8005b72 <__sfputs_r>
 8005c30:	3001      	adds	r0, #1
 8005c32:	f000 80a7 	beq.w	8005d84 <_vfiprintf_r+0x1ec>
 8005c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c38:	445a      	add	r2, fp
 8005c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 809f 	beq.w	8005d84 <_vfiprintf_r+0x1ec>
 8005c46:	2300      	movs	r3, #0
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c50:	f10a 0a01 	add.w	sl, sl, #1
 8005c54:	9304      	str	r3, [sp, #16]
 8005c56:	9307      	str	r3, [sp, #28]
 8005c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c5e:	4654      	mov	r4, sl
 8005c60:	2205      	movs	r2, #5
 8005c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c66:	4853      	ldr	r0, [pc, #332]	@ (8005db4 <_vfiprintf_r+0x21c>)
 8005c68:	f7fa faba 	bl	80001e0 <memchr>
 8005c6c:	9a04      	ldr	r2, [sp, #16]
 8005c6e:	b9d8      	cbnz	r0, 8005ca8 <_vfiprintf_r+0x110>
 8005c70:	06d1      	lsls	r1, r2, #27
 8005c72:	bf44      	itt	mi
 8005c74:	2320      	movmi	r3, #32
 8005c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c7a:	0713      	lsls	r3, r2, #28
 8005c7c:	bf44      	itt	mi
 8005c7e:	232b      	movmi	r3, #43	@ 0x2b
 8005c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c84:	f89a 3000 	ldrb.w	r3, [sl]
 8005c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8a:	d015      	beq.n	8005cb8 <_vfiprintf_r+0x120>
 8005c8c:	9a07      	ldr	r2, [sp, #28]
 8005c8e:	4654      	mov	r4, sl
 8005c90:	2000      	movs	r0, #0
 8005c92:	f04f 0c0a 	mov.w	ip, #10
 8005c96:	4621      	mov	r1, r4
 8005c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c9c:	3b30      	subs	r3, #48	@ 0x30
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d94b      	bls.n	8005d3a <_vfiprintf_r+0x1a2>
 8005ca2:	b1b0      	cbz	r0, 8005cd2 <_vfiprintf_r+0x13a>
 8005ca4:	9207      	str	r2, [sp, #28]
 8005ca6:	e014      	b.n	8005cd2 <_vfiprintf_r+0x13a>
 8005ca8:	eba0 0308 	sub.w	r3, r0, r8
 8005cac:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	46a2      	mov	sl, r4
 8005cb6:	e7d2      	b.n	8005c5e <_vfiprintf_r+0xc6>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	1d19      	adds	r1, r3, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	9103      	str	r1, [sp, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfbb      	ittet	lt
 8005cc4:	425b      	neglt	r3, r3
 8005cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cca:	9307      	strge	r3, [sp, #28]
 8005ccc:	9307      	strlt	r3, [sp, #28]
 8005cce:	bfb8      	it	lt
 8005cd0:	9204      	strlt	r2, [sp, #16]
 8005cd2:	7823      	ldrb	r3, [r4, #0]
 8005cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cd6:	d10a      	bne.n	8005cee <_vfiprintf_r+0x156>
 8005cd8:	7863      	ldrb	r3, [r4, #1]
 8005cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cdc:	d132      	bne.n	8005d44 <_vfiprintf_r+0x1ac>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	1d1a      	adds	r2, r3, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	9203      	str	r2, [sp, #12]
 8005ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cea:	3402      	adds	r4, #2
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005db8 <_vfiprintf_r+0x220>
 8005cf2:	7821      	ldrb	r1, [r4, #0]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f7fa fa72 	bl	80001e0 <memchr>
 8005cfc:	b138      	cbz	r0, 8005d0e <_vfiprintf_r+0x176>
 8005cfe:	9b04      	ldr	r3, [sp, #16]
 8005d00:	eba0 000a 	sub.w	r0, r0, sl
 8005d04:	2240      	movs	r2, #64	@ 0x40
 8005d06:	4082      	lsls	r2, r0
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d12:	482a      	ldr	r0, [pc, #168]	@ (8005dbc <_vfiprintf_r+0x224>)
 8005d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d18:	2206      	movs	r2, #6
 8005d1a:	f7fa fa61 	bl	80001e0 <memchr>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d03f      	beq.n	8005da2 <_vfiprintf_r+0x20a>
 8005d22:	4b27      	ldr	r3, [pc, #156]	@ (8005dc0 <_vfiprintf_r+0x228>)
 8005d24:	bb1b      	cbnz	r3, 8005d6e <_vfiprintf_r+0x1d6>
 8005d26:	9b03      	ldr	r3, [sp, #12]
 8005d28:	3307      	adds	r3, #7
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	3308      	adds	r3, #8
 8005d30:	9303      	str	r3, [sp, #12]
 8005d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d34:	443b      	add	r3, r7
 8005d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d38:	e76a      	b.n	8005c10 <_vfiprintf_r+0x78>
 8005d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d3e:	460c      	mov	r4, r1
 8005d40:	2001      	movs	r0, #1
 8005d42:	e7a8      	b.n	8005c96 <_vfiprintf_r+0xfe>
 8005d44:	2300      	movs	r3, #0
 8005d46:	3401      	adds	r4, #1
 8005d48:	9305      	str	r3, [sp, #20]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f04f 0c0a 	mov.w	ip, #10
 8005d50:	4620      	mov	r0, r4
 8005d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d56:	3a30      	subs	r2, #48	@ 0x30
 8005d58:	2a09      	cmp	r2, #9
 8005d5a:	d903      	bls.n	8005d64 <_vfiprintf_r+0x1cc>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0c6      	beq.n	8005cee <_vfiprintf_r+0x156>
 8005d60:	9105      	str	r1, [sp, #20]
 8005d62:	e7c4      	b.n	8005cee <_vfiprintf_r+0x156>
 8005d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d68:	4604      	mov	r4, r0
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f0      	b.n	8005d50 <_vfiprintf_r+0x1b8>
 8005d6e:	ab03      	add	r3, sp, #12
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	462a      	mov	r2, r5
 8005d74:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <_vfiprintf_r+0x22c>)
 8005d76:	a904      	add	r1, sp, #16
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7fd fdd1 	bl	8003920 <_printf_float>
 8005d7e:	4607      	mov	r7, r0
 8005d80:	1c78      	adds	r0, r7, #1
 8005d82:	d1d6      	bne.n	8005d32 <_vfiprintf_r+0x19a>
 8005d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d86:	07d9      	lsls	r1, r3, #31
 8005d88:	d405      	bmi.n	8005d96 <_vfiprintf_r+0x1fe>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	059a      	lsls	r2, r3, #22
 8005d8e:	d402      	bmi.n	8005d96 <_vfiprintf_r+0x1fe>
 8005d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d92:	f7fe fc07 	bl	80045a4 <__retarget_lock_release_recursive>
 8005d96:	89ab      	ldrh	r3, [r5, #12]
 8005d98:	065b      	lsls	r3, r3, #25
 8005d9a:	f53f af1f 	bmi.w	8005bdc <_vfiprintf_r+0x44>
 8005d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005da0:	e71e      	b.n	8005be0 <_vfiprintf_r+0x48>
 8005da2:	ab03      	add	r3, sp, #12
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	462a      	mov	r2, r5
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <_vfiprintf_r+0x22c>)
 8005daa:	a904      	add	r1, sp, #16
 8005dac:	4630      	mov	r0, r6
 8005dae:	f7fe f851 	bl	8003e54 <_printf_i>
 8005db2:	e7e4      	b.n	8005d7e <_vfiprintf_r+0x1e6>
 8005db4:	08006440 	.word	0x08006440
 8005db8:	08006446 	.word	0x08006446
 8005dbc:	0800644a 	.word	0x0800644a
 8005dc0:	08003921 	.word	0x08003921
 8005dc4:	08005b73 	.word	0x08005b73

08005dc8 <__sflush_r>:
 8005dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	0716      	lsls	r6, r2, #28
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	d454      	bmi.n	8005e80 <__sflush_r+0xb8>
 8005dd6:	684b      	ldr	r3, [r1, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dc02      	bgt.n	8005de2 <__sflush_r+0x1a>
 8005ddc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dd48      	ble.n	8005e74 <__sflush_r+0xac>
 8005de2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	d045      	beq.n	8005e74 <__sflush_r+0xac>
 8005de8:	2300      	movs	r3, #0
 8005dea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005dee:	682f      	ldr	r7, [r5, #0]
 8005df0:	6a21      	ldr	r1, [r4, #32]
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	d030      	beq.n	8005e58 <__sflush_r+0x90>
 8005df6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	0759      	lsls	r1, r3, #29
 8005dfc:	d505      	bpl.n	8005e0a <__sflush_r+0x42>
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e04:	b10b      	cbz	r3, 8005e0a <__sflush_r+0x42>
 8005e06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e08:	1ad2      	subs	r2, r2, r3
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e0e:	6a21      	ldr	r1, [r4, #32]
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b0      	blx	r6
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	d106      	bne.n	8005e28 <__sflush_r+0x60>
 8005e1a:	6829      	ldr	r1, [r5, #0]
 8005e1c:	291d      	cmp	r1, #29
 8005e1e:	d82b      	bhi.n	8005e78 <__sflush_r+0xb0>
 8005e20:	4a28      	ldr	r2, [pc, #160]	@ (8005ec4 <__sflush_r+0xfc>)
 8005e22:	410a      	asrs	r2, r1
 8005e24:	07d6      	lsls	r6, r2, #31
 8005e26:	d427      	bmi.n	8005e78 <__sflush_r+0xb0>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	6062      	str	r2, [r4, #4]
 8005e2c:	04d9      	lsls	r1, r3, #19
 8005e2e:	6922      	ldr	r2, [r4, #16]
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	d504      	bpl.n	8005e3e <__sflush_r+0x76>
 8005e34:	1c42      	adds	r2, r0, #1
 8005e36:	d101      	bne.n	8005e3c <__sflush_r+0x74>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b903      	cbnz	r3, 8005e3e <__sflush_r+0x76>
 8005e3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e40:	602f      	str	r7, [r5, #0]
 8005e42:	b1b9      	cbz	r1, 8005e74 <__sflush_r+0xac>
 8005e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	d002      	beq.n	8005e52 <__sflush_r+0x8a>
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f7ff f9fb 	bl	8005248 <_free_r>
 8005e52:	2300      	movs	r3, #0
 8005e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e56:	e00d      	b.n	8005e74 <__sflush_r+0xac>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b0      	blx	r6
 8005e5e:	4602      	mov	r2, r0
 8005e60:	1c50      	adds	r0, r2, #1
 8005e62:	d1c9      	bne.n	8005df8 <__sflush_r+0x30>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0c6      	beq.n	8005df8 <__sflush_r+0x30>
 8005e6a:	2b1d      	cmp	r3, #29
 8005e6c:	d001      	beq.n	8005e72 <__sflush_r+0xaa>
 8005e6e:	2b16      	cmp	r3, #22
 8005e70:	d11d      	bne.n	8005eae <__sflush_r+0xe6>
 8005e72:	602f      	str	r7, [r5, #0]
 8005e74:	2000      	movs	r0, #0
 8005e76:	e021      	b.n	8005ebc <__sflush_r+0xf4>
 8005e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	e01a      	b.n	8005eb6 <__sflush_r+0xee>
 8005e80:	690f      	ldr	r7, [r1, #16]
 8005e82:	2f00      	cmp	r7, #0
 8005e84:	d0f6      	beq.n	8005e74 <__sflush_r+0xac>
 8005e86:	0793      	lsls	r3, r2, #30
 8005e88:	680e      	ldr	r6, [r1, #0]
 8005e8a:	bf08      	it	eq
 8005e8c:	694b      	ldreq	r3, [r1, #20]
 8005e8e:	600f      	str	r7, [r1, #0]
 8005e90:	bf18      	it	ne
 8005e92:	2300      	movne	r3, #0
 8005e94:	1bf6      	subs	r6, r6, r7
 8005e96:	608b      	str	r3, [r1, #8]
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	ddeb      	ble.n	8005e74 <__sflush_r+0xac>
 8005e9c:	6a21      	ldr	r1, [r4, #32]
 8005e9e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005ea2:	4633      	mov	r3, r6
 8005ea4:	463a      	mov	r2, r7
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47e0      	blx	ip
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	dc07      	bgt.n	8005ebe <__sflush_r+0xf6>
 8005eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ebe:	4407      	add	r7, r0
 8005ec0:	1a36      	subs	r6, r6, r0
 8005ec2:	e7e9      	b.n	8005e98 <__sflush_r+0xd0>
 8005ec4:	dfbffffe 	.word	0xdfbffffe

08005ec8 <_fflush_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	690b      	ldr	r3, [r1, #16]
 8005ecc:	4605      	mov	r5, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	b913      	cbnz	r3, 8005ed8 <_fflush_r+0x10>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	b118      	cbz	r0, 8005ee2 <_fflush_r+0x1a>
 8005eda:	6a03      	ldr	r3, [r0, #32]
 8005edc:	b90b      	cbnz	r3, 8005ee2 <_fflush_r+0x1a>
 8005ede:	f7fe f965 	bl	80041ac <__sinit>
 8005ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f3      	beq.n	8005ed2 <_fflush_r+0xa>
 8005eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005eec:	07d0      	lsls	r0, r2, #31
 8005eee:	d404      	bmi.n	8005efa <_fflush_r+0x32>
 8005ef0:	0599      	lsls	r1, r3, #22
 8005ef2:	d402      	bmi.n	8005efa <_fflush_r+0x32>
 8005ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef6:	f7fe fb54 	bl	80045a2 <__retarget_lock_acquire_recursive>
 8005efa:	4628      	mov	r0, r5
 8005efc:	4621      	mov	r1, r4
 8005efe:	f7ff ff63 	bl	8005dc8 <__sflush_r>
 8005f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f04:	07da      	lsls	r2, r3, #31
 8005f06:	4605      	mov	r5, r0
 8005f08:	d4e4      	bmi.n	8005ed4 <_fflush_r+0xc>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	059b      	lsls	r3, r3, #22
 8005f0e:	d4e1      	bmi.n	8005ed4 <_fflush_r+0xc>
 8005f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f12:	f7fe fb47 	bl	80045a4 <__retarget_lock_release_recursive>
 8005f16:	e7dd      	b.n	8005ed4 <_fflush_r+0xc>

08005f18 <__swhatbuf_r>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	2900      	cmp	r1, #0
 8005f22:	b096      	sub	sp, #88	@ 0x58
 8005f24:	4615      	mov	r5, r2
 8005f26:	461e      	mov	r6, r3
 8005f28:	da0d      	bge.n	8005f46 <__swhatbuf_r+0x2e>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f30:	f04f 0100 	mov.w	r1, #0
 8005f34:	bf14      	ite	ne
 8005f36:	2340      	movne	r3, #64	@ 0x40
 8005f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	6031      	str	r1, [r6, #0]
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	b016      	add	sp, #88	@ 0x58
 8005f44:	bd70      	pop	{r4, r5, r6, pc}
 8005f46:	466a      	mov	r2, sp
 8005f48:	f000 f848 	bl	8005fdc <_fstat_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	dbec      	blt.n	8005f2a <__swhatbuf_r+0x12>
 8005f50:	9901      	ldr	r1, [sp, #4]
 8005f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f5a:	4259      	negs	r1, r3
 8005f5c:	4159      	adcs	r1, r3
 8005f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f62:	e7eb      	b.n	8005f3c <__swhatbuf_r+0x24>

08005f64 <__smakebuf_r>:
 8005f64:	898b      	ldrh	r3, [r1, #12]
 8005f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f68:	079d      	lsls	r5, r3, #30
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	d507      	bpl.n	8005f80 <__smakebuf_r+0x1c>
 8005f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	6123      	str	r3, [r4, #16]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	6163      	str	r3, [r4, #20]
 8005f7c:	b003      	add	sp, #12
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f80:	ab01      	add	r3, sp, #4
 8005f82:	466a      	mov	r2, sp
 8005f84:	f7ff ffc8 	bl	8005f18 <__swhatbuf_r>
 8005f88:	9f00      	ldr	r7, [sp, #0]
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f7ff f9ce 	bl	8005330 <_malloc_r>
 8005f94:	b948      	cbnz	r0, 8005faa <__smakebuf_r+0x46>
 8005f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f9a:	059a      	lsls	r2, r3, #22
 8005f9c:	d4ee      	bmi.n	8005f7c <__smakebuf_r+0x18>
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	f043 0302 	orr.w	r3, r3, #2
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	e7e2      	b.n	8005f70 <__smakebuf_r+0xc>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	6020      	str	r0, [r4, #0]
 8005fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fba:	b15b      	cbz	r3, 8005fd4 <__smakebuf_r+0x70>
 8005fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f000 f81d 	bl	8006000 <_isatty_r>
 8005fc6:	b128      	cbz	r0, 8005fd4 <__smakebuf_r+0x70>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	431d      	orrs	r5, r3
 8005fd8:	81a5      	strh	r5, [r4, #12]
 8005fda:	e7cf      	b.n	8005f7c <__smakebuf_r+0x18>

08005fdc <_fstat_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	@ (8005ffc <_fstat_r+0x20>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	f7fb fc19 	bl	8001820 <_fstat>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d102      	bne.n	8005ff8 <_fstat_r+0x1c>
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	b103      	cbz	r3, 8005ff8 <_fstat_r+0x1c>
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200003cc 	.word	0x200003cc

08006000 <_isatty_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d06      	ldr	r5, [pc, #24]	@ (800601c <_isatty_r+0x1c>)
 8006004:	2300      	movs	r3, #0
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	f7fb fc17 	bl	800183e <_isatty>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_isatty_r+0x1a>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_isatty_r+0x1a>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	200003cc 	.word	0x200003cc

08006020 <_sbrk_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d06      	ldr	r5, [pc, #24]	@ (800603c <_sbrk_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb fc1e 	bl	800186c <_sbrk>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_sbrk_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_sbrk_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200003cc 	.word	0x200003cc

08006040 <memcpy>:
 8006040:	440a      	add	r2, r1
 8006042:	4291      	cmp	r1, r2
 8006044:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006048:	d100      	bne.n	800604c <memcpy+0xc>
 800604a:	4770      	bx	lr
 800604c:	b510      	push	{r4, lr}
 800604e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006056:	4291      	cmp	r1, r2
 8006058:	d1f9      	bne.n	800604e <memcpy+0xe>
 800605a:	bd10      	pop	{r4, pc}

0800605c <__assert_func>:
 800605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800605e:	4614      	mov	r4, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <__assert_func+0x2c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4605      	mov	r5, r0
 8006068:	68d8      	ldr	r0, [r3, #12]
 800606a:	b954      	cbnz	r4, 8006082 <__assert_func+0x26>
 800606c:	4b07      	ldr	r3, [pc, #28]	@ (800608c <__assert_func+0x30>)
 800606e:	461c      	mov	r4, r3
 8006070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006074:	9100      	str	r1, [sp, #0]
 8006076:	462b      	mov	r3, r5
 8006078:	4905      	ldr	r1, [pc, #20]	@ (8006090 <__assert_func+0x34>)
 800607a:	f000 f841 	bl	8006100 <fiprintf>
 800607e:	f000 f851 	bl	8006124 <abort>
 8006082:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <__assert_func+0x38>)
 8006084:	e7f4      	b.n	8006070 <__assert_func+0x14>
 8006086:	bf00      	nop
 8006088:	20000018 	.word	0x20000018
 800608c:	08006496 	.word	0x08006496
 8006090:	08006468 	.word	0x08006468
 8006094:	0800645b 	.word	0x0800645b

08006098 <_calloc_r>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	fba1 5402 	umull	r5, r4, r1, r2
 800609e:	b93c      	cbnz	r4, 80060b0 <_calloc_r+0x18>
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7ff f945 	bl	8005330 <_malloc_r>
 80060a6:	4606      	mov	r6, r0
 80060a8:	b928      	cbnz	r0, 80060b6 <_calloc_r+0x1e>
 80060aa:	2600      	movs	r6, #0
 80060ac:	4630      	mov	r0, r6
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	220c      	movs	r2, #12
 80060b2:	6002      	str	r2, [r0, #0]
 80060b4:	e7f9      	b.n	80060aa <_calloc_r+0x12>
 80060b6:	462a      	mov	r2, r5
 80060b8:	4621      	mov	r1, r4
 80060ba:	f7fe f9f5 	bl	80044a8 <memset>
 80060be:	e7f5      	b.n	80060ac <_calloc_r+0x14>

080060c0 <__ascii_mbtowc>:
 80060c0:	b082      	sub	sp, #8
 80060c2:	b901      	cbnz	r1, 80060c6 <__ascii_mbtowc+0x6>
 80060c4:	a901      	add	r1, sp, #4
 80060c6:	b142      	cbz	r2, 80060da <__ascii_mbtowc+0x1a>
 80060c8:	b14b      	cbz	r3, 80060de <__ascii_mbtowc+0x1e>
 80060ca:	7813      	ldrb	r3, [r2, #0]
 80060cc:	600b      	str	r3, [r1, #0]
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	1e10      	subs	r0, r2, #0
 80060d2:	bf18      	it	ne
 80060d4:	2001      	movne	r0, #1
 80060d6:	b002      	add	sp, #8
 80060d8:	4770      	bx	lr
 80060da:	4610      	mov	r0, r2
 80060dc:	e7fb      	b.n	80060d6 <__ascii_mbtowc+0x16>
 80060de:	f06f 0001 	mvn.w	r0, #1
 80060e2:	e7f8      	b.n	80060d6 <__ascii_mbtowc+0x16>

080060e4 <__ascii_wctomb>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	4608      	mov	r0, r1
 80060e8:	b141      	cbz	r1, 80060fc <__ascii_wctomb+0x18>
 80060ea:	2aff      	cmp	r2, #255	@ 0xff
 80060ec:	d904      	bls.n	80060f8 <__ascii_wctomb+0x14>
 80060ee:	228a      	movs	r2, #138	@ 0x8a
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f6:	4770      	bx	lr
 80060f8:	700a      	strb	r2, [r1, #0]
 80060fa:	2001      	movs	r0, #1
 80060fc:	4770      	bx	lr
	...

08006100 <fiprintf>:
 8006100:	b40e      	push	{r1, r2, r3}
 8006102:	b503      	push	{r0, r1, lr}
 8006104:	4601      	mov	r1, r0
 8006106:	ab03      	add	r3, sp, #12
 8006108:	4805      	ldr	r0, [pc, #20]	@ (8006120 <fiprintf+0x20>)
 800610a:	f853 2b04 	ldr.w	r2, [r3], #4
 800610e:	6800      	ldr	r0, [r0, #0]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	f7ff fd41 	bl	8005b98 <_vfiprintf_r>
 8006116:	b002      	add	sp, #8
 8006118:	f85d eb04 	ldr.w	lr, [sp], #4
 800611c:	b003      	add	sp, #12
 800611e:	4770      	bx	lr
 8006120:	20000018 	.word	0x20000018

08006124 <abort>:
 8006124:	b508      	push	{r3, lr}
 8006126:	2006      	movs	r0, #6
 8006128:	f000 f82c 	bl	8006184 <raise>
 800612c:	2001      	movs	r0, #1
 800612e:	f7fb fb28 	bl	8001782 <_exit>

08006132 <_raise_r>:
 8006132:	291f      	cmp	r1, #31
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4605      	mov	r5, r0
 8006138:	460c      	mov	r4, r1
 800613a:	d904      	bls.n	8006146 <_raise_r+0x14>
 800613c:	2316      	movs	r3, #22
 800613e:	6003      	str	r3, [r0, #0]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006144:	bd38      	pop	{r3, r4, r5, pc}
 8006146:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006148:	b112      	cbz	r2, 8006150 <_raise_r+0x1e>
 800614a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800614e:	b94b      	cbnz	r3, 8006164 <_raise_r+0x32>
 8006150:	4628      	mov	r0, r5
 8006152:	f000 f831 	bl	80061b8 <_getpid_r>
 8006156:	4622      	mov	r2, r4
 8006158:	4601      	mov	r1, r0
 800615a:	4628      	mov	r0, r5
 800615c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006160:	f000 b818 	b.w	8006194 <_kill_r>
 8006164:	2b01      	cmp	r3, #1
 8006166:	d00a      	beq.n	800617e <_raise_r+0x4c>
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	d103      	bne.n	8006174 <_raise_r+0x42>
 800616c:	2316      	movs	r3, #22
 800616e:	6003      	str	r3, [r0, #0]
 8006170:	2001      	movs	r0, #1
 8006172:	e7e7      	b.n	8006144 <_raise_r+0x12>
 8006174:	2100      	movs	r1, #0
 8006176:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800617a:	4620      	mov	r0, r4
 800617c:	4798      	blx	r3
 800617e:	2000      	movs	r0, #0
 8006180:	e7e0      	b.n	8006144 <_raise_r+0x12>
	...

08006184 <raise>:
 8006184:	4b02      	ldr	r3, [pc, #8]	@ (8006190 <raise+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f7ff bfd2 	b.w	8006132 <_raise_r>
 800618e:	bf00      	nop
 8006190:	20000018 	.word	0x20000018

08006194 <_kill_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	@ (80061b4 <_kill_r+0x20>)
 8006198:	2300      	movs	r3, #0
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	f7fb fade 	bl	8001762 <_kill>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d102      	bne.n	80061b0 <_kill_r+0x1c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	b103      	cbz	r3, 80061b0 <_kill_r+0x1c>
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	200003cc 	.word	0x200003cc

080061b8 <_getpid_r>:
 80061b8:	f7fb bacc 	b.w	8001754 <_getpid>

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
